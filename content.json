{"meta":{"title":"Helianthuswhite","subtitle":"","description":"唯音乐与书不可辜负，唯理想与你不可遗忘","author":"helianthuswhite","url":"http://helianthuswhite.cn"},"pages":[{"title":"categories","date":"2016-11-11T07:51:50.000Z","updated":"2019-07-02T11:57:16.191Z","comments":true,"path":"categories/index.html","permalink":"http://helianthuswhite.cn/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2016-10-10T14:39:02.000Z","updated":"2019-07-02T11:57:16.862Z","comments":true,"path":"tags/index.html","permalink":"http://helianthuswhite.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"table无法设置td宽度","slug":"article-66","date":"2017-10-11T07:19:22.000Z","updated":"2019-07-02T11:57:11.168Z","comments":true,"path":"2017/10/11/article-66/","link":"","permalink":"http://helianthuswhite.cn/2017/10/11/article-66/","excerpt":"今天在修改别人的代码的时候突然遇到这么一个问题，在之前的代码中给&lt;table&gt;标签的&lt;td width=&quot;25%&quot;&gt;设置了宽度，可是当&lt;td&gt;中的内容增多时，依然被撑开了，而不是设定好的25%。 于是我试了给&lt;td style=&quot;width: 25%&quot;&gt;设置样式，在css文件中设置样式，以及在标签内加入一个块级元素的方式，都失败了。。。。。。 只能在网上找寻办法，发现了table有这么一个CSS属性：table-layout。","text":"今天在修改别人的代码的时候突然遇到这么一个问题，在之前的代码中给&lt;table&gt;标签的&lt;td width=&quot;25%&quot;&gt;设置了宽度，可是当&lt;td&gt;中的内容增多时，依然被撑开了，而不是设定好的25%。 于是我试了给&lt;td style=&quot;width: 25%&quot;&gt;设置样式，在css文件中设置样式，以及在标签内加入一个块级元素的方式，都失败了。。。。。。 只能在网上找寻办法，发现了table有这么一个CSS属性：table-layout。 这个属性主要有两个属性值： automatic //默认值，列宽度由单元格内容设定 fixed //列宽由表格宽度和列宽度设定 从属性值我们可以知道，在我们不给table设置这个属性时，列宽都是由单元格内容自适应的，设定了属性值fixed之后，我们才可以给列宽设定值来手动更改表格的布局。 不过需要知道的是，自动表格布局在计算布局时由于要自适应内容，所以会把所有的内容都遍历一遍，这样就会很慢。而固定表格的布局时，当浏览器接收到表格的第一行之后就会完成表格的布局，不会再计算后面的内容，也快速了很多。 所以我们最终的解决办法就是给table设置这么一个样式属性，属性值为fixed，然后再给td设置宽度即可生效。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"},{"name":"HTML","slug":"HTML","permalink":"http://helianthuswhite.cn/tags/HTML/"},{"name":"响应式","slug":"响应式","permalink":"http://helianthuswhite.cn/tags/响应式/"}]},{"title":"viewport的理解","slug":"article-65","date":"2017-09-30T11:42:49.000Z","updated":"2019-07-02T11:57:10.961Z","comments":true,"path":"2017/09/30/article-65/","link":"","permalink":"http://helianthuswhite.cn/2017/09/30/article-65/","excerpt":"以前一直没有注意过这个属性的含义，后来在做移动端的一些设计的时候，这个属性已经成了必不可少的东西，所以才找了时间去好好理解一下。","text":"以前一直没有注意过这个属性的含义，后来在做移动端的一些设计的时候，这个属性已经成了必不可少的东西，所以才找了时间去好好理解一下。 先提一个概念 —— 像素比，这个东西指的是设备物理像素与设备无关像素（dips)的比例。设备的物理像素很好理解，就是设备的分辨率，那dips是什么东西呢？这个我们可以直接将其理解为屏幕的可视区域大小。比如显示器的分辨率为1600px，那么设备的物理像素就是1600px，而显示器的可视区域只有800px，那么这800px即是显示器的dips，于是我们可以知道该设备的像素比为2。 知道了像素比和dips，再来说一说我们的CSS样式中的像素。在未进行任何设置的情况下，CSS中的像素与设备的物理像素保持一致。这时我们设置CSS中的1px，对应到屏幕中去实际的像素也是物理像素的1px。 我们这里使用一张200 X 200的图片来演示。 代码：1234567891011121314151617&lt;html&gt; &lt;head&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;style&gt; .photo &#123; width: 200px; height: 200px; border: solid 1px #000; background: url(./author.jpg) no-repeat; background-size: 100% 100%; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"photo\"&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 上面是未添加viewport的图片，下面是添加了viewport的图片。 从上面的对比我们可以发现，在未添加viewport时，虽然设备的dips只有375 X 667，但是由于CSS中的1px是与屏幕分辨率对应的，所以我们设置的图片会显示的很小。而通过设置viewport我们将CSS像素与dips比例设置为1，这时CSS中的1px与dips保持一致，图片便会变大。 在知道了上面的事情，我们可以大致理解viewport的作用，即改变CSS像素与dips的比例，下面是viewport的其他属性解析。 需要注意的是，通常我们不会给width和height属性设置具体的数值，而是通过设置width=device-width来使viewport的大小与设备大小即dips一致。 参考文章： 响应式网页开发基础：DPR 与 viewport 深入了解viewport和px","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"响应式设计","slug":"响应式设计","permalink":"http://helianthuswhite.cn/tags/响应式设计/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"},{"name":"HTML","slug":"HTML","permalink":"http://helianthuswhite.cn/tags/HTML/"}]},{"title":"关于p标签内容换行问题","slug":"article-64","date":"2017-09-27T05:13:41.000Z","updated":"2019-07-02T11:57:10.801Z","comments":true,"path":"2017/09/27/article-64/","link":"","permalink":"http://helianthuswhite.cn/2017/09/27/article-64/","excerpt":"今天同事突然给我反馈了一个这样的问题，我一看，什么鬼，怎么变成这样了。就看了一下代码，发现每一行右边的p标签用了absolute属性，所以就导致了发生了这样的事情。","text":"今天同事突然给我反馈了一个这样的问题，我一看，什么鬼，怎么变成这样了。就看了一下代码，发现每一行右边的p标签用了absolute属性，所以就导致了发生了这样的事情。 拿到手的第一想法，把absolute属性去掉就是了，然后通过margin来控制定位与左边对齐，这样右边p标签的高度就可以跟着内容自适应了。 纳尼，为什么第一行是这样的，这么难受吗。我又好好看了一下代码，好像没什么问题，就搜了一下，发现浏览器对中英文字符处理是不一样的。 准确的说是对中日韩文本和其他文本处理不一样，我上面第一行的链接会被浏览器当做一个单词展示，所以不会换行的。 既然还有这种操作，那也只能默默承受了。于是我又好好去看了一下w3c的CSS文本属性，发现了解决办法。 CSS文本换行在文本属性的最后，我发现了有这么三个属性text-wrap、word-break、word-wrap。 这三个属性都是规定文本的换行规则的，但是text-wrap属性目前主流浏览器都不支持，所以我们只关注下面的两个属性。 word-break从描述上已经知道了非中日韩文本的换行容易出现问题，可以使用该属性解决，它的属性值主要有以下三个： normal //使用浏览器默认的换行规则 break-all //允许在单词内换行 keep-all //只能在半角空格或连字符处换行 大概是什么意思呢，break-all就是当一个单词在上一行显示不下时，可以在单词内换行，一部分到下一行中去；keep-all也是可以换行，但是不允许将一个单词折断，如果一个单词在上一行显示不下，会在单词前面的空格处换行，但是这会导致一个问题，如果单词过长的话，第二行也显示不下的时候单词是不会再换行了。 break-word这个属性就可以很好的解决我的问题，允许长单词或URL地址换行到下一行，它的属性值只有两个： normal //只在允许的断字点换行 break-word //在长单词或者URL地址内部进行换行 这里也需要解释一下，其实normal属性跟word-break的keep-all属性的功能是一致的，而break-word则是将break-all和keep-all的功能进行了叠加，即一行展示不下时，单词会换到下一行，如果下一行再显示不下则会在单词内进行换行处理。 结语有了上面的两个属性，我们的BUG就被开心的解决了，但是对于文本换行的处理，不止这些，因为会涉及到一个空格转换的问题，浏览器对空格的处理和对&amp;nbsp;的处理是不一样的。不过这里就没深究了，感兴趣的同学可以查看一下AlloyTeam博客的这篇文章：【CSS单词换行and断词，你真的完全了解吗】。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"},{"name":"CSS3","slug":"CSS3","permalink":"http://helianthuswhite.cn/tags/CSS3/"}]},{"title":"我要你","slug":"music-20","date":"2017-09-23T14:48:07.000Z","updated":"2019-07-02T11:57:14.106Z","comments":true,"path":"2017/09/23/music-20/","link":"","permalink":"http://helianthuswhite.cn/2017/09/23/music-20/","excerpt":"我在他乡，望着月亮","text":"我在他乡，望着月亮 我要你 - 任素汐我要 你在我身旁我要 你为我梳妆这夜的风儿吹吹得心痒痒 我的情郎我在他乡 望着月亮都怪这月色 撩人的疯狂都怪这Guitar 弹得太凄凉欧 我要唱着歌默默把你想 我的情郎你在何方 眼看天亮都怪这夜色 撩人的疯狂都怪这Guitar 弹得太凄凉欧 我要唱着歌默默把你想 我的情郎你在何方 眼看天亮我要 美丽的衣裳为你 对镜贴花黄这夜色太紧张时间太漫长 我的情郎我在他乡 望着月亮","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"前世情人","slug":"music-19","date":"2017-09-23T14:48:04.000Z","updated":"2019-07-02T11:57:13.733Z","comments":true,"path":"2017/09/23/music-19/","link":"","permalink":"http://helianthuswhite.cn/2017/09/23/music-19/","excerpt":"什么爱不说就已经存在，什么爱望着就全都明白","text":"什么爱不说就已经存在，什么爱望着就全都明白 前世情人 - 周杰伦松鼠陪着核桃在庭院捉迷藏葡萄躲进橡木桶酿出时光夏日在玉米齿缝中游荡我为你准备的四季正在生长炼金师从故事炼出土壤我阖上书也闻到了花香草地上的你比果实芬芳你就像天使手里的糖小男孩害羞没想起自己是个雕像沉浸在芦苇跟风合奏用美妙歌声赞扬世界因为你而露出阳光灿烂的形状谢谢你不然纯真是什么我早已经遗忘什么爱不说就已经存在什么爱望着就全都明白你笑一点一点一滴漾开一字一句形容不来是星空上的银海月晕下的双手越来越来越来越依靠从来从来从来不知道原来原来原来有你很骄傲小公主过来过来过来约定好未来未来未来的城堡将来将来将来我们一起造我会当你昼夜骑士烈阳的树荫让花朵为你吟游的魔术师每一道有你风景帮你按下快门的秘密情人什么爱不说就已经存在什么爱望着就全都明白你笑一点一点一滴漾开一字一句形容不来是星空上的银海我后来会在纯白的礼堂牵好久的手交给另个他眼泪一点一点一滴流下感动也会跟着留下远远看着你们幸福像前世我们有过的模样","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"失恋","slug":"music-18","date":"2017-09-23T14:48:00.000Z","updated":"2019-07-02T11:57:13.501Z","comments":true,"path":"2017/09/23/music-18/","link":"","permalink":"http://helianthuswhite.cn/2017/09/23/music-18/","excerpt":"莫于孤清里自怜自挂","text":"莫于孤清里自怜自挂 失恋 - 草蜢将敌意 将身份放低些吧今夜里 应一起了解她失败过 哪用怕 即管说吧共于苦恋中找点潇洒深夜里 将一起暗恋的她互倾诉 不应关闭嘴巴遭遇也 会近似 将苦诉吧莫于孤清里自怜自挂象你这般深爱她 心里只得一个她她偏却 太傲气 见面也不多说话要坦率分析 为何没法得到她心里长留下旧创疤将阵线 将思想也统一吧于今晚 应一起探讨她假若有 结论再 一起爱吧莫于孤清里自怜自挂将敌意 将身份放低些吧今夜里 应一起了解她失败过 哪用怕 即管说吧共于苦恋中找点潇洒深夜时 将一起暗恋的她互倾诉 不应关闭嘴巴遭遇也 会近似 将苦诉吧莫于孤清里自怜自挂象你这般深爱她 心里只得一个她她偏却 太傲气 见面也不多说话要坦率分析 为何没法得到她心里长留下旧创疤将阵线 将思想也统一吧于今晚 应一起探讨她假若有 结论再 一起爱吧莫于孤清里自怜自挂莫于孤清里自怜自挂莫于孤清里自怜自挂","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"电灯胆","slug":"music-17","date":"2017-09-23T14:47:55.000Z","updated":"2019-07-02T11:57:13.340Z","comments":true,"path":"2017/09/23/music-17/","link":"","permalink":"http://helianthuswhite.cn/2017/09/23/music-17/","excerpt":"能回避嘛我怕了当那电灯胆","text":"能回避嘛我怕了当那电灯胆 电灯胆 - 邓丽欣假使不能公开妒忌学习大方接受同行时要殿后谁冷落旧朋友节日约我三位一体的庆祝沿途明亮灯饰闪映着沉重言谈越炽热内在更冰冻谁当初无心将两方撮合然后留低只得这寂寞人仍是你们密友呆望你们热吻应该伤感还是快感能回避嘛我怕了当那电灯胆黏着你们来来回委曲中受难一个我被撇低却又很不惯要走的一剎又折返能承认嘛我故意当那电灯胆他日你们完场时入替也不难善良人埋藏着最坏的心眼妄想一天你们会散会选我吗对换了你身份可应该满足情人还是知己都拥入怀抱同情或眼泪让别个得到留低的原因一世的秘密其实明知只得我是外人仍是你们密友呆望你们热吻应该开心还是痛心能回避嘛我怕了当那电灯胆黏着你们来来回委曲中受难一个我被撇低却又很不惯要走的一剎又折返能承认嘛我故意当那电灯胆他日你们完场时入替也不难善良人埋藏着最坏的心眼妄想一天你们会散会选我吗","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"我们的歌","slug":"music-16","date":"2017-09-23T14:47:50.000Z","updated":"2019-07-02T11:57:13.110Z","comments":true,"path":"2017/09/23/music-16/","link":"","permalink":"http://helianthuswhite.cn/2017/09/23/music-16/","excerpt":"情人总分分合合，可我们却越爱越深","text":"情人总分分合合，可我们却越爱越深 我们的歌 - 王力宏已经听了一百遍 怎么听都不会倦从白天唱到黑夜 你一直在身边（一直在身边）如果世界太危险 只有音乐最安全 带着我进梦里面 让歌词都实现无论是开心还是难过我的爱一直不变（不必担心时间流逝带走一切）无论是HIP-HOP还是摇滚我的爱一直不变（所有美好回忆记录在里面）这种Forever Love 那么深我们的歌 那么真无国界 跨时代再不会叫我KISS GOODBYE要每一句能够动人心弦 YE~~情人总分分合合可是我们却越爱越深认识你让我的幸福如此 悦耳能不能不要切歌 继续唱我们的歌让感动一辈子都记得en heng~wo~ o~已经听了一百遍 怎么听都不会倦从白天唱到黑夜 你一直在身边（一直在身边）如果世界太危险 只有音乐最安全 带着我进梦里面 让歌词都实现无论是开心还是难过我的爱一直不变（不必担心时间流逝带走一切）无论是HIP-HOP还是摇滚我的爱一直不变（所有美好回忆记录在里面）这种Forever Love那么深 我们的歌那么真无国界 跨时代再不会叫我KISS GOODBYE要每一句能够动人心弦 YE情人总分分合合可是我们却越爱越深认识你让我的幸福如此 悦耳能不能不要切歌 继续唱我们的歌让感动一辈子都记得（一辈子都记得）情人总分分合合可是我们却越爱越深认识你让我的幸福如此 悦耳能不能不要切歌 继续唱我们的歌让感动一辈子都记得","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"宝贝","slug":"music-15","date":"2017-09-23T14:47:40.000Z","updated":"2019-07-02T11:57:13.036Z","comments":true,"path":"2017/09/23/music-15/","link":"","permalink":"http://helianthuswhite.cn/2017/09/23/music-15/","excerpt":"哎呀呀呀呀呀我的宝贝，要你知道你最美","text":"哎呀呀呀呀呀我的宝贝，要你知道你最美 宝贝 - 张悬我的宝贝 宝贝给你一点甜甜让你今夜都好眠我的小鬼 小鬼逗逗你的眉眼让你喜欢这世界哇啦啦啦啦啦我的宝贝倦的时候有个人陪哎呀呀呀呀呀我的宝贝要你知道你最美我的宝贝 宝贝给你一点甜甜让你今夜很好眠我的小鬼 小鬼捏捏你的小脸让你喜欢整个明天哇啦啦啦啦啦我的宝贝倦的时候有个人陪哎呀呀呀呀呀我的宝贝要你知道你最美哇啦啦啦啦啦我的宝贝孤单时有人把你想念哎呀呀呀呀呀我的宝贝要你知道你最美哇啦啦啦啦啦Yeah…wooYeah…woo…哇啦啦啦啦啦我的宝贝倦的时候有个人陪哎呀呀呀呀呀我的宝贝要你知道你最美要你知道你最美","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"CRSF攻击原理与防范","slug":"article-62","date":"2017-09-08T06:20:44.000Z","updated":"2019-07-02T11:57:10.689Z","comments":true,"path":"2017/09/08/article-62/","link":"","permalink":"http://helianthuswhite.cn/2017/09/08/article-62/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"XSS攻击原理与防范","slug":"article-61","date":"2017-09-08T06:15:58.000Z","updated":"2019-07-02T11:57:10.588Z","comments":true,"path":"2017/09/08/article-61/","link":"","permalink":"http://helianthuswhite.cn/2017/09/08/article-61/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"JS中new操作符的效果","slug":"article-60","date":"2017-09-08T06:06:39.000Z","updated":"2019-07-02T11:57:10.491Z","comments":true,"path":"2017/09/08/article-60/","link":"","permalink":"http://helianthuswhite.cn/2017/09/08/article-60/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"viewport标签详解","slug":"article-59","date":"2017-09-08T06:04:02.000Z","updated":"2019-07-02T11:57:10.221Z","comments":true,"path":"2017/09/08/article-59/","link":"","permalink":"http://helianthuswhite.cn/2017/09/08/article-59/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"a标签设置不跳转","slug":"article-58","date":"2017-09-08T05:59:13.000Z","updated":"2019-07-02T11:57:10.020Z","comments":true,"path":"2017/09/08/article-58/","link":"","permalink":"http://helianthuswhite.cn/2017/09/08/article-58/","excerpt":"又是在面试的时候，被问到这个问题，看起来好像很简单，非常基础的一个问题。大家肯定也都知道有哪些方法，可是一旦细问起来，又有很多细节发现并不清楚，所以下去也好好了解了一下这个问题。","text":"又是在面试的时候，被问到这个问题，看起来好像很简单，非常基础的一个问题。大家肯定也都知道有哪些方法，可是一旦细问起来，又有很多细节发现并不清楚，所以下去也好好了解了一下这个问题。 a标签设置不跳转，常见的方法有三种： 设置href的值为javascript:void(0); 设置href的值为# 添加onclick属性并设置为return false 接下来我们详细解释一下三个设置的原理。 href设置为javascript这里很多人都知道我可以设置为javascript:void(0);或者javascript:;都可以阻止a标签的跳转，那么在javascript的冒号后面可以接其他的内容吗？ 当然是可以的! href属性值是当前链接标签的指向，我们可以使用javascript加冒号开头，来将该标签指向一段javascript代码，这是点击该标签会执行指向的代码，而不是发生跳转行为。 需要知道的是，因为已经通过javascript:开头将标签指向代码了，所以不管冒号后面填写什么标签都不会再进行跳转，而是进入浏览器的js执行环境去。 href设置为将href的属性值设置为#号，其实是给标签设置了默认的锚点，指向当前页面的顶部，所以在点击时会回到当前页面的顶部。但是我们依然可以使用这种方法来阻止标签跳转！ 就是不要只使用#号，可以在#号后面加一个其他的值，这样页面就不会发生跳转。 onclick来阻止跳转使用onclick就是给标签绑定一个点击事件，但是这里只能在等号后面填写return false;，这样的话当前标签的默认事件便不会执行，从而达到阻止标签跳转的目的。 这里需要注意的是，在onclick的等号后面填写方法名称，在方法中返回false的办法是不行的，只能在标签的属性值中填写return false;。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"},{"name":"HTML","slug":"HTML","permalink":"http://helianthuswhite.cn/tags/HTML/"}]},{"title":"img标签的title和alt属性的区别","slug":"article-57","date":"2017-09-08T05:57:26.000Z","updated":"2019-07-02T11:57:09.767Z","comments":true,"path":"2017/09/08/article-57/","link":"","permalink":"http://helianthuswhite.cn/2017/09/08/article-57/","excerpt":"之前一直没有注意过img标签的title属性和alt属性有什么区别，一次面试中被问到这道题，突然懵逼了，这么基础的东西却一直都不知道。","text":"之前一直没有注意过img标签的title属性和alt属性有什么区别，一次面试中被问到这道题，突然懵逼了，这么基础的东西却一直都不知道。 title属性title属性主要用来给图片进行辅助性的提示，当用户鼠标滑过或者置于img标签上时，会出现对应的提示信息。 alt属性alt属性是img标签的必要属性，它用于图片无法显示时的提示，可以让用户知道该未显示的图片是什么。 其长度只有1024个字符，当图片描述超过1024个字符时，可以使用longdesc属性来指向图像描述信息页面。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"HTML","slug":"HTML","permalink":"http://helianthuswhite.cn/tags/HTML/"},{"name":"SEO","slug":"SEO","permalink":"http://helianthuswhite.cn/tags/SEO/"}]},{"title":"【百度笔记】Spring相关注解","slug":"article-56","date":"2017-08-16T07:45:15.000Z","updated":"2019-07-02T11:57:09.630Z","comments":true,"path":"2017/08/16/article-56/","link":"","permalink":"http://helianthuswhite.cn/2017/08/16/article-56/","excerpt":"由于突然转成RD，对于JAVA的很多知识还很欠缺，所以在学习源码的时候，记录一下必要的一些知识点。 本篇主要是记录Spring的一些注解用法。","text":"由于突然转成RD，对于JAVA的很多知识还很欠缺，所以在学习源码的时候，记录一下必要的一些知识点。 本篇主要是记录Spring的一些注解用法。 @Controller@Controller注解将一个类定义为Controller，之后可以使用Controller的一些方法。 @ResponseBody@ResponseBody注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。 @RestController@RestController注解相当于是@Controller和@ResponseBody合在一起使用。 @RequestMapping@RequestMapping注解用于匹配请求的URL。 @AutoWired@AutoWired注解用于Spring自动装配注解的bean。 @ApiOperation@ApiOperation注解为Swagger项目中API声明的相关注解，Swagger项目为生成Restful风格的接口文档项目。 @PathVariable@PathVariable注解用于将URL中参数绑定到控制器处理方法的入参中。 @QueryParam@QueryParam注解用于获取GET请求中的查询查询参数。 @JsonProperty@JsonProperty用于将一个属性的名称序列化成另一个名称。 @Value@Value注解用于从配置文件读取值并赋给变量。 @Qualifier@Qualifier注解指定自动注入的Bean的名称。 @ComponentScan@ComponentScan注解\b使项目运行时会自动去扫描指定包下面的\b@Component、@Controller、@Service等类并注册为bean。 @Repository@Repository用于将DAO层的类标识为Spring Bean。 @Deprecated@Deprecated注解告诉已经调用该方法的调用者该方法不是最佳实践。 @Retention@Retention注解标注了声明的注解会被保留到程序执行的哪个阶段。 @Target@Target用于指定注解的使用范围。 @Async@Async注解标识异步执行的方法，将开启另一线程。","categories":[{"name":"百度笔记","slug":"百度笔记","permalink":"http://helianthuswhite.cn/categories/百度笔记/"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://helianthuswhite.cn/tags/JavaWeb/"},{"name":"Spring","slug":"Spring","permalink":"http://helianthuswhite.cn/tags/Spring/"},{"name":"Java","slug":"Java","permalink":"http://helianthuswhite.cn/tags/Java/"},{"name":"百度笔记","slug":"百度笔记","permalink":"http://helianthuswhite.cn/tags/百度笔记/"}]},{"title":"判断对象是否拥有某个属性","slug":"article-55","date":"2017-07-24T03:23:48.000Z","updated":"2019-07-02T11:57:09.403Z","comments":true,"path":"2017/07/24/article-55/","link":"","permalink":"http://helianthuswhite.cn/2017/07/24/article-55/","excerpt":"判断对象中是否有某个属性，有两种比较常用的方法，一种是通过关键字 in 来进行判断，另一种是通过对象的 hasOwnProperty()方法进行判断。","text":"判断对象中是否有某个属性，有两种比较常用的方法，一种是通过关键字 in 来进行判断，另一种是通过对象的 hasOwnProperty()方法进行判断。 123456789var a = &#123; b: 1, c: function() &#123;&#125;&#125;;console.log(\"b\" in a); //trueconsole.log(\"toString\" in a); //trueconsole.log(a.hasOwnProperty(\"c\")); //trueconsole.log(a.hasOwnProperty(\"toString\")); //false 需要注意的是使用关键字 in 不仅可以判断对象自身的属性，也可以判断对象继承的属性\b，而hasOwnProperty方法的\b话只能判断对象自身的属性是否存在，对于继承的属性则会显示false。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"}]},{"title":"点击空白关闭弹窗","slug":"article-54","date":"2017-07-21T08:11:03.000Z","updated":"2019-07-02T11:57:09.244Z","comments":true,"path":"2017/07/21/article-54/","link":"","permalink":"http://helianthuswhite.cn/2017/07/21/article-54/","excerpt":"类似于模态框的操作，我们常常会用到这样的操作，除了点击弹出框的关闭按钮，我们还可以通过点击页面中非弹框的部分来关闭弹出框，这里给出两种思路与实现方法。","text":"类似于模态框的操作，我们常常会用到这样的操作，除了点击弹出框的关闭按钮，我们还可以通过点击页面中非弹框的部分来关闭弹出框，这里给出两种思路与实现方法。 判断点击是否在目标区域判断点击是否在目标区域的条件主要有两点： 判断点击事件的对象不是目标区域对象 判断点击时间的对象不是目标区域的子对象 下面是该方法的js代码实现：1234567dialog.click = funciton(e) &#123; var target = document.getElementById('target'); if (!target.isEqualNode(e.target) &amp;&amp; !target.contains(e.target)) &#123; // your close dialog code this.close(); &#125;&#125; 通过添加一层使点击该层时处理事件这个方法稍微麻烦一些但是也是弹窗的一种常见处理方式，主要是在弹窗与页面之间加一个背景层，可以选择透明或者显示灰色等，然后点击\b该背景层的时候关闭弹窗即可。 下面是该方法的js代码实现：1234document.getElementById('background').click = function(e) &#123; //your close dialog code dialog.close();&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"}]},{"title":"想把我唱给你听","slug":"music-14","date":"2017-05-02T12:23:08.000Z","updated":"2019-07-02T11:57:12.891Z","comments":true,"path":"2017/05/02/music-14/","link":"","permalink":"http://helianthuswhite.cn/2017/05/02/music-14/","excerpt":"想把我唱给你听，趁现在年少如花","text":"想把我唱给你听，趁现在年少如花 想把我唱给你听 - 老狼/王婧作曲 : 小柯想把我唱给你听趁现在年少如花花儿尽情地开吧装点你的岁月我的枝桠谁能够代替你呢趁年轻尽情的爱吧最最亲爱的人啊路途遥远我们在一起吧我把我唱给你听把你纯真无邪的笑容给我吧我们应该有快乐的幸福的晴朗的时光我把我唱给你听用我炙热的感情感动你好吗岁月是值得怀念的留念的害羞的红色脸庞谁能够代替你呢趁年轻尽情的爱吧最最亲爱的人啊路途遥远我们在一起吧想把我唱给你听趁现在年少如花花儿尽情地开吧装点你的岁月我的枝桠谁能够代替你呢趁年轻尽情的爱吧最最亲爱的人啊路途遥远我们在一起吧我把我唱给你听把你纯真无邪的笑容给我吧我们应该有快乐的幸福的晴朗的时光我把我唱给你听用我炙热的感情感动你好吗岁月是值得怀念的留念的害羞的红色脸庞我们应该有快乐的幸福的晴朗的时光我把我唱给你听用我炙热的感情感动你好吗岁月是值得怀念的留念的害羞的红色脸庞谁能够代替你呢趁年轻尽情的爱吧最最亲爱的人啊路途遥远我们在一起吧","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"关键词","slug":"music-13","date":"2017-05-02T12:22:58.000Z","updated":"2019-07-02T11:57:12.781Z","comments":true,"path":"2017/05/02/music-13/","link":"","permalink":"http://helianthuswhite.cn/2017/05/02/music-13/","excerpt":"有一种踏实，是你心中有我名字","text":"有一种踏实，是你心中有我名字 关键词 - 林俊杰作曲 : 林俊杰作词 : 林怡凤好好爱自己 就有人会爱你这乐观的说词幸福的样子 我感觉好真实找不到形容词沉默在掩饰 快泛滥的激情只剩下语助词有一种踏实 当你口中喊我名字落叶的位置 谱出一首诗时间在消逝 我们的故事开始这是第一次让我见识爱情 可以慷慨又自私你是我的关键词我不太确定 爱最好的方式是动词或名词很想告诉你 最赤裸的感情却又忘词聚散总有时 而哭笑也有时我不怕潜台词有一种踏实 是你心中有我名字落叶的位置 谱出一首诗时间在消逝 我们的故事开始这是第一次让我见识爱情 可以慷慨又自私你是我的关键词你藏在歌词代表的意思是专有名词落叶的位置谱出一首诗我们的故事才正要开始这是第一次爱一个人爱得如此慷慨又自私你是我的关键词","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"残酷月光","slug":"music-12","date":"2017-04-17T14:01:24.000Z","updated":"2019-07-02T11:57:12.670Z","comments":true,"path":"2017/04/17/music-12/","link":"","permalink":"http://helianthuswhite.cn/2017/04/17/music-12/","excerpt":"如果不够悲伤 就无法飞翔","text":"如果不够悲伤 就无法飞翔 残酷月光（Cover：林宥嘉）让我爱你 然后把我抛弃我只要出发 不要目的我会一直想你 忘记了呼吸孤独到底让我昏迷如果恨你 就能不忘记你所有的面目 我都不抗拒如果不够悲伤 就无法飞翔可没有梦想 何必远方我一直都在流浪可我 不曾见过海洋我以为的遗忘原来躺在你手上我努力微笑坚强寂寞筑成一道围墙也敌不过夜里 最温柔的月光我一直都在流浪可我 不曾见过海洋我以为的遗忘原来躺在你手上我努力微笑坚强寂寞筑成一道围墙也敌不过夜里 最温柔的月光我会一直想你 忘记了呼吸孤独到底让我昏迷","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"ES6中export和export default的区别","slug":"article-53","date":"2017-04-16T06:42:42.000Z","updated":"2019-07-02T11:57:08.983Z","comments":true,"path":"2017/04/16/article-53/","link":"","permalink":"http://helianthuswhite.cn/2017/04/16/article-53/","excerpt":"ES6的import以及export提出了一种通用的模块加载方案，export主要用于将函数、变量、模块等进行到处，而import则是用于将外部的模块导入到现有代码中。 但是有时候我们发现别人的代码使用export进行导出，有时候又是使用export default进行导出，它们之间的区别是什么呢？","text":"ES6的import以及export提出了一种通用的模块加载方案，export主要用于将函数、变量、模块等进行到处，而import则是用于将外部的模块导入到现有代码中。 但是有时候我们发现别人的代码使用export进行导出，有时候又是使用export default进行导出，它们之间的区别是什么呢？ exportexport的使用方法如下，也可以直接在变量声明前面使用export来导出该变量。在其他模块中进行import时需要使用大括号来导入多个变量或者方法。 1234567//a.jsvar name = 'jack';function getName() &#123; return this.name;&#125;export &#123;name, getName&#125;; 12//b.jsimport &#123;name, getName&#125; from 'a.js'; export defaultexport default导出时用于将模块内部变量以default默认变量的形式导出，并且一个模块中只能存在一个default，因此在使用import导入时也不需要使用大括号。 123//a.jsvar name = 'jack';export default name; 12//b.jsimport name from 'a.js'; 为什么要有export default从上面的例子可以知道，当使用export导出的模块变量，b.js使用import命令的时候，用户需要知道a.js所暴露出的变量标识符，否则无法加载。如果使用export default命令，为模块指定默认输出，这样就不需要知道所要加载模块的变量名。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"ES6","slug":"ES6","permalink":"http://helianthuswhite.cn/tags/ES6/"}]},{"title":"oninput、onchange和onpropertychange的区别","slug":"article-52","date":"2017-04-16T06:42:38.000Z","updated":"2019-07-02T11:57:08.901Z","comments":true,"path":"2017/04/16/article-52/","link":"","permalink":"http://helianthuswhite.cn/2017/04/16/article-52/","excerpt":"前段时间写一个WEBAPP时遇到了一个问题，就是在给Input输入框绑定oninput事件时，该事件在IOS手机浏览器里无效，后来查到网上的解决办法同时给Input绑定了oninput和onpropertychange事件才解决了该问题。 所以这里总结一下oninput、onchange和onpropertychange这三个属性的区别。","text":"前段时间写一个WEBAPP时遇到了一个问题，就是在给Input输入框绑定oninput事件时，该事件在IOS手机浏览器里无效，后来查到网上的解决办法同时给Input绑定了oninput和onpropertychange事件才解决了该问题。 所以这里总结一下oninput、onchange和onpropertychange这三个属性的区别。 oninputoninput事件触发在域的文本内容发送改变时，添加或者删除字符都会触发该事件。但是通过js来动态的改版value值时不会触发该事件。但是IE9之前版本并不支持该事件。 onchangeonchange事件触发在域的文本内容发送改变，并且失去焦点之后才会触发。 onpropertychangeonpropertychange事件触发的情况跟oninput类似，不同的是通过js改变value的值时也会触发该事件。onpropertychange事件是IE9之前版本的特有事件。用来解决IE的兼容性问题。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"},{"name":"HTML5","slug":"HTML5","permalink":"http://helianthuswhite.cn/tags/HTML5/"}]},{"title":"vue-weather程序实现遇到的问题","slug":"article-51","date":"2017-04-16T06:42:35.000Z","updated":"2019-07-02T11:57:08.758Z","comments":true,"path":"2017/04/16/article-51/","link":"","permalink":"http://helianthuswhite.cn/2017/04/16/article-51/","excerpt":"之前在知乎上投了一下百度云计算的一个前端开发招聘，在通过简历筛选之后对方给出了一道笔试题，做一个关于天气的webapp或者是一个异步加载的地区选择，因为想练习一下学习的vue就做了一个webapp，四天时间实现了大部分要求的功能吧。 整个界面是仿制IOS的天气APP，数据来源是使用的API（本来要求自己爬取的），其它方面使用了canvas、es6、vue-resource、vue-router、better-scroller等，整个项目使用vue-cli + webpack进行搭建。","text":"之前在知乎上投了一下百度云计算的一个前端开发招聘，在通过简历筛选之后对方给出了一道笔试题，做一个关于天气的webapp或者是一个异步加载的地区选择，因为想练习一下学习的vue就做了一个webapp，四天时间实现了大部分要求的功能吧。 整个界面是仿制IOS的天气APP，数据来源是使用的API（本来要求自己爬取的），其它方面使用了canvas、es6、vue-resource、vue-router、better-scroller等，整个项目使用vue-cli + webpack进行搭建。 ES6中export和export default的区别 JS根据数组对象的属性名进行排序 解决安卓和IOS不会触发onkeyup事件 vue组件之间数据传递 如何在vue中获取dom节点 如何在远程服务器挂起node程序 主要遇到的问题就是这些。提交之后一周都没有消息，本来以为已经挂了，但还是发了封邮件问了一下，之后HR就打电话来约了面试时间。 项目演示网站：http://123.207.178.23:8080/ 代码仓库：https://github.com/helianthuswhite/vue-weather","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"canvas","slug":"canvas","permalink":"http://helianthuswhite.cn/tags/canvas/"},{"name":"HTML5","slug":"HTML5","permalink":"http://helianthuswhite.cn/tags/HTML5/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"},{"name":"ES6","slug":"ES6","permalink":"http://helianthuswhite.cn/tags/ES6/"},{"name":"VUE","slug":"VUE","permalink":"http://helianthuswhite.cn/tags/VUE/"}]},{"title":"a标签的CSS伪类添加顺序","slug":"article-50","date":"2017-04-16T06:42:30.000Z","updated":"2019-07-02T11:57:08.610Z","comments":true,"path":"2017/04/16/article-50/","link":"","permalink":"http://helianthuswhite.cn/2017/04/16/article-50/","excerpt":"a标签我们通常会通过它的四个伪类添加样式来达到一些交互效果，但是有时候我们会发现四个伪类不按照一定的顺序书写时会导致某个交互的样式不显示或者只显示一次。这是因为伪类顺序不正确的原因导致了后面的样式始终覆盖了前面的样式。因此我们需要知道a标签伪类添加样式的正确顺序。","text":"a标签我们通常会通过它的四个伪类添加样式来达到一些交互效果，但是有时候我们会发现四个伪类不按照一定的顺序书写时会导致某个交互的样式不显示或者只显示一次。这是因为伪类顺序不正确的原因导致了后面的样式始终覆盖了前面的样式。因此我们需要知道a标签伪类添加样式的正确顺序。 四个伪类的作用 :link —— a标签还未被访问时的样式:visited —— a标签已经被访问后的样式:hover —— 鼠标指针移到a标签上时的样式:active —— a标签被点击时的样式 书写顺序这四个伪类的书写顺序即为 —— LVHA。 前两种状态为常态，即不是在触发时出现的状态，后面两个为即时态，即触发时才会出现的状态。因此要用后两个伪类的样式覆盖前两个，这样才能够在触发时显示出后两个的样式。 由于访问后处于未访问之后，所以:visited伪类要放在:link之后。而鼠标点击之前，会先把指针移动到标签上，先触发:hover样式，所以:active伪类放在:hover之后。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"},{"name":"CSS3","slug":"CSS3","permalink":"http://helianthuswhite.cn/tags/CSS3/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"},{"name":"HTML","slug":"HTML","permalink":"http://helianthuswhite.cn/tags/HTML/"}]},{"title":"【2017春招】百度口碑前端","slug":"article-49","date":"2017-04-16T06:42:24.000Z","updated":"2019-07-02T11:57:08.235Z","comments":true,"path":"2017/04/16/article-49/","link":"","permalink":"http://helianthuswhite.cn/2017/04/16/article-49/","excerpt":"下午面了一下百度地图的前端，晚上突然接到面试电话让我一激动——二面来的这么快？结果面完之后发现是我想多了，这次是百度的另一个部门。这次面试主要问的都是前端的基础知识，但是问的挺深入的，我问了一下面试官用不用什么框架，面试官告诉我框架也都用啊，但是基础很重要。看来不同部门的要求果然差别还是蛮大的。","text":"下午面了一下百度地图的前端，晚上突然接到面试电话让我一激动——二面来的这么快？结果面完之后发现是我想多了，这次是百度的另一个部门。这次面试主要问的都是前端的基础知识，但是问的挺深入的，我问了一下面试官用不用什么框架，面试官告诉我框架也都用啊，但是基础很重要。看来不同部门的要求果然差别还是蛮大的。 标签中的title和alt有什么区别 a标签如何打开一个新的页面 a标签如何设置不跳转 定位方式一共有几种 fixed定位是相对于哪里的 哪个标签可以改变可视区域大小 JavaScript的基本数据类型有哪些 JavaScript的继承如何实现 JavaScript的原型和原型链是什么 new 操作符做了什么事 JavaScript事件模型有哪些 跨域的解决方式 前端性能优化的方式","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"},{"name":"HTML","slug":"HTML","permalink":"http://helianthuswhite.cn/tags/HTML/"},{"name":"SEO","slug":"SEO","permalink":"http://helianthuswhite.cn/tags/SEO/"}]},{"title":"【2017春招】百度地图前端","slug":"article-48","date":"2017-04-16T06:42:20.000Z","updated":"2019-07-02T11:57:07.974Z","comments":true,"path":"2017/04/16/article-48/","link":"","permalink":"http://helianthuswhite.cn/2017/04/16/article-48/","excerpt":"之前内推了一下百度EFE团队，所以接到面试电话时贼紧张，听说EFE很难进。面试官说他是百度地图的，我是吃了一惊，什么时候投百度地图了？面完之后我搜寻了一下，发现是之前在大街网上投的。面试时间不长，问的问题也不算难，期待一下二面。","text":"之前内推了一下百度EFE团队，所以接到面试电话时贼紧张，听说EFE很难进。面试官说他是百度地图的，我是吃了一惊，什么时候投百度地图了？面完之后我搜寻了一下，发现是之前在大街网上投的。面试时间不长，问的问题也不算难，期待一下二面。 什么是盒模型 CSS3的2D旋转如何实现 CSS3的动画如何实现 CSS3的过渡怎么用 Flex布局怎么用 垂直居中怎么实现 vue的组件间通信怎么实现 Node的服务端接收怎么实现 express和koa框架有什么区别 懒加载和预加载有什么区别 前端性能优化有哪些 原生的AJAX如何实现 捕获事件和冒泡事件是怎么回事 有没有听说过事件委托 什么是点透事件","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"},{"name":"CSS3","slug":"CSS3","permalink":"http://helianthuswhite.cn/tags/CSS3/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"},{"name":"HTML","slug":"HTML","permalink":"http://helianthuswhite.cn/tags/HTML/"},{"name":"SEO","slug":"SEO","permalink":"http://helianthuswhite.cn/tags/SEO/"},{"name":"ES6","slug":"ES6","permalink":"http://helianthuswhite.cn/tags/ES6/"},{"name":"VUE","slug":"VUE","permalink":"http://helianthuswhite.cn/tags/VUE/"},{"name":"Node","slug":"Node","permalink":"http://helianthuswhite.cn/tags/Node/"}]},{"title":"AJAX实现异步加载","slug":"article-47","date":"2017-04-16T06:42:14.000Z","updated":"2019-07-02T11:57:07.819Z","comments":true,"path":"2017/04/16/article-47/","link":"","permalink":"http://helianthuswhite.cn/2017/04/16/article-47/","excerpt":"AJAX是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，AJAX可以使网页实现异步更新。","text":"AJAX是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，AJAX可以使网页实现异步更新。 原生AJAX的实现AJAX的实现是依靠XMLHttpRequest对象来完成的，然后通过该对象实例的open()和send()方法完成AJAX请求。 方法 描述 open(method,url,async) 规定请求的类型、URL 以及是否异步处理请求。method：请求的类型；GET 或 POST，url：文件在服务器上的位置，async：true（异步）或 false（同步） send(string) 将请求发送到服务器。string：仅用于 POST 请求 当采用异步方式发送请求时，为了能够在请求正确时执行后续方法，需要使用实例的onreadystatechange事件来监听返回的状态码。 属性 描述 onreadystatechange 存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。 readyState 存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。0: 请求未初始化；1: 服务器连接已建立；2: 请求已接收；3: 请求处理中；4: 请求已完成，且响应已就绪 status 200: “OK” ；404: 未找到页面 接受服务响应可以使用XMLHttpRequest对象的responseText或responseXML属性。其中responseText属性是以字符串的形式接受数据，而responseXML是以XML的形式接收数据。 12345678910var xmlhttp = new XMLHttpRequest();xmlhttp.onreadystatechange=function() &#123; if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200) &#123; document.getElementById(\"myDiv\").innerHTML=xmlhttp.responseText; &#125; &#125;xmlhttp.open(\"GET\",\"test1.txt\",true);xmlhttp.send(); JQuery的ajax使用JQuery封装的ajax方法通过将配置传入方法中来完成整个请求。 参数 描述 async 布尔值，表示请求是否异步处理。默认是 true。 beforeSend(xhr) 发送请求前运行的函数。 cache 布尔值，表示浏览器是否缓存被请求页面。默认是 true。 complete(xhr,status) 请求完成时运行的函数（在请求成功或失败之后均调用，即在 success 和 error 函数之后）。 contentType 发送数据到服务器时所使用的内容类型。默认是：”application/x-www-form-urlencoded”。 context 为所有 AJAX 相关的回调函数规定 “this” 值。 data 规定要发送到服务器的数据。 dataFilter(data,type) 用于处理 XMLHttpRequest 原始响应数据的函数。 dataType 预期的服务器响应的数据类型。 error(xhr,status,error) 如果请求失败要运行的函数。 global 布尔值，规定是否为请求触发全局 AJAX 事件处理程序。默认是 true。 ifModified 布尔值，规定是否仅在最后一次请求以来响应发生改变时才请求成功。默认是 false。 jsonp 在一个 jsonp 中重写回调函数的字符串。 jsonpCallback 在一个 jsonp 中规定回调函数的名称。 password 规定在 HTTP 访问认证请求中使用的密码。 processData 布尔值，规定通过请求发送的数据是否转换为查询字符串。默认是 true。 scriptCharset 规定请求的字符集。 success(result,status,xhr) 当请求成功时运行的函数。 timeout 设置本地的请求超时时间（以毫秒计）。 traditional 布尔值，规定是否使用参数序列化的传统样式。 type 规定请求的类型（GET 或 POST）。 url 规定发送请求的 URL。默认是当前页面。 username 规定在 HTTP 访问认证请求中使用的用户名。 xhr 用于创建 XMLHttpRequest 对象的函数。 123456789101112131415161718192021222324252627$.ajax(&#123; url:'/comm/test1.php', type:'POST', //GET async:true, //或false,是否异步 data:&#123; name:'yang',age:25 &#125;, timeout:5000, //超时时间 dataType:'json', //返回的数据格式：json/xml/html/script/jsonp/text beforeSend:function(xhr)&#123; console.log(xhr) console.log('发送前') &#125;, success:function(data,textStatus,jqXHR)&#123; console.log(data) console.log(textStatus) console.log(jqXHR) &#125;, error:function(xhr,textStatus)&#123; console.log('错误') console.log(xhr) console.log(textStatus) &#125;, complete:function()&#123; console.log('结束') &#125;&#125;);","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"}]},{"title":"JavaScript的事件模型","slug":"article-46","date":"2017-04-16T06:42:06.000Z","updated":"2019-07-02T11:57:07.583Z","comments":true,"path":"2017/04/16/article-46/","link":"","permalink":"http://helianthuswhite.cn/2017/04/16/article-46/","excerpt":"JavaScript的事件模型，可以分为两类，分别是DOM0级事件和DOM2级事件；也可以分成三类，分别是原始事件模型、捕获事件模型和冒泡事件模型。","text":"JavaScript的事件模型，可以分为两类，分别是DOM0级事件和DOM2级事件；也可以分成三类，分别是原始事件模型、捕获事件模型和冒泡事件模型。 DOM0级事件DOM0事件也是原始事件模型，这种事件是直接绑定在dom对象上面的事件，例如onclick事件等。给这种事件注册方法时，如果注册两种方法，则后一种方法会覆盖前一种，所以解除事件时我们可以直接给事件注册为null即可。 12345678var click = document.getElementById('click');click.onclick = function()&#123; alert('you click the first function');&#125;;click.onclick = function()&#123; alert('you click the second function')&#125;//you click the second function DOM2级事件DOM2级事件即包括了捕获事件模型和冒泡事件模式。捕获事件模型是事件从document开始向下传递，一直到目标元素；冒泡事件与之相反，是从目标元素开始向上冒泡，一直传递到document。下路描述了两个事件模型的过程。 DOM2级事件的注册和解除在DOM2级中使用addEventListener和removeEventListener来注册和解除事件。这种函数较之之前的方法好处是一个dom对象可以注册多个相同类型的事件，不会发生事件的覆盖，会依次的执行各个事件函数。 addEventListenr的第一个参数是事件名称，第二个参数是注册的方法，第三个参数代表捕获还是冒泡，true代表捕获事件，false代表冒泡事件。 有时我们不想让目标元素的事件冒泡到上级，我们可以对目标元素的事件设置阻止冒泡的方法，即使用event.stopPropagation方法来阻止事件冒泡。 12345678910var clickInner = document.getElementById('inner');var clickOuter = document.getElementById('outer');clickInner.addEventListener('click',function(event)&#123; alert('inner show'); event.stopPropagation();&#125;,false);clickOuter.addEventListener('click',function()&#123; alert('outer show');&#125;,false);//inner show","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"}]},{"title":"CSS引入的四种方式","slug":"article-45","date":"2017-04-16T06:41:59.000Z","updated":"2019-07-02T11:57:07.504Z","comments":true,"path":"2017/04/16/article-45/","link":"","permalink":"http://helianthuswhite.cn/2017/04/16/article-45/","excerpt":"在HTML中引入CSS样式有四种方式，分别是行内式、嵌入式、链接式和导入式。","text":"在HTML中引入CSS样式有四种方式，分别是行内式、嵌入式、链接式和导入式。 行内式在元素的标签的style属性中设定CSS样式，这种写法不利于维护，适用于给某个单独标签设定其独有的样式。 1&lt;div style=\"background: red;\"&gt;&lt;/div&gt; 嵌入式这种方式是通过style标签将CSS样式整体写在html中，当网站为单一页面且样式不多时可以使用该方法。 12345&lt;style type=\"text/css\"&gt; body &#123; margin: 0 auto; &#125;&lt;/style&gt; 链接式链接式的CSS样式引入是最常见和常用的CSS样式引入方法，通过link标签将外部的CSS引入到HTML文件中。 1&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css/main.css\"&gt; 导入式这种写法通过@import关键字将外部的CSS文件导入到CSS样式当中。 123&lt;style type=\"text/css\"&gt; @import 'css/main.css';&lt;/style&gt; 链接式和导入式区别这里说链接式和导入式的区别，主要是指link和import的区别。 link属于html的标签，除了加载CSS之外还可以定义RSS，定义rel连接属性等作用，而@import只能用于加载CSS。 另外，link引入的CSS会在页面加载的时候同时加载，而@import导入的CSS则是等页面加载完成之后再加载，所以当页面比较复杂时可能会出现先是无样式的HTML，闪烁一下后才出现CSS样式。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"}]},{"title":"雅虎军规：网站性能优化","slug":"article-44","date":"2017-04-16T06:41:52.000Z","updated":"2019-07-02T11:57:07.232Z","comments":true,"path":"2017/04/16/article-44/","link":"","permalink":"http://helianthuswhite.cn/2017/04/16/article-44/","excerpt":"提到网站性能优化，最出名的莫过于雅虎军规，这里将其35条规则列出。","text":"提到网站性能优化，最出名的莫过于雅虎军规，这里将其35条规则列出。 目录 尽量减少HTTP请求数 使用CDN（Content Delivery Network） 添上Expires或者Cache-Control HTTP头 Gzip组件 把样式表放在顶部 把脚本放在底部 避免使用CSS表达式 把JavaScript和CSS放到外面 减少DNS查找 压缩JavaScript和CSS 避免重定向 去除重复脚本 配置ETags 让Ajax可缓存 尽早清空缓冲区 对Ajax用GET请求 延迟加载组件 预加载组件 减少DOM元素的数量 跨域分离组件 尽量少用iframe 杜绝404 给Cookie减肥 把组件放在不含cookie的域下 尽量减少DOM访问 用智能的事件处理器 选择 舍弃@import 避免使用滤镜 优化图片 优化CSS Sprite 不要用HTML缩放图片 用小的可缓存的favicon.ico 保证所有组件都小于25K 把组件打包到一个复合文档里 避免图片src属性为空 尽量减少HTTP请求数减少页面组件数的一种方式是简化页面设计。但对于复杂页面来说，可以通过合并文件来减少HTTP请求数。 CSS Sprites 是减少图片请求数量的首选方式。把背景图片都整合到一张图片中，然后用CSS的 background-image 和 background-position 属性来定位要显示的部分。 行内图片（Base64编码）是用 data: URL模式 来把图片嵌入页面。这样会增加HTML文件的大小，把行内图片放在（缓存的）样式表中是个好办法，而且成功避免了页面变“重”。但目前主流浏览器并不能很好地支持行内图片。 使用CDN（Content Delivery Network）内容分发网络（CDN）是一组分散在不同地理位置的web服务器，用来给用户更高效地发送内容。典型地，选择用来发送内容的服务器是基于网络距离的衡量标准的。例如：选跳数（hop）最少的或者响应时间最快的服务器。 添上Expires或者Cache-Control HTTP头这条规则有两个方面： 对于静态组件：通过设置一个遥远的将来时间作为 Expires 来实现永不失效 多余动态组件：用合适的 Cache-Control HTTP头来让浏览器进行条件性的请求 浏览器（和代理）用缓存来减少HTTP请求的数目和大小，让页面能够更快加载。web服务器通过有效期HTTP响应头来告诉客户端，页面的各个组件应该被缓存多久。 Gzip组件从HTTP/1.1开始，web客户端就有了支持压缩的Accept-Encoding HTTP请求头。Accept-Encoding: gzip, deflate如果web服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。web服务器通过Content-Encoding相应头来通知客户端。Content-Encoding: gzip 把样式表放在顶部把样式表放到文档的HEAD部分能让页面看起来加载地更快。这是因为把样式表放在head里能让页面逐步渲染。 在很多浏览器（包括IE）中，把样式表放在HTML文档底部都会阻止页面逐渐渲染。这些浏览器阻塞渲染过程，以避免因为样式变动而重绘页面元素，用户这时就只能盯着空白页面。 把脚本放在底部脚本会阻塞并行下载， HTTP/1.1官方文档 建议浏览器每个主机名下并行下载的组件数不要超过两个，如果图片来自多个主机名，并行下载的数量就可以超过两个。如果脚本正在下载，浏览器就不开始任何其它下载任务，即使是在不同主机名下的。 避免使用CSS表达式用CSS表达式动态设置CSS属性，是一种强大又危险的方式。表达式最大的问题是它们经常被重复计算，比我们想象的次数还要多。不仅仅是页面渲染和调整大小的时候，在页面被滚动，甚至用户在页面上移动鼠标时都会重新计算表达式。给CSS表达式添加一个计数器就可以追踪它重新计算的时间和频率，而在页面上动动鼠标就可以引发10000多次重新计算。 把JavaScript和CSS放到外面实际上，用外部文件可以让页面更快，因为JavaScript和CSS文件会被缓存在浏览器。HTML文档中的行内JavaScript和CSS在每次请求该HTML文档的时候都会重新下载。这样做减少了所需的HTTP请求数，但增加了HTML文档的大小。另一方面，如果JavaScript和CSS在外部文件中，并且已经被浏览器缓存起来了，那么我们就成功地把HTML文档变小了，而且还没有增加HTTP请求数。 减少DNS查找DNS查找被缓存起来更高效，由用户的ISP（网络服务提供商）或者本地网络存在一个特殊的缓存服务器上，但还可以缓存在个人用户的计算机上。DNS信息被保存在操作系统的DNS cache(微软Windows上的”DNS客户端服务”)里。大多数浏览器有独立于操作系统的自己的cache。只要浏览器在自己的cache里还保留着这条记录，它就不会向操作系统查询DNS。 IE默认缓存DNS查找30分钟，写在 DnsCacheTimeout 注册表设置中。Firefox缓存1分钟，可以用 network.dnsCacheExpiration 配置项设置。(Fasterfox把缓存时间改成了1小时 P.S. Fasterfox是FF的一个提速插件) 如果客户端的DNS cache是空的（包括浏览器的和操作系统的），DNS查找数等于页面上不同的主机名数，包括页面URL，图片，脚本文件，样式表，Flash对象等等组件中的主机名，减少不同的主机名就可以减少DNS查找。 减少不同主机名的数量同时也减少了页面能够并行下载的组件数量，避免DNS查找削减了响应时间，而减少并行下载数量却增加了响应时间。我的原则是把组件分散在2到4个主机名下，这是同时减少DNS查找和允许高并发下载的折中方案。 压缩JavaScript和CSS压缩具体来说就是从代码中去除不必要的字符以减少大小，从而提升加载速度。代码最小化就是去掉所有注释和不必要的空白字符（空格，换行和tab）。在JavaScript中这样做能够提高响应性能，因为要下载的文件变小了。两个最常用的JavaScript代码压缩工具是 JSMin 和 YUI Compressor ，YUI compressor还可以压缩CSS。 避免重定向重定向用301和302状态码，下面是一个有301状态码的HTTP头： 123HTTP/1.1 301 Moved Permanently Location: http://example.com/newuri Content-Type: text/html 浏览器会自动跳转到 Location 域指明的URL。重定向需要的所有信息都在HTTP头部，而响应体一般是空的。其实额外的HTTP头，比如 Expires 和 Cache-Control 也表示重定向。除此之外还有别的跳转方式：refresh元标签和JavaScript，但如果你必须得做重定向，最好用标准的3xxHTTP状态码，主要是为了让返回按钮能正常使用。 牢记重定向会拖慢用户体验，在用户和HTML文档之间插入重定向会延迟页面上的所有东西，页面无法渲染，组件也无法开始下载，直到HTML文档被送达浏览器。 有一种常见的极其浪费资源的重定向，而且web开发人员一般都意识不到这一点，就是URL尾部缺少一个斜线的时候。例如，跳转到 http://astrology.yahoo.com/astrology 会返回一个重定向到 http://astrology.yahoo.com/astrology/ 的301响应（注意添在尾部的斜线）。在Apache中可以用 Alias ， mod_rewrite 或者 DirectorySlash 指令来取消不必要的重定向。 重定向最常见的用途是把旧站点连接到新的站点，还可以连接同一站点的不同部分，针对用户的不同情况（浏览器类型，用户帐号类型等等）做一些处理。用重定向来连接两个网站是最简单的，只需要少量的额外代码。虽然在这些时候使用重定向减少了开发人员的开发复杂度，但降低了用户体验。一种替代方案是用 Alias 和 mod_rewrite ，前提是两个代码路径都在相同的服务器上。如果是因为域名变化而使用了重定向，就可以创建一条CNAME（创建一个指向另一个域名的DNS记录作为别名）结合 Alias 或者 mod_rewrite 指令。 去除重复脚本页面含有重复的脚本文件会影响性能，这可能和你想象的不一样。在对美国前10大web站点的评审中，发现只有2个站点含有重复脚本。两个主要原因增加了在单一页面中出现重复脚本的几率：团队大小和脚本数量。在这种情况下，重复脚本会创建不必要的HTTP请求，执行无用的JavaScript代码，而影响页面性能。 配置ETags实体标签（ETags），是服务器和浏览器用来决定浏览器缓存中组件与源服务器中的组件是否匹配的一种机制（“实体”也就是组件：图片，脚本，样式表等等）。添加ETags可以提供一种实体验证机制，比最后修改日期更加灵活。一个ETag是一个字符串，作为一个组件某一具体版本的唯一标识符。唯一的格式约束是字符串必须用引号括起来，源服务器用相应头中的 ETag 来指定组件的ETag： 1234HTTP/1.1 200 OK Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT ETag: &quot;10c24bc-4ab-457e1c1f&quot; Content-Length: 12195 然后，如果浏览器必须验证一个组件，它用 If-None-Match 请求头来把ETag传回源服务器。如果ETags匹配成功，会返回一个304状态码，这样就减少了12195个字节的响应体。 12345GET /i/yahoo.gif HTTP/1.1 Host: us.yimg.com If-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMT If-None-Match: &quot;10c24bc-4ab-457e1c1f&quot; HTTP/1.1 304 Not Modified ETags存在的问题是它们是由特定服务器构造的，所以如果浏览器从一个服务器获取最初的组件，然后想验证另一个服务器上的相同组件，ETags是无法匹配成功的，而用一群服务器处理请求在web站点中又非常普遍。 让Ajax可缓存Ajax的一个好处是可以给用户提供即时反馈，因为它能够从后台服务器异步请求信息。然而，用了Ajax就无法保证用户在等待异步JavaScript和XML响应返回期间不会非常无聊。在很多应用程序中，用户能够一直等待取决于如何使用Ajax。例如，在基于web的电子邮件客户端中，用户为了寻找符合他们搜索标准的邮件消息，将会保持对Ajax请求返回结果的关注。重要的是，要记得“异步”并不意味着“即时”。 我们一起看看例子，一个Web 2.0的电子邮件客户端用了Ajax来下载用户的通讯录，以便实现自动完成功能。如果用户从上一次使用之后再没有修改过她的通讯录，而且Ajax响应是可缓存的，有尚未过期的Expires或者Cache-Control HTTP头，那么之前的通讯录就可以从缓存中读出。必须通知浏览器，应该继续使用之前缓存的通讯录响应，还是去请求一个新的。可以通过给通讯录的Ajax URL里添加一个表明用户通讯录最后修改时间的时间戳来实现，例如 &amp;t=1190241612 。如果通讯录从上一次下载之后再没有被修改过，时间戳不变，通讯录就将从浏览器缓存中直接读出，从而避免一次额外的HTTP往返消耗。如果用户已经修改了通讯录，时间戳也可以确保新的URL不会匹配缓存的响应，浏览器将请求新的通讯录条目。 尽早清空缓冲区当用户请求一个页面时，服务器需要用大约200到500毫秒来组装HTML页面，在这期间，浏览器闲等着数据到达。PHP中有一个 flush() 函数，允许给浏览器发送一部分已经准备完毕的HTML响应，以便浏览器可以在后台准备剩余部分的同时开始获取组件，好处主要体现在很忙的后台或者很“轻”的前端页面上（P.S. 也就是说，响应时耗主要在后台方面时最能体现优势）。 对Ajax用GET请求Yahoo!邮箱 团队发现使用 XMLHttpRequest 时，浏览器的POST请求是通过一个两步的过程来实现的：先发送HTTP头，在发送数据。所以最好用GET请求，它只需要发送一个TCP报文（除非cookie特别多）。IE的URL长度最大值是2K，所以如果要发送的数据超过2K就无法使用GET了。 POST请求的一个有趣的副作用是实际上没有发送任何数据，就像GET请求一样。正如 HTTP说明文档 中描述的，GET请求是用来检索信息的。所以它的语义只是用GET请求来请求数据，而不是用来发送需要存储到服务器的数据。 延迟加载组件JavaScript是分隔onload事件之前和之后的一个理想选择。例如，如果有JavaScript代码和支持拖放以及动画的库，这些都可以先等会儿，因为拖放元素是在页面最初渲染之后的。其它可以延迟加载的部分包括隐藏内容（在某个交互动作之后才出现的内容）和折叠的图片。 预加载组件预加载可能看起来和延迟加载是相反的，但它其实有不同的目标。通过预加载组件可以充分利用浏览器空闲的时间来请求将来会用到的组件（图片，样式和脚本）。用户访问下一页的时候，大部分组件都已经在缓存里了，所以在用户看来页面会加载得更快。 实际应用中有以下几种预加载的类型： 无条件 预加载——尽快开始加载，获取一些额外的组件。google.com就是一个sprite图片预加载的好例子，这个sprite图片并不是google.com主页需要的，而是搜索结果页面上的内容。 条件性 预加载——根据用户操作猜测用户将要跳转到哪里并据此预加载。在 search.yahoo.com 的输入框里键入内容后，可以看到那些额外组件是怎样请求加载的。 提前 预加载——在推出新设计之前预加载。经常在重新设计之后会听到：“这个新网站不错，但比以前更慢了”，一部分原因是用户访问先前的页面都是有旧缓存的，但新的却是一种空缓存状态下的体验。可以通过在将要推出新设计之前预加载一些组件来减轻这种负面影响，老站可以利用浏览器空闲的时间来请求那些新站需要的图片和脚本。 减少DOM元素的数量一个复杂的页面意味着要下载更多的字节，而且用JavaScript访问DOM也会更慢。举个例子，想要添加一个事件处理器的时候，循环遍历页面上的500个DOM元素和5000个DOM元素是有区别的。 大量的DOM元素是一种征兆——页面上有些内容无关的标记需要清理。正在用嵌套表格来布局吗？还是为了修复布局问题而添了一堆的&lt;div&gt;或许应该用更好的语义化标记。 跨域分离组件分离组件可以最大化并行下载，但要确保只用不超过2-4个域，因为存在DNS查找的代价。例如，可以把HTML和动态内容部署在 www.example.org ，而把静态组件分离到 static1.example.org 和 static2.example.org 。 尽量少用iframe用iframe可以把一个HTML文档插入到父文档里，重要的是明白iframe是如何工作的并高效地使用它。 &lt;iframe&gt; 的优点： 引入缓慢的第三方内容，比如标志和广告 安全沙箱 并行下载脚本 &lt;iframe&gt; 的缺点： 代价高昂，即使是空白的iframe 阻塞页面加载 非语义 杜绝404HTTP请求代价高昂，完全没有必要用一个HTTP请求去获取一个无用的响应（比如404 Not Found），只会拖慢用户体验而没有任何好处。 给Cookie减肥使用cookie的原因有很多，比如授权和个性化。HTTP头中cookie信息在web服务器和浏览器之间交换。重要的是保证cookie尽可能的小，以最小化对用户响应时间的影响。 相关经验原则可以总结如下： 清除不必要的cookie 保证cookie尽可能小，以最小化对用户响应时间的影响 注意给cookie设置合适的域级别，以免影响其它子域 设置合适的有效期，更早的有效期或者none可以更快的删除cookie，提高用户响应时间 把组件放在不含cookie的域下当浏览器发送对静态图像的请求时，cookie也会一起发送，而服务器根本不需要这些cookie。所以它们只会造成没有意义的网络通信量，应该确保对静态组件的请求不含cookie。可以创建一个子域，把所有的静态组件都部署在那儿。 尽量减少DOM访问用JavaScript访问DOM元素是很慢的，所以，为了让页面反应更迅速，应该： 缓存已访问过的元素的索引 先“离线”更新节点，再把它们添到DOM树上 避免用JavaScript修复布局问题 用智能的事件处理器有时候感觉页面反映不够灵敏，是因为有太多频繁执行的事件处理器被添加到了DOM树的不同元素上，这就是推荐使用 事件委托 的原因。如果一个 div 里面有10个按钮，应该只给div容器添加一个事件处理器，而不是给每个按钮都添加一个。事件能够冒泡，所以可以捕获事件并得知哪个按钮是事件源。 选择 舍弃@import前面提到了一个最佳实践：为了实现逐步渲染，CSS应该放在顶部。 在IE中用 @import 与在底部用 &lt;link&gt; 效果一样，所以最好不要用它。 避免使用滤镜IE专有的 AlphaImageLoader 滤镜可以用来修复IE7之前的版本中半透明PNG图片的问题。在图片加载过程中，这个滤镜会阻塞渲染，卡住浏览器，还会增加内存消耗而且是被应用到每个元素的，而不是每个图片，所以会存在一大堆问题。 最好的方法是干脆不要用 AlphaImageLoader，而优雅地降级到用在IE中支持性很好的PNG8图片来代替。如果非要用AlphaImageLoader ，应该用下划线hack：_filter 来避免影响IE7及更高版本的用户。 优化图片设计师做好图片后，在把这些图片通过FTP上传到web服务器之前，我们还可以做一些事情。 检查GIF图片，看看图片中是不是用了调色板大小对应的颜色数，如果4色图片用了调色板中256色的“槽”，那就还有改进的余地。 试着把GIF图片转换成PNG，看能不能缩减大小，往往可以。开发者通常不愿意用PNG图片，因为浏览器支持有限，但这都是过去的事情了。真正的问题是PNG图片完全支持alpha透明度，而GIF图片却不支持透明度渐变，所以GIF能做的任何事情，PNG都可以（除了动画）。 对图片进行压缩处理等。 优化CSS Sprite 在Sprite图片中横向排列一般都比纵向排列的最终文件小 组合Sprite图片中的相似颜色可以保持低色数，最理想的是256色以下PNG8格式 “对移动端友好”，不要在Sprite图片中留下太大的空隙。虽然不会在很大程度上影响图片文件的大小，但这样做可以节省用户代理把图片解压成像素映射时消耗的内存。100×100的图片是1万个像素，而1000×1000的图片就是100万个像素了。 不要用HTML缩放图片不要因为在HTML中可以设置宽高而使用本不需要的大图。 用小的可缓存的favicon.icofavicon.ico是放在服务器根目录的图片，它会带来一堆麻烦，因为即便你不管它，浏览器也会自动请求它，所以最好不要给一个404 Not Found响应。而且只要在同一个服务器上，每次请求它时都会发送cookie，此外这个图片还会干扰下载顺序，例如在IE中，当你在onload中请求额外组件时，将会先下载favicon。 所以为了缓解favicon.ico的缺点，应该确保： 足够小，最好在1K以下 设置合适的有效期HTTP头（以后如果想换的话就不能重命名了），把有效期设置为几个月后一般比较安全，可以通过检查当前favicon.ico的最后修改日期来确保变更能让浏览器知道。 保证所有组件都小于25K这个限制是因为iPhone不能缓存大于25K的组件，注意这里指的是 未压缩的 大小。这就是为什么缩减内容本身也很重要，因为单纯的gzip可能不够。 把组件打包到一个复合文档里把各个组件打包成一个像有附件的电子邮件一样的复合文档里，可以用一个HTTP请求获取多个组件（记住一点：HTTP请求是代价高昂的）。用这种方式的时候，要先检查用户代理是否支持（iPhone就不支持）。 避免图片src属性为空当图片的src属性为空时，浏览器会向服务器发送另一个请求。 IE 向页面所在目录发起一个请求 Safari和Chrome 想当前页面本身发送一个请求 Firefox 3及更早版本与Safari和Chrome处理方式一样，但3.5解决了这个问题，不会再发送请求了 Opera 遇到有空src属性的图片不做任何处理 为什么图片的src属性为空不好？ 意外发送大量的通信量对服务器来说是很伤的，尤其是在每天有几百万访问量页面的时候。 浪费服务器资源去生成一个根本不可能被看到的页面。 可能会污染用户数据，如果追踪请求状态，要么通过cookie要么是其它方式，可能会破坏用户数据。即使图片请求并没有返回图片，整个HTTP头部也会被浏览器接受并读取，包括所有的cookie。虽然其余部分会被丢弃，但这可能已经造成破坏了。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"},{"name":"HTML","slug":"HTML","permalink":"http://helianthuswhite.cn/tags/HTML/"},{"name":"SEO","slug":"SEO","permalink":"http://helianthuswhite.cn/tags/SEO/"}]},{"title":"JS原型和原型链","slug":"article-43","date":"2017-04-16T06:41:42.000Z","updated":"2019-07-02T11:57:07.094Z","comments":true,"path":"2017/04/16/article-43/","link":"","permalink":"http://helianthuswhite.cn/2017/04/16/article-43/","excerpt":"JS原型和原型链是JS开发中重要的一个点，通常通过原型继承来实现面向对象的开发。 通过查阅资料和比较，最终也算是对此有了稍微的理解。这里主要推荐一下这篇文章——JS原型与原型链终极详解。","text":"JS原型和原型链是JS开发中重要的一个点，通常通过原型继承来实现面向对象的开发。 通过查阅资料和比较，最终也算是对此有了稍微的理解。这里主要推荐一下这篇文章——JS原型与原型链终极详解。 原型对象在JavaScript中，通过new Function()创建的对象拥有一个prototype属性，该属性也是一个对象，即原型对象。注意这里是通过new Function()创建的对象，对于new Object()创建的对象是没有原型对象的属性的，但是会有一个__proto__属性。 关于原型对象的作用，主要是用来实现对象之间的继承，给出下面的例子。 12345678var person = function(name)&#123; this.name = name&#125;;person.prototype.getName = function()&#123; return this.name; &#125;var zjh = new person(‘zhangjiahao’);zjh.getName(); //zhangjiahao 这里通过给person的原型对象添加一个获取名字的方法来使其他的person对象拥有该方法。具体的继承实现，则是通过原型链来实现。 原型链JavaScript中的每一个对象都有一个__proto__属性，该属性会指向创建它的对象的原型对象，而原型对象的__proto__属性又会指向创建它的对象的原型对象。即可以得到如下关系图： 在该图中，zjh的__proto__属性指向person的原型，person原型的__proto__属性指向object的原型，最终object原型的__proto__属性指向null，该原型链结束。 下图分析了内存中的结构图，其中蓝色方框即为通过new Function()创建的对象，蓝色椭圆框为new Object()创建的对象，白色方框为对象的属性，红色虚线框为不存在的属性。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"}]},{"title":"HTML标签的语义化","slug":"article-42","date":"2017-04-16T05:32:48.000Z","updated":"2019-07-02T11:57:06.876Z","comments":true,"path":"2017/04/16/article-42/","link":"","permalink":"http://helianthuswhite.cn/2017/04/16/article-42/","excerpt":"什么是HTML标签的语义化HTML标签的语义化就是根据元素内容来选择符合语义的标签，即用正确的标签做正确的事。","text":"什么是HTML标签的语义化HTML标签的语义化就是根据元素内容来选择符合语义的标签，即用正确的标签做正确的事。 语义化的好处 HTML语义化让页面的内容结构化，使结构更加清晰，便于对浏览器、搜索引擎解析。 即使在没有CSS样式的情况下也能以一种文档格式显示，并且是容易阅读的。 搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO。 使阅读源代码的人对网站更容易将网站分块，便于阅读维护和理解。 需要注意的 尽可能少的使用无语义的标签div和span； 在语义不明显时，既可以使用div或者p时，尽量用p,因为p在默认情况下有上下间距，对兼容特殊终端有利； 不要使用纯样式标签，如：b、font、u等，改用css设置。 需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）； 使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td； 表单域要用fieldset标签包起来，并用legend标签说明表单的用途； 每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。 HTML5新增语义标签例如&lt;header&gt;,&lt;nav&gt;,&lt;article&gt;,&lt;section&gt;,&lt;footer&gt;,&lt;aside&gt;,&lt;hgroup&gt;,&lt;address&gt;,&lt;time&gt;,&lt;details&gt;等等。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"HTML5","slug":"HTML5","permalink":"http://helianthuswhite.cn/tags/HTML5/"},{"name":"HTML","slug":"HTML","permalink":"http://helianthuswhite.cn/tags/HTML/"},{"name":"SEO","slug":"SEO","permalink":"http://helianthuswhite.cn/tags/SEO/"}]},{"title":"Vue组件间通信","slug":"article-41","date":"2017-04-06T01:14:15.000Z","updated":"2019-07-02T11:57:06.708Z","comments":true,"path":"2017/04/06/article-41/","link":"","permalink":"http://helianthuswhite.cn/2017/04/06/article-41/","excerpt":"","text":"","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"VUE","slug":"VUE","permalink":"http://helianthuswhite.cn/tags/VUE/"}]},{"title":"HTML5应用程序缓存","slug":"article-40","date":"2017-03-10T04:46:16.000Z","updated":"2019-07-02T11:57:06.535Z","comments":true,"path":"2017/03/10/article-40/","link":"","permalink":"http://helianthuswhite.cn/2017/03/10/article-40/","excerpt":"HTML5提供了一个manifest属性来实现应用程序的缓存，如需启用应用程序缓存，直接在&lt;html&gt;标签中加上manifest属性： 1234&lt;!DOCTYPE HTML&gt;&lt;html manifest=\"demo.appcache\"&gt;...&lt;/html&gt; 需要注意的是，manifest 文件需要配置正确的 MIME-type，即 “text/cache-manifest”。必须在 web 服务器上进行配置。","text":"HTML5提供了一个manifest属性来实现应用程序的缓存，如需启用应用程序缓存，直接在&lt;html&gt;标签中加上manifest属性： 1234&lt;!DOCTYPE HTML&gt;&lt;html manifest=\"demo.appcache\"&gt;...&lt;/html&gt; 需要注意的是，manifest 文件需要配置正确的 MIME-type，即 “text/cache-manifest”。必须在 web 服务器上进行配置。 Manifest文件详解manifest 文件可分为三个部分： CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存 NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存 FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面） CACHE MANIFEST第一行，CACHE MANIFEST，是必需的： 1234CACHE MANIFEST/theme.css/logo.gif/main.js 上面的 manifest 文件列出了三个资源：一个 CSS 文件，一个 GIF 图像，以及一个 JavaScript 文件。当 manifest 文件加载后，浏览器会从网站的根目录下载这三个文件。然后，无论用户何时与因特网断开连接，这些资源依然是可用的。 NETWORK可以使用星号来指示所有其他资源/文件都需要因特网连接： 123NETWORK:login.asp* FALLBACK下面的 FALLBACK 小节规定如果无法建立因特网连接，则用 “404.html” 替代 /html5/ 目录中的所有文件： 12FALLBACK:/html5/ /404.html 更新缓存一旦应用被缓存，它就会保持缓存直到发生下列情况： 用户清空浏览器缓存 manifest 文件被修改 由程序来更新应用缓存 实例以 “#” 开头的是注释行，但也可满足其他用途。应用的缓存会在其 manifest 文件更改时被更新。如果您编辑了一幅图片，或者修改了一个 JavaScript 函数，这些改变都不会被重新缓存。更新注释行中的日期和版本号是一种使浏览器重新缓存文件的办法。 1234567891011CACHE MANIFEST# 2012-02-21 v1.0.0/theme.css/logo.gif/main.jsNETWORK:login.aspFALLBACK:/html5/ /404.html","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"HTML5","slug":"HTML5","permalink":"http://helianthuswhite.cn/tags/HTML5/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"}]},{"title":"【2017春招】阿里weex团队前端一面","slug":"article-39","date":"2017-03-10T04:46:07.000Z","updated":"2019-07-02T11:57:06.157Z","comments":true,"path":"2017/03/10/article-39/","link":"","permalink":"http://helianthuswhite.cn/2017/03/10/article-39/","excerpt":"虽然面试主要是在聊简历上的项目，但是因为是weex团队，所以问了很多移动端相关的问题，其他的一些问题就是在项目中可能遇到的情况。项目相关问题暂未列出。","text":"虽然面试主要是在聊简历上的项目，但是因为是weex团队，所以问了很多移动端相关的问题，其他的一些问题就是在项目中可能遇到的情况。项目相关问题暂未列出。 面试问题如下（不分先后）： JS如何实现继承 JS中的三个事件主要是指什么 如何解决前端跨域问题 如何实现一个轮播图 前端如何做网站性能优化 如何做移动端的字体自适应 谈谈对vue的理解 谈谈对weex的想法 移动端的轮播图滑动如何实现 express和koa框架有什么区别 canvas如何绘制一张图片 websocket如何实现的 packge.json包含哪些属性 原生的AJAX如何实现 如何复制一个对象 什么是伪数组 如何实现一个元素的垂直居中 如何实现懒加载 CSS3的动画如何实现 有没有用过reset.css","categories":[{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/categories/面试/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"},{"name":"CSS3","slug":"CSS3","permalink":"http://helianthuswhite.cn/tags/CSS3/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"},{"name":"SEO","slug":"SEO","permalink":"http://helianthuswhite.cn/tags/SEO/"},{"name":"ES6","slug":"ES6","permalink":"http://helianthuswhite.cn/tags/ES6/"},{"name":"VUE","slug":"VUE","permalink":"http://helianthuswhite.cn/tags/VUE/"},{"name":"WEEX","slug":"WEEX","permalink":"http://helianthuswhite.cn/tags/WEEX/"},{"name":"Node","slug":"Node","permalink":"http://helianthuswhite.cn/tags/Node/"},{"name":"webpack","slug":"webpack","permalink":"http://helianthuswhite.cn/tags/webpack/"}]},{"title":"【2017春招】腾讯AlloyTeam前端一面","slug":"article-38","date":"2017-03-10T04:45:49.000Z","updated":"2019-07-02T11:57:05.904Z","comments":true,"path":"2017/03/10/article-38/","link":"","permalink":"http://helianthuswhite.cn/2017/03/10/article-38/","excerpt":"2017腾讯AlloyTeam前端开发面试问的也都是基础为主，但是基本没有问HTML和CSS相关的问题，因为他们这个团队招的前端主要以JS为主，所以问的大都是关于JS相关的问题。","text":"2017腾讯AlloyTeam前端开发面试问的也都是基础为主，但是基本没有问HTML和CSS相关的问题，因为他们这个团队招的前端主要以JS为主，所以问的大都是关于JS相关的问题。 面试问题如下（不分先后）： JS如何实现原型继承 JS中的三个事件主要是指什么 如何解决前端跨域问题 如何理解JS中的闭包 前端如何做网站性能优化 说一说Promise的用法 有没有用过ES6的语法 JS的基本数据类型有哪些 原生的AJAX怎么写 JQuery的ajax需要传递哪些参数","categories":[{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/categories/面试/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"},{"name":"HTML5","slug":"HTML5","permalink":"http://helianthuswhite.cn/tags/HTML5/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"},{"name":"HTML","slug":"HTML","permalink":"http://helianthuswhite.cn/tags/HTML/"},{"name":"SEO","slug":"SEO","permalink":"http://helianthuswhite.cn/tags/SEO/"}]},{"title":"前端必会的垂直居中","slug":"article-37","date":"2017-03-10T04:45:22.000Z","updated":"2019-07-02T11:57:05.731Z","comments":true,"path":"2017/03/10/article-37/","link":"","permalink":"http://helianthuswhite.cn/2017/03/10/article-37/","excerpt":"垂直居中，这是在前端中会经常遇到的问题，同时也是面试前端开发中必问的问题。这里总结一下几种常用的使元素垂直居中的方法。","text":"垂直居中，这是在前端中会经常遇到的问题，同时也是面试前端开发中必问的问题。这里总结一下几种常用的使元素垂直居中的方法。 使用绝对定位实现垂直居中使用绝对定位的垂直居中方法，是块级元素最常见也是最常用的一种办法。在子元素的宽高未知时垂直居中： 12345678.div &#123; margin: auto; position: absolute; top: 0; left: 0; bottom: 0; right: 0; &#125; 子元素的宽高已知时的垂直居中： 123456789.div &#123; position: absolute; top: 50%; left: 50%; width: 400px; height: 200px; margin-top: -100px; margin-left: -200px; &#125; 使用transform属性实现垂直居中使用transform属性实现的元素垂直居中，与绝对定位类似。不过因为CSS3属性的缘故，用此方法要考虑浏览器的兼容性。 123456789.div &#123; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); -webkit-transform: translate(-50%, -50%); -moz-transform: translate(-50%, -50%); -ms-transform: translate(-50%, -50%);&#125; 使用单元表格来垂直居中这个方法是通过使用display: table-cell的属性来让元素像表格单元一样显示，该方法需要对居中元素添加额外的父元素。 1234567.father &#123; display: table-cell; vertical-align: middle;&#125;.son &#123; vertical-align: middle;&#125; 使用FlexBox的新属性实现此方法是使用CSS3的新属性flex来实现垂直居中，该属性目前兼容性已经比较完善，同时用它也来完成很多响应式的设计，所以记住该方法还是很有必要的。推荐一下另一篇文章：flex布局的用法 12345.box &#123; display: flex; justify-content: center; align-items: center;&#125; 对于行内元素的垂直居中对于行内元素的垂直居中，需要对父元素设置text-align: center属性,这样行内元素已经可以实现水平居中，再为了实现垂直居中，只需要为行内元素添加vertical-align: center属性就行。 1234567.father &#123; text-align: center;&#125;.son &#123; display: inline-block; vertical-align: middle;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"},{"name":"CSS3","slug":"CSS3","permalink":"http://helianthuswhite.cn/tags/CSS3/"}]},{"title":"JS获取屏幕的大小","slug":"article-36","date":"2017-03-10T04:45:05.000Z","updated":"2019-07-02T11:57:05.507Z","comments":true,"path":"2017/03/10/article-36/","link":"","permalink":"http://helianthuswhite.cn/2017/03/10/article-36/","excerpt":"使用JavaScript获取屏幕的宽高。 包括屏幕分辨率大小，浏览器可视区域大小，网页被卷起的大小，网页正文部分大小等。","text":"使用JavaScript获取屏幕的宽高。 包括屏幕分辨率大小，浏览器可视区域大小，网页被卷起的大小，网页正文部分大小等。 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;html&gt;&lt;script&gt; function a()&#123; document.write( \"屏幕分辨率为：\"+screen.width+\"*\"+screen.height +\"&lt;br /&gt;\"+ \"屏幕可用大小：\"+screen.availWidth+\"*\"+screen.availHeight +\"&lt;br /&gt;\"+ \"网页可见区域宽：\"+document.body.clientWidth +\"&lt;br /&gt;\"+ \"网页可见区域高：\"+document.body.clientHeight +\"&lt;br /&gt;\"+ \"网页可见区域宽(包括边线的宽)：\"+document.body.offsetWidth +\"&lt;br /&gt;\"+ \"网页可见区域高(包括边线的宽)：\"+document.body.offsetHeight +\"&lt;br /&gt;\"+ \"网页正文全文宽：\"+document.body.scrollWidth +\"&lt;br /&gt;\"+ \"网页正文全文高：\"+document.body.scrollHeight +\"&lt;br /&gt;\"+ \"网页被卷去的高：\"+document.body.scrollTop +\"&lt;br /&gt;\"+ \"网页被卷去的左：\"+document.body.scrollLeft +\"&lt;br /&gt;\"+ \"网页正文部分上：\"+window.screenTop +\"&lt;br /&gt;\"+ \"网页正文部分左：\"+window.screenLeft +\"&lt;br /&gt;\"+ \"屏幕分辨率的高：\"+window.screen.height +\"&lt;br /&gt;\"+ \"屏幕分辨率的宽：\"+window.screen.width +\"&lt;br /&gt;\"+ \"屏幕可用工作区高度：\"+window.screen.availHeight +\"&lt;br /&gt;\"+ \"屏幕可用工作区宽度：\"+window.screen.availWidth ); &#125;&lt;/script&gt; &lt;body onload=\"a()\" &gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"}]},{"title":"JS delete方法","slug":"article-35","date":"2017-03-10T04:44:55.000Z","updated":"2019-07-02T11:57:05.323Z","comments":true,"path":"2017/03/10/article-35/","link":"","permalink":"http://helianthuswhite.cn/2017/03/10/article-35/","excerpt":"JavaScript中delete方式用来删除一个对象的属性。","text":"JavaScript中delete方式用来删除一个对象的属性。 delete 操作符与直接释放内存（只能通过解除引用来间接释放）没有关系。可查看内存管理页面。 你可以使用 delete 操作符来删除一个隐式声明的全局变量,也就是没有使用 var 定义的全局变量.全局变量其实是global对象(window)的属性. 如果 delete 操作符删除成功，则被删除的属性将从所属的对象上彻底消失。然后，如果该对象的原型链上有一个同名属性，则该对象会从原型链上继承该同名属性。 有一些属性是无法被删除的，这些属性被称为 DontDelete. 1234567891011121314151617181920212223242526272829x = 42; // 隐式声明的全局变量var y = 43; // 显式声明的全局变量myobj = &#123; h: 4, k: 5&#125; // 隐式声明的全局变量可以被删除delete x; // 返回 true // 显式声明的全局变量不能被删除,该属性不可配置（not configurable）delete y; // 返回 false //内置对象的内置属性不能被删除delete Math.PI; // 返回 false//用户定义的属性可以被删除delete myobj.h; // 返回 true // myobj 是全局对象的属性，而不是变量//因此可以被删除delete myobj; // 返回 truefunction f() &#123; var z = 44; // delete 方法无法删除变量，只能作用于对象的属性 delete z; // returns false&#125; 不能删除一个对象从原型继承而来的属性（不过可以从原型上直接删除它）。 123456789101112131415function Foo()&#123;&#125; Foo.prototype.bar = 42; var foo = new Foo(); // 无效的操作 delete foo.bar; // logs 42，继承的属性 console.log(foo.bar); // 直接删除原型上的属性 delete Foo.prototype.bar; // logs \"undefined\"，已经没有继承的属性 console.log(foo.bar); 当你删除一个数组元素时，数组的 length 属性并不会变小。例如，如果你删除了a[3], a[4]仍然是a[4], a[3]成为undefined. 即便你删除了最后一个元素也是如此 (delete a[a.length-1]). 当用 delete 操作符删除一个数组元素时，被删除的元素已经完全不属于该数组。下面的例子中， trees[3] 被使用delete彻底删除。 12345var trees = [\"redwood\",\"bay\",\"cedar\",\"oak\",\"maple\"];delete trees[3];if (3 in trees) &#123; // 这里不会被执行&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"}]},{"title":"前端跨域请求原理","slug":"article-34","date":"2017-03-10T04:44:48.000Z","updated":"2019-07-02T11:57:05.119Z","comments":true,"path":"2017/03/10/article-34/","link":"","permalink":"http://helianthuswhite.cn/2017/03/10/article-34/","excerpt":"前端的跨域请求，之前遇到过几次，但是都没有去好好整明白具体的原理和解决办法，前两天看到一篇文章，讲的很好，看完之后受益匪浅，转载记录一番。 原文链接：前端跨域请求原理及实践","text":"前端的跨域请求，之前遇到过几次，但是都没有去好好整明白具体的原理和解决办法，前两天看到一篇文章，讲的很好，看完之后受益匪浅，转载记录一番。 原文链接：前端跨域请求原理及实践 什么是跨域请求浏览器的同源策略，出于防范跨站脚本的攻击(XSS)，禁止客户端脚本（如 JavaScript）对不同域的服务进行跨站调用。 一般的，只要网站的 协议名protocol、 主机host、 端口号port 这三个中的任意一个不同，网站间的数据请求与传输便构成了跨域调用。 利用JSONP解决跨域问题什么是JSONPJSONP 是 JSON 的一种使用模式，可以解决主流浏览器的跨域数据访问问题。其原理是根据 XmlHttpRequest 对象受到同源策略的影响，而 &lt;script&gt;标签元素却不受同源策略影响，可以加载跨域服务器上的脚本，网页可以从其他来源动态产生 JSON 资料。用 JSONP 获取的不是 JSON 数据，而是可以直接运行的 JavaScript 语句。 使用jQuery中的ajax实现JSONP的调用请求代码： 12345678910111213141516171819202122232425262728// 回调函数function jsonpCallback(data) &#123; console.log(\"jsonpCallback: \" + data.name)&#125;$(\"#submit\").click(function() &#123; var data = &#123; name: $(\"#name\").val(), id: $(\"#id\").val() &#125;; $.ajax(&#123; url: 'http://localhost:3001/ajax/deal', data: data, dataType: 'jsonp', cache: false, timeout: 5000, // jsonp 字段含义为服务器通过什么字段获取回调函数的名称 jsonp: 'callback', // 声明本地回调函数的名称，jquery 默认随机生成一个函数名称 jsonpCallback: 'jsonpCallback', success: function(data) &#123; console.log(\"ajax success callback: \" + data.name) &#125;, error: function(jqXHR, textStatus, errorThrown) &#123; console.log(textStatus + ' ' + errorThrown); &#125; &#125;);&#125;); 服务器代码： 12345678910app.get('/ajax/deal', function(req, res) &#123; console.log(\"server accept: \", req.query.name, req.query.id) var data = \"&#123;\" + \"name:'\" + req.query.name + \" - server 3001 process',\" + \"id:'\" + req.query.id + \" - server 3001 process'\" + \"&#125;\" var callback = req.query.callback var jsonp = callback + '(' + data + ')' console.log(jsonp) res.send(jsonp) res.end()&#125;) 这里一定要注意 data 中字符串拼接，不能直接将 JSON 格式的 data 直接传给回调函数，否则会发生编译错误： parsererror Error: jsonpCallback was not called。 现在可以知道利用 JSONP 格式返回的值是一段要立即执行的 JavaScript 代码，通过执行这段代码来对数据进行处理，而不会像 ajax 的 XmlHttpRequest 那样可以监听不同事件对数据进行不同处理。 使用script标签原生实现JSONP虽然 jQuery 的 JSONP 实现与 ajax 很像，但是原理却并不一样，只是 jQuery 对 JSONP 做了封装和转换使得它与 ajax 很像。 在请求发送时查看HTTP请求头，我们会发现即使形式上使用的是 POST 方法来传输一个JSON数据，但是发送请求时还是会被转成 GET 请求，所以我们可以通过script标签来构造一个 GET 请求解决跨域的问题。 1&lt;script src = 'http://localhost:3001/ajax/deal?callback=jsonpCallback&amp;name=chiaki&amp;id=3001&amp;_=1473164876032'&gt;&lt;/script&gt; JSONP使用的不足 只能使用 GET 方法发起请求，这是由于 script 标签自身的限制决定的。 不能很好的发现错误，并进行处理。与 Ajax 对比，由于不是通过 XmlHttpRequest 进行传输，所以不能注册 success、error 等事件监听函数。 使用CORS实现跨域请求什么是CORSCross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，是 JSONP 模式的现代版。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。用 CORS 可以让网页设计师用一般的 XMLHttpRequest，这种方式的错误处理比 JSONP 要来的好。另一方面，JSONP 可以在不支持 CORS 的老旧浏览器上运作。现代的浏览器都支持 CORS。 CORS的实现请求代码： 1234567891011121314151617181920212223//正常的跨域请求$(function() &#123; $(\"#submit\").click(function() &#123; var data = &#123; name: $(\"#name\").val(), id: $(\"#id\").val() &#125;; $.ajax(&#123; type: 'POST', data: data, url: 'http://localhost:3001/cors', dataType: 'json', cache: false, timeout: 5000, success: function(data) &#123; console.log(data) &#125;, error: function(jqXHR, textStatus, errorThrown) &#123; console.log('error ' + textStatus + ' ' + errorThrown); &#125; &#125;); &#125;);&#125;); 服务器代码： 1234567891011121314app.post('/cors', function(req, res) &#123; res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\"); res.header(\"Access-Control-Allow-Methods\", \"PUT,POST,GET,DELETE,OPTIONS\"); res.header(\"X-Powered-By\", ' 3.2.1') res.header(\"Content-Type\", \"application/json;charset=utf-8\"); var data = &#123; name: req.body.name + ' - server 3001 cors process', id: req.body.id + ' - server 3001 cors process' &#125; console.log(data) res.send(data) res.end()&#125;) 可以看到，在服务器返回的请求头中设置CORS从而实现跨域请求。 CORS中属性分析Access-Control-Allow-Origin origin参数指定可以访问资源的URI。 浏览器必须执行此操作。对于没有凭证的请求，服务器可以将“*”指定为通配符，从而允许任何源访问资源。 Access-Control-Allow-Methods 指定访问资源时允许的方法或方法,这用于响应预请求。 Access-Control-Allow-Headers 用于响应预请求，以指示在进行实际请求时可以使用哪些HTTP头。 CORS与JSONP的对比 CORS 除了 GET 方法外，也支持其它的 HTTP 请求方法如 POST、 PUT 等。 CORS 可以使用 XmlHttpRequest 进行传输，所以它的错误处理方式比 JSONP 好。 JSONP 可以在不支持 CORS 的老旧浏览器上运作。 一些其它的跨域调用方式window.namewindow对象有个name属性，该属性有个特征：即在一个窗口 (window) 的生命周期内，窗口载入的所有的页面都是共享一个 window.name 的，每个页面对 window.name 都有读写的权限，window.name 是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。 window.postMessage()这个方法是 HTML5 的一个新特性，可以用来向其他所有的 window 对象发送消息。需要注意的是我们必须要保证所有的脚本执行完才发送 MessageEvent，如果在函数执行的过程中调用了他，就会让后面的函数超时无法执行。 web socketsweb sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)web sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。只有在支持web socket协议的服务器上才能正常工作。","categories":[{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/categories/面试/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"}]},{"title":"HTML DOCTYPE 标签","slug":"article-33","date":"2017-03-09T11:17:04.000Z","updated":"2019-07-02T11:57:04.759Z","comments":true,"path":"2017/03/09/article-33/","link":"","permalink":"http://helianthuswhite.cn/2017/03/09/article-33/","excerpt":"定义和用法&lt;!DOCTYPE&gt; 声明必须是 HTML 文档的第一行，位于 &lt;html&gt; 标签之前。 &lt;!DOCTYPE&gt; 声明不是 HTML 标签；它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。 在 HTML 4.01 中，&lt;!DOCTYPE&gt; 声明引用 DTD，因为 HTML 4.01 基于 SGML。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。 HTML5 不基于 SGML，所以不需要引用 DTD。 请始终向 HTML 文档添加 &lt;!DOCTYPE&gt;声明，这样浏览器才能获知文档类型。","text":"定义和用法&lt;!DOCTYPE&gt; 声明必须是 HTML 文档的第一行，位于 &lt;html&gt; 标签之前。 &lt;!DOCTYPE&gt; 声明不是 HTML 标签；它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。 在 HTML 4.01 中，&lt;!DOCTYPE&gt; 声明引用 DTD，因为 HTML 4.01 基于 SGML。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。 HTML5 不基于 SGML，所以不需要引用 DTD。 请始终向 HTML 文档添加 &lt;!DOCTYPE&gt;声明，这样浏览器才能获知文档类型。 HTML 4.01 与 HTML5 之间的差异在 HTML 4.01 中有三种 &lt;!DOCTYPE&gt; 声明。在 HTML5 中只有一种。 HTML51&lt;!DOCTYPE html&gt; HTML 4.01 Strict该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。 1&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"&gt; HTML 4.01 Transitional该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。 1&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt; HTML 4.01 Frameset该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。 1&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \"http://www.w3.org/TR/html4/frameset.dtd\"&gt;","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"HTML5","slug":"HTML5","permalink":"http://helianthuswhite.cn/tags/HTML5/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"},{"name":"HTML","slug":"HTML","permalink":"http://helianthuswhite.cn/tags/HTML/"}]},{"title":"ES6学习总结","slug":"article-32","date":"2017-03-09T08:17:17.000Z","updated":"2019-07-02T11:57:04.228Z","comments":true,"path":"2017/03/09/article-32/","link":"","permalink":"http://helianthuswhite.cn/2017/03/09/article-32/","excerpt":"ES6相比于之前的ECMAScript来说，是变化比较大的，里面新增的一些语法和标准，都致力于让JavaScript的开发变得更加规范和高效。而对于一个优秀的前端开发者来说，拥抱新的变化时必不可少的，大部分的互联网公司面试也都会问到ES6相关的问题。遗憾自己现在才决定好好学习ES6的语法，将自己的总结记录在此文章中。 注：学习教程为阮一峰老师出版的《ES6标准入门》一书","text":"ES6相比于之前的ECMAScript来说，是变化比较大的，里面新增的一些语法和标准，都致力于让JavaScript的开发变得更加规范和高效。而对于一个优秀的前端开发者来说，拥抱新的变化时必不可少的，大部分的互联网公司面试也都会问到ES6相关的问题。遗憾自己现在才决定好好学习ES6的语法，将自己的总结记录在此文章中。 注：学习教程为阮一峰老师出版的《ES6标准入门》一书 let和const命令在ES6中，我们推荐使用let和const命令来代替之前的var声明变量。 let命令let命令声明的变量只在声明的代码块内有效。 使用let命令时，变量的引用必须在声明之后，否则会报错。 let命令声明的变量会与当前块级作用域绑定，不受外界影响。 let命令声明变量时不允许在相同作用域内重复声明同一个变量。 在严格模式下，函数只能在顶层作用域和函数中声明，否则报错。 const命令const用来声明常量，一旦声明，其值就不能改变。 const声明的变量，在声明时必须初始化，否则会报错。 关于作用域的方面，const与let命令相同，声明只在块级作用域内产生影响。 变量的解构赋值ES6允许按照一定的模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。变量解构赋值的用途包括： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556//变换变量的值[x, y] = [y, x];//从函数返回一个数组function example() &#123; return [1, 2, 3];&#125;const [a, b, c] = example();//从函数返回一个对象function example() &#123; return &#123; foo: 1, bar: 2, &#125;;&#125;const &#123;foo, bar&#125; = example();//函数参数的定义function f([x, y, z]) &#123;...&#125;f([1, 2, 3]);function f(&#123;x, y, z&#125;) &#123;...&#125;f(&#123;x: 1, y: 2, z: 3]&#125;;//提取JSON对象中的数据const jsonData = &#123; a: 1, b: 2, c: [3, 4],&#125;;let &#123; a, b, c:d &#125; = jsonData;//指定函数参数的默认值function ajax( url, &#123; async = true, beforeSend = function() &#123;&#125;, cache = true, complete = function() &#123;&#125;, error = 'errorMessage',&#125;) &#123; ...&#125;//遍历map结构for (let [key, value] of map) &#123; console.log(key + ':' + value);&#125;for (let [key] of map) &#123; console.log(key);&#125;for (let [,value] of map) &#123; console.log(value);&#125;//获取加载模块的指定方法const &#123; sourceNode, sourceMapConsumer &#125; = require('source-map'); 数组的解构赋值只要等号两边的模式相同，左边的变量就可以被赋予对应的值。 1234567let [foo, [[bar, baz]]] = [1, [[2, 3]]];//foo = 1, bar = 2, baz = 3let [ , , third] = [1, 2, 3];//third = 3let [a, ...b] = [1, 2, 3, 4];//a = 1, b = [2, 3, 4] 如果等号左边的变量模式多于右边，则会解构失败，解构失败的变量值会变成undefined。反之，等号左边的变量模式少于右边，则会正常解构。 123456let [foo] = [];//foo undefinedlet [bar, foo] = [1];//foo undefinedlet [x, y] = [1, 2, 3];//x = 1, y = 2 如果某种数据结构具有Iterator接口，那么它也可以采用数组形式的解构赋值。 解构赋值允许指定默认值： 12let [foo = true] = [];//foo = true; 需要注意的是，ES6内部使用===来判断某个位置是否有值，所以如果右边数组中的值不严格等于undefined，默认值是不会生效。 对象的解构赋值对象解构赋值与数组的解构赋值类似，不同的是，对象的解构不需要按次序，只需要对应的属性名相同即可。 12345678let &#123; bar, foo &#125; = &#123; foo: 'aaa', bar: 'bbb' &#125;;//bar = bbb, foo = aaa;let &#123; baz &#125; = &#123; foo: 'aaa', bar: 'bbb' &#125;;//baz = undefined;let &#123; foo:baz &#125; = &#123; foo: 'aaa', bar: 'bbb' &#125;;//baz = aaa; foo is not defined. 对象的解构赋值只会对变量进行赋值，不会对模式赋值。 对于已经声明的变量解构赋值时要小心不能以大括号开头，否则会出错。下例中{x}会被理解成一个代码块，所以会报错，正确的写法是将整个解构语句放在括号里。 12345let x;&#123; x &#125; = &#123; x:1 &#125;;//error(&#123; x &#125; = &#123; x:1 &#125;);//x = 1 字符串的解构字符串的解构是将字符串装换成一个类似数组的对象。 1234const [a, b, c, d, e] = 'hello';// a = 'h',...,e = 'o';let &#123; length:len &#125; = 'hello';//len = 5; 数字和布尔值的解构赋值解构赋值的规则是，如果等号右边的类型不是Object，就将其转为Object。 12345678let &#123; toString:s &#125; = 123;//s = true;let &#123; toString:s &#125; = true;//s = true;let &#123; prop:x &#125; = undefined;//errorlet &#123; prop:y &#125; = null;//error 字符串的扩展codePointAt()JavaScript中，字符以UTF-16的格式储存，每个字符固定为2字节，对于需要4个字节储存的字符（Unicode 编码大于 0xFFFF 的字符），JavaScript会认为它们是两个字符。 12345let s = '𠮷';console.log(s.charCodeAt(0));//55362 0xD842console.log(s.charCodeAt(1));//57271 0xDFB7 ES6提供了codePointAt方法，能够正确处理4个字节存储的字符，返回一个字符的Unicode编码。下面的代码中JavaScript将“𠮷a”识别成了3个字符，其中从第一个字符开始正确的识别出了32位的UTF-16编码。 1234567let s = '𠮷a';console.log(s.codePointAt(0));//134071 0x20bb7console.log(s.codePointAt(1));//57271 0xDFB7console.log(s.charCodeAt(2));//97 0x61 为了正确的识别出两个字符的编码，可以使用循环来获取每个单独的字符，然后打印出它们的编码。 12345let s = '𠮷a';for (let ch of s) &#123; console.log(ch.codePointAt(0).toString(16));&#125;// 0x20bb7 0x61 String.fromCodePoint()该方法用于从Unicode编码转换为字符，即相当于codePointAt方法的反例。当传入多个参数时，会被合并成一个字符串并返回。需要注意的是，此方法是定义在String对象上，而codePointAt是定义在字符串实例上。 at()用于返回给定位置的字符，相当于ES5的charAt方法，不同的时，该方法可以返回32位的UTF-16编码字符。 includes(),startsWith(),endsWith() includes(): 返回布尔值，表示是否找到了参数字符串。 startsWith(): 返回布尔值，表示参数字符串是否在源字符串的头部。 endsWith(): 返回布尔值，表示参数字符串是否在源字符串的尾部。这3个方法都支持第二个参数，表示开始搜索的位置。其中endsWith方法的第二个参数表示前n个字符。 repeat()repeat方法返回一个新字符串，表示将源字符串重复n次。 12'n'.repeat(2);//'nn' padStart(),padEnd()字符串补全长度方法。padStart用于字符串头部补全，padEnd用于字符串尾部补全。 12345678'x'.padStart(5,'ab');//'ababx''x'.padEnd(4,'ab');//'xaba''xxx'.padStart(2,'ab');//'xxx''x'.padStart(4);//' x' String.raw()String.raw方法通常用来处理带反斜线的字符串，以便后续使用。也可以用作字符串中插入字符串的函数来用。 1234String.raw`Hi\\n$&#123;2+3&#125;`;//Hi\\\\n5String.raw(&#123; raw: test &#125;, 0, 1, 2);//t0e1s2t 需要注意的是，在使用第二种方式的时候，第一个参数必须是具有raw属性的对象，并且raw的值为一个数组。 数值的扩展Number.isFinite(), Number.isNaN()Number.isFinite()用来检查一个数值是否为有限的（finite） 12345678Number.isFinite(15); // trueNumber.isFinite(0.8); // trueNumber.isFinite(NaN); // falseNumber.isFinite(Infinity); // falseNumber.isFinite(-Infinity); // falseNumber.isFinite('foo'); // falseNumber.isFinite('15'); // falseNumber.isFinite(true); // false Number.isNaN()用来检查一个值是否为NaN。 1234567Number.isNaN(NaN) // trueNumber.isNaN(15) // falseNumber.isNaN('15') // falseNumber.isNaN(true) // falseNumber.isNaN(9/NaN) // trueNumber.isNaN('true'/0) // trueNumber.isNaN('true'/'true') // true 它们与传统的全局方法isFinite()和isNaN()的区别在于，传统方法先调用Number()将非数值的值转为数值，再进行判断，而这两个新方法只对数值有效，Number.isFinite()对于非数值一律返回false, Number.isNaN()只有对于NaN才返回true，非NaN一律返回false。 12345678910isFinite(25) // trueisFinite(\"25\") // trueNumber.isFinite(25) // trueNumber.isFinite(\"25\") // falseisNaN(NaN) // trueisNaN(\"NaN\") // trueNumber.isNaN(NaN) // trueNumber.isNaN(\"NaN\") // falseNumber.isNaN(1) // false Number.parseInt(), Number.parseFloat()ES6将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。这样做的目的，是逐步减少全局性方法，使得语言逐步模块化。 1234567// ES5的写法parseInt('12.34') // 12parseFloat('123.45#') // 123.45// ES6的写法Number.parseInt('12.34') // 12Number.parseFloat('123.45#') // 123.45 Number.isInteger()Number.isInteger()用来判断一个值是否为整数。需要注意的是，在JavaScript内部，整数和浮点数是同样的储存方法，所以3和3.0被视为同一个值。 12345Number.isInteger(25) // trueNumber.isInteger(25.0) // trueNumber.isInteger(25.1) // falseNumber.isInteger(\"15\") // falseNumber.isInteger(true) // false Number.EPSILONES6在Number对象上面，新增一个极小的常量Number.EPSILON。引入一个这么小的量的目的，在于为浮点数计算，设置一个误差范围。我们知道浮点数计算是不精确的。但是如果这个误差能够小于Number.EPSILON，我们就可以认为得到了正确结果。 123456789101112Number.EPSILON// 2.220446049250313e-16Number.EPSILON.toFixed(20)// '0.00000000000000022204'Number.EPSILON// 2.220446049250313e-16Number.EPSILON.toFixed(20)// '0.00000000000000022204'5.551115123125783e-17 &lt; Number.EPSILON// true 安全整数和Number.isSafeInteger()JavaScript能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示这个值。ES6引入了Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER这两个常量，用来表示这个范围的上下限。Number.isSafeInteger()则是用来判断一个整数是否落在这个范围之内。 123456789101112131415Number.isSafeInteger('a') // falseNumber.isSafeInteger(null) // falseNumber.isSafeInteger(NaN) // falseNumber.isSafeInteger(Infinity) // falseNumber.isSafeInteger(-Infinity) // falseNumber.isSafeInteger(3) // trueNumber.isSafeInteger(1.2) // falseNumber.isSafeInteger(9007199254740990) // trueNumber.isSafeInteger(9007199254740992) // falseNumber.isSafeInteger(Number.MIN_SAFE_INTEGER - 1) // falseNumber.isSafeInteger(Number.MIN_SAFE_INTEGER) // trueNumber.isSafeInteger(Number.MAX_SAFE_INTEGER) // trueNumber.isSafeInteger(Number.MAX_SAFE_INTEGER + 1) // false Math对象的扩展Math.trunc()Math.trunc方法用于去除一个数的小数部分，返回整数部分。对于非数值，Math.trunc内部使用Number方法将其先转为数值。 12345Math.trunc(4.1) // 4Math.trunc(4.9) // 4Math.trunc(-4.1) // -4Math.trunc(-4.9) // -4Math.trunc(-0.1234) // -0 Math.sign()Math.sign方法用来判断一个数到底是正数、负数、还是零。 1234567Math.sign(-5) // -1Math.sign(5) // +1Math.sign(0) // +0Math.sign(-0) // -0Math.sign(NaN) // NaNMath.sign('foo'); // NaNMath.sign(); // NaN Math.cbrt()Math.cbrt方法用于计算一个数的立方根。 1234Math.cbrt(-1) // -1Math.cbrt(0) // 0Math.cbrt(1) // 1Math.cbrt(2) // 1.2599210498948734 Math.hypot()Math.hypot方法返回所有参数的平方和的平方根。 1234567Math.hypot(3, 4); // 5Math.hypot(3, 4, 5); // 7.0710678118654755Math.hypot(); // 0Math.hypot(NaN); // NaNMath.hypot(3, 4, 'foo'); // NaNMath.hypot(3, 4, '5'); // 7.0710678118654755Math.hypot(-3); // 3 对数方法Math.expm1(x)返回e^x - 1，即Math.exp(x) - 1。Math.log1p(x)方法返回1 + x的自然对数，即Math.log(1 + x)。如果x小于-1，返回NaN。Math.log10(x)返回以10为底的x的对数。如果x小于0，则返回NaN。Math.log2(x)返回以2为底的x的对数。如果x小于0，则返回NaN。 三角函数方法Math.sinh(x)返回x的双曲正弦Math.cosh(x)返回x的双曲余弦Math.tanh(x)返回x的双曲正切Math.asinh(x)返回x的反双曲正弦Math.acosh(x)返回x的反双曲余弦Math.atanh(x)返回x的反双曲正切 指数运算符ES2016 新增了一个指数运算符（）。指数运算符可以与等号结合，形成一个新的赋值运算符（=）。 123456789102 ** 2 // 42 ** 3 // 8let a = 1.5;a **= 2;// 等同于 a = a * a;let b = 4;b **= 3;// 等同于 b = b * b * b; 数组的扩展Array.from()Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。 123456789101112131415let arrayLike = &#123; '0': 'a', '1': 'b', '2': 'c', length: 3&#125;;// ES6的写法let arr2 = Array.from(arrayLike); // ['a', 'b', 'c']Array.from('hello')// ['h', 'e', 'l', 'l', 'o']let namesSet = new Set(['a', 'b'])Array.from(namesSet) // ['a', 'b'] 值得提醒的是，扩展运算符（…）也可以将某些数据结构转为数组。Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。 123456Array.from(arrayLike, x =&gt; x * x);// 等同于Array.from(arrayLike).map(x =&gt; x * x);Array.from([1, 2, 3], (x) =&gt; x * x)// [1, 4, 9] Array.of()Array.of方法用于将一组值，转换为数组。 123Array.of(3, 11, 8) // [3,11,8]Array.of(3) // [3]Array.of(3).length // 1 数组实例的copyWithin()数组实例的copyWithin方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。 它接受三个参数: target（必需）：从该位置开始替换数据。 start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。 end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。 12345678910[1, 2, 3, 4, 5].copyWithin(0, 3)// [4, 5, 3, 4, 5]// 将3号位复制到0号位[1, 2, 3, 4, 5].copyWithin(0, 3, 4)// [4, 2, 3, 4, 5]// -2相当于3号位，-1相当于4号位[1, 2, 3, 4, 5].copyWithin(0, -2, -1)// [4, 2, 3, 4, 5] 数组实例的find()和findIndex()数组实例的find方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。 123456[1, 4, -5, 10].find((n) =&gt; n &lt; 0)// -5[1, 5, 10, 15].find(function(value, index, arr) &#123; return value &gt; 9;&#125;) // 10 数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。 123[1, 5, 10, 15].findIndex(function(value, index, arr) &#123; return value &gt; 9;&#125;) // 2 数组实例的fill()fill方法使用给定值，填充一个数组。fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。 12345678['a', 'b', 'c'].fill(7)// [7, 7, 7]new Array(3).fill(7)// [7, 7, 7]['a', 'b', 'c'].fill(7, 1, 2)// ['a', 7, 'c'] 数组实例的entries()，keys()和values()1234567891011121314151617for (let index of ['a', 'b'].keys()) &#123; console.log(index);&#125;// 0// 1for (let elem of ['a', 'b'].values()) &#123; console.log(elem);&#125;// 'a'// 'b'for (let [index, elem] of ['a', 'b'].entries()) &#123; console.log(index, elem);&#125;// 0 \"a\"// 1 \"b\" 数组实例的includes()Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。 函数的扩展函数参数的默认值除了简洁，ES6 的写法还有两个好处：首先，阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；其次，有利于将来的代码优化，即使未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行。默认赋值的参数不能在函数体内再次声明，否则会报错。 1234567function log(x, y = 'World') &#123; console.log(x, y);&#125;log('Hello') // Hello Worldlog('Hello', 'China') // Hello Chinalog('Hello', '') // Hello 通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。 12345678910111213141516171819// 例一function f(x = 1, y) &#123; return [x, y];&#125;f() // [1, undefined]f(2) // [2, undefined])f(, 1) // 报错f(undefined, 1) // [1, 1]// 例二function f(x, y = 5, z) &#123; return [x, y, z];&#125;f() // [undefined, 5, undefined]f(1) // [1, 5, undefined]f(1, ,2) // 报错f(1, undefined, 2) // [1, 5, 2] 指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真。需要注意的是，length属性只返回默认参数之前的未指定默认值参数的个数，在其之后会忽略。 123456(function (a) &#123;&#125;).length // 1(function (a = 5) &#123;&#125;).length // 0(function (a, b, c = 5) &#123;&#125;).length // 2(function (a = 0, b, c) &#123;&#125;).length // 0(function (a, b = 1, c) &#123;&#125;).length // 1 一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。 12345678910111213141516var x = 1;function f(x, y = x) &#123; console.log(y);&#125;f(2) // 2let x = 1;function f(y = x) &#123; let x = 2; console.log(y);&#125;f() // 1 rest参数ES6 引入 rest 参数（形式为“…变量名”），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。注意，rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。 1234567891011function add(...values) &#123; let sum = 0; for (var val of values) &#123; sum += val; &#125; return sum;&#125;add(2, 5, 3) // 10 扩展运算符扩展运算符（spread）是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。 12345678console.log(...[1, 2, 3])// 1 2 3console.log(1, ...[2, 3, 4], 5)// 1 2 3 4 5[...document.querySelectorAll('div')]// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;] 严格模式只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。 12345678910111213141516171819202122232425// 报错function doSomething(a, b = a) &#123; 'use strict'; // code&#125;// 报错const doSomething = function (&#123;a, b&#125;) &#123; 'use strict'; // code&#125;;// 报错const doSomething = (...a) =&gt; &#123; 'use strict'; // code&#125;;const obj = &#123; // 报错 doSomething(&#123;a, b&#125;) &#123; 'use strict'; // code &#125;&#125;; 箭头函数如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号。 123456789101112131415var f = v =&gt; v;//等同于下面的函数var f = function(v) &#123; return v;&#125;;var f = () =&gt; 5;// 等同于var f = function () &#123; return 5 &#125;;var sum = (num1, num2) =&gt; num1 + num2;// 等同于var sum = function(num1, num2) &#123; return num1 + num2;&#125;; 绑定 this箭头函数可以绑定this对象，大大减少了显式绑定this对象的写法（call、apply、bind）。但是，箭头函数并不适用于所有场合，所以ES7提出了“函数绑定”（function bind）运算符，用来取代call、apply、bind调用。虽然该语法还是ES7的一个提案，但是Babel转码器已经支持。 函数绑定运算符是并排的两个双冒号（::），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面。 12345678910111213141516171819foo::bar;// 等同于bar.bind(foo);foo::bar(...arguments);// 等同于bar.apply(foo, arguments);getPlayers()::map(x =&gt; x.character())::takeWhile(x =&gt; x.strength &gt; 100)::forEach(x =&gt; console.log(x));// 例二let &#123; find, html &#125; = jake;document.querySelectorAll(\"div.myClass\")::find(\"p\")::html(\"hahaha\"); 尾调用优化在一个函数的尾部调用另一个函数，称之为尾调用。 1234567891011121314151617181920//尾调用function f(x)&#123; return g(x);&#125;// 情况一 不是尾调用，g(x)执行完后又赋值了function f(x)&#123; let y = g(x); return y;&#125;// 情况二 不是尾调用function f(x)&#123; return g(x) + 1;&#125;// 情况三 也不是尾调用function f(x)&#123; g(x);&#125; 尾递归函数调用自身，称为递归。如果尾调用自身，就称为尾递归。递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。 1234567891011121314151617181920function Fibonacci (n) &#123; if ( n &lt;= 1 ) &#123;return 1&#125;; return Fibonacci(n - 1) + Fibonacci(n - 2);&#125;Fibonacci(10); // 89// Fibonacci(100)// Fibonacci(500)// 堆栈溢出了function Fibonacci2 (n , ac1 = 1 , ac2 = 1) &#123; if( n &lt;= 1 ) &#123;return ac2&#125;; return Fibonacci2 (n - 1, ac2, ac1 + ac2);&#125;Fibonacci2(100) // 573147844013817200000Fibonacci2(1000) // 7.0330367711422765e+208Fibonacci2(10000) // Infinity 对象的扩展属性的简洁表示方法ES6 允许直接写入变量和函数，作为对象的属性和方法。 12345678910111213var birth = '2000/01/01';var Person = &#123; name: '张三', //等同于birth: birth birth, // 等同于hello: function ()... hello() &#123; console.log('我的名字是', this.name); &#125;&#125;; 属性名表达式定义对象的属性时可以直接用标识符作为属性名，也可以用表达式作为属性名，这时要将表达式放在方括号之内。 123456let propKey = 'foo';let obj = &#123; [propKey]: true, ['a' + 'bc']: 123&#125;; Object.is()Object.is()方法用来判断两个值是否严格相等。 Object.assign()Object.assign()方法用来将原对象的可枚举属性复制到目标对象上去。如果后面的原对象与前面的有相同的属性，则后面会覆盖前面。 1234567var target = &#123; a: 1, b: 1 &#125;;var source1 = &#123; b: 2, c: 2 &#125;;var source2 = &#123; c: 3 &#125;;Object.assign(target, source1, source2);target // &#123;a:1, b:2, c:3&#125; 常见用法： 123456789101112131415161718192021222324252627//为对象添加属性class Point &#123; constructor(x, y) &#123; Object.assign(this, &#123;x, y&#125;); &#125;&#125;//给对象添加方法Object.assign(SomeClass.prototype, &#123; someMethod(arg1, arg2) &#123; ··· &#125;, anotherMethod() &#123; ··· &#125;&#125;);//克隆对象function clone(origin) &#123; return Object.assign(&#123;&#125;, origin);&#125;//合并多个对象const merge = (target, ...sources) =&gt; Object.assign(target, ...sources);// 属性的遍历ES6一共有5种方法可以遍历对象的属性。 for…infor…in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）。 Object.keys(obj)Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。 Object.getOwnPropertyNames(obj)Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。 Object.getOwnPropertySymbols(obj)Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。 Reflect.ownKeys(obj)Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举。 以上的5种方法遍历对象的属性，都遵守同样的属性遍历的次序规则。 首先遍历所有属性名为数值的属性，按照数字排序。 其次遍历所有属性名为字符串的属性，按照生成时间排序。 最后遍历所有属性名为Symbol值的属性，按照生成时间排序。 Object.keys()Object.keys()返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历属性的键名。 123var obj = &#123; foo: 'bar', baz: 42 &#125;;Object.keys(obj)// [\"foo\", \"baz\"] Object.values()Object.values()返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历属性的键值。如果Object.values方法的参数是一个字符串，会返回各个字符组成的一个数组。 123456var obj = &#123; foo: 'bar', baz: 42 &#125;;Object.values(obj)// [\"bar\", 42]Object.values('foo')// ['f', 'o', 'o'] Object.entries()Object.entries()返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历属性的键值对数组。 123var obj = &#123; foo: 'bar', baz: 42 &#125;;Object.entries(obj)// [ [\"foo\", \"bar\"], [\"baz\", 42] ] SymbolES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。Symbol 值通过Symbol函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。Symbol函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。 12345678var s1 = Symbol('foo');var s2 = Symbol('bar');s1 // Symbol(foo)s2 // Symbol(bar)s1.toString() // \"Symbol(foo)\"s2.toString() // \"Symbol(bar)\" 作为属性名的 Symbol由于每一个 Symbol 值都是不相等的，这意味着 Symbol 值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。注意，Symbol 值作为对象属性名时，不能用点运算符。同理，在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。 12345678910111213141516171819202122var mySymbol = Symbol();// 第一种写法var a = &#123;&#125;;a[mySymbol] = 'Hello!';// 第二种写法var a = &#123; [mySymbol]: 'Hello!'&#125;;// 第三种写法var a = &#123;&#125;;Object.defineProperty(a, mySymbol, &#123; value: 'Hello!' &#125;);// 以上写法都得到同样结果a[mySymbol] // \"Hello!\"//不能用点来声明a.mySymbol = 'Hello!';a[mySymbol] // undefineda['mySymbol'] // \"Hello!\" 属性名的遍历Symbol 作为属性名，该属性不会出现在for...in、for...of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。但是，它也不是私有属性，有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名。另一个新的API，Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。 1234567891011121314151617181920212223242526var obj = &#123;&#125;;var foo = Symbol(\"foo\");Object.defineProperty(obj, foo, &#123; value: \"foobar\",&#125;);for (var i in obj) &#123; console.log(i); // 无输出&#125;Object.getOwnPropertyNames(obj)// []Object.getOwnPropertySymbols(obj)// [Symbol(foo)]let obj = &#123; [Symbol('my_key')]: 1, enum: 2, nonEnum: 3&#125;;Reflect.ownKeys(obj)// [\"enum\", \"nonEnum\", Symbol(my_key)] Set和Map数据结构SetSet数据结构类似于数组，但是其成员的值都是唯一的，没有重复值。 Set本身是一个构造函数，用来生成Set数据结构；也可以通过向构造函数中传值的方式来创建一个Set。123456789101112const s = new Set();[2, 3, 5, 4, 5, 2, 2].forEach(x =&gt; s.add(x));for (let i of s) &#123; console.log(i);&#125;// 2 3 5 4const set = new Set([1, 2, 3, 4, 4]);[...set]// [1, 2, 3, 4] 可以通过Set实现数组的去重；可以通过Array.from将一个Set\b变成数组。1234// 去除数组的重复成员[...new Set(array)]const array = Array.from(new Set(array)); Set 实例的属性和方法 size 返回Set实例的成员总数 add 添加某个值，返回Set结构本身 delete 删除某个值，返回一个boolean值，表示是否删除成功 has 返回一个boolean值，表示该实例是否拥有某个值 clear 清除所有值，没有返回值 遍历Set keys() 返回键名的遍历器 values() 返回键值的遍历器 entries() 返回键值对的遍历器 forEach() 使用回调函数遍历每个成员 需要注意的是，由于Set没有键值和键名，所以keys()和values()方法遍历的结果是一样的。 使用Set实现并交差集合运算。1234567891011121314let a = new Set([1, 2, 3]);let b = new Set([4, 3, 2]);// 并集let union = new Set([...a, ...b]);// Set &#123;1, 2, 3, 4&#125;// 交集let intersect = new Set([...a].filter(x =&gt; b.has(x)));// set &#123;2, 3&#125;// 差集let difference = new Set([...a].filter(x =&gt; !b.has(x)));// Set &#123;1&#125; MapMap是一种键值对集合，与对象不同的时，它的键名不止为字符串，可以是任何类型，包括对象。 Map构造函数的参数可以是任何具有Iterator接口的数据结构。12345678910const set = new Set([ ['foo', 1], ['bar', 2]]);const m1 = new Map(set);m1.get('foo') // 1const m2 = new Map([['baz', 3]]);const m3 = new Map(m2);m3.get('baz') // 3 实例的属性和操作方法 size 返回Map结构的成员总数 set 设置键名对应的键值，返回整个Map结构 get 读取key对应的键值，若找不到，返回undefined has 返回一个boolean值，表示某个键是否在Map中 delete 删除某个键，成功则为true，失败则为false clear clear方法清除所有成员，没有返回值 Map的遍历方法与Set结构的遍历方法一致。 Map与其他结构的转换1.Map与数组Map转数组可以直接使用扩展运算符[...]，数组转Map直接将数组丢进Map的构造函数即可。 2.Map与对象若Map的键值都为字符串，则可以转为对象。Map与对象的相互转换都是依靠遍历来进行的。 3.Map与J\bSONMap转换JSON有两种情况需要考虑，一种是键名均为字符串的，可以直接转化为对象JSON，其他情况则转化成数组JSON。1234567891011121314function strMapToJson(strMap) &#123; return JSON.stringify(strMapToObj(strMap));&#125;let myMap = new Map().set('yes', true).set('no', false);strMapToJson(myMap)// '&#123;\"yes\":true,\"no\":false&#125;'function mapToArrayJson(map) &#123; return JSON.stringify([...map]);&#125;mapToArrayJson(myMap)// '[[true,7],[&#123;\"foo\":3&#125;,[\"abc\"]]]' 对应的，JSON转Map也有两种情况。12345678910111213function jsonToStrMap(jsonStr) &#123; return objToStrMap(JSON.parse(jsonStr));&#125;jsonToStrMap('&#123;\"yes\": true, \"no\": false&#125;')// Map &#123;'yes' =&gt; true, 'no' =&gt; false&#125;function jsonToMap(jsonStr) &#123; return new Map(JSON.parse(jsonStr));&#125;jsonToMap('[[true,7],[&#123;\"foo\":3&#125;,[\"abc\"]]]')// Map &#123;true =&gt; 7, Object &#123;foo: 3&#125; =&gt; ['abc']&#125; WeakSet和WeakMapWeakSet结构与Set类似，只是WeakSet的成员只能是对象，否则会报错，并且WeakSet不可遍历。 WeakMap的性质同WeakSet。 Promise 对象Promise是用来解决异步编程的回调问题，从语法上说，Promise是一个对象，从它可以获取异步操作的消息。它有三种状态：Pending(进行中），Resolved(已完成)，Rejected(已失败)。当状态发生改变时，执行相应的函数，并且只有两种改变的可能，从Pending变成Resolved或者是从Pending变成Rejected，在状态变化后，状态不会再次发生变化。 使用方法Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从Pending变为Rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。 123456789var promise = new Promise(function(resolve, reject) &#123; // ... some code if (/* 异步操作成功 */)&#123; resolve(value); &#125; else &#123; reject(error); &#125;&#125;); Promise实例有一个then方法，该方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为Resolved时调用，第二个回调函数是Promise对象的状态变为Reject时调用。其中，第二个函数是可选的，不一定要提供。 12345promise.then(function(value) &#123; // success&#125;, function(error) &#123; // failure&#125;); 关于Promise对象封装的AJAX异步操作实例。 1234567891011121314151617181920212223242526272829var getJSON = function(url) &#123; var promise = new Promise(function(resolve, reject)&#123; var client = new XMLHttpRequest(); client.open(\"GET\", url); client.onreadystatechange = handler; client.responseType = \"json\"; client.setRequestHeader(\"Accept\", \"application/json\"); client.send(); function handler() &#123; if (this.readyState !== 4) &#123; return; &#125; if (this.status === 200) &#123; resolve(this.response); &#125; else &#123; reject(new Error(this.statusText)); &#125; &#125;; &#125;); return promise;&#125;;getJSON(\"/posts.json\").then(function(json) &#123; console.log('Contents: ' + json);&#125;, function(error) &#123; console.error('出错了', error);&#125;); resolve函数的参数除了正常的值以外，还可能是另一个Promise实例，表示异步操作的结果有可能是一个值，也有可能是另一个异步操作。下面的代码中p1的状态传递给p2，也就是说，p1的状态决定了p2的状态。如果p1的状态是Pending，那么p2的回调函数就会等待p1的状态改变；如果p1的状态已经是Resolved或者Rejected，那么p2的回调函数将会立刻执行。 12345678var p1 = new Promise(function (resolve, reject) &#123; // ...&#125;);var p2 = new Promise(function (resolve, reject) &#123; // ... resolve(p1);&#125;) Promise.prototype.then()then方法的作用是为Promise实例添加状态改变时的回调函数并返回一个新的Promise实例。前面说过，then方法的第一个参数是Resolved状态的回调函数，第二个参数（可选）是Rejected状态的回调函数。采用链式的then，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个Promise对象（即有异步操作），这时后一个回调函数，就会等待该Promise对象的状态发生变化，才会被调用。并且可以将前一个调用返回的参数传入到下一个调用中。 12345678910111213getJSON(\"/post/1.json\").then(function(post) &#123; return getJSON(post.commentURL);&#125;).then(function funcA(comments) &#123; console.log(\"Resolved: \", comments);&#125;, function funcB(err)&#123; console.log(\"Rejected: \", err);&#125;);getJSON(\"/posts.json\").then(function(json) &#123; return json.post;&#125;).then(function(post) &#123; // ...&#125;); Promise.prototype.catch()Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch语句捕获。一般来说，不要在then方法里面定义Reject状态的回调函数（即then的第二个参数），总是使用catch方法。因为这种写法可以捕获前面then方法执行中的错误，也更接近同步的写法。由于catch方法返回的是一个Promise对象，所以后面还可以接着调用。若前面没有报错，则会跳过catch方法。 12345678910111213141516var someAsyncThing = function() &#123; return new Promise(function(resolve, reject) &#123; // 下面一行会报错，因为x没有声明 resolve(x + 2); &#125;);&#125;;someAsyncThing().catch(function(error) &#123; console.log('oh no', error);&#125;).then(function() &#123; console.log('carry on');&#125;);// oh no [ReferenceError: x is not defined]// carry on Promise.all()Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例，其参数为一个数组。当多个实例的状态都为Resolved时，新的实例状态才会变成Resolved，此时多个实例的返回值组成一个数组传给新实例的回调函数。但若有某个实例的状态变成Rejected，那么新的实例状态变成Rejected。第一个状态变化的实例返回值会传给新的实例。 12345678910// 生成一个Promise对象的数组var promises = [2, 3, 5, 7, 11, 13].map(function (id) &#123; return getJSON(\"/post/\" + id + \".json\");&#125;);Promise.all(promises).then(function (posts) &#123; // ...&#125;).catch(function(reason)&#123; // ...&#125;); Promise.race()该方法同Promise.all()方法类似，不同的是只有有一个实例发生改变，新的实例状态便会改变，那个率先改变的 Promise 实例的返回值，就传递给新实例的回调函数。 Promise.resolve()Promise.resolve方法将其它对象转为Promise对象。它的参数有四种情况： 参数是一个Promise实例时，不做任何改动。 参数是具有then方法的对象，将对象转换后立即执行该then方法。 参数不是具有then方法的对象，或根本就不是对象时，转换后会使新的Promise对象的状态为Resolved，即立即执行其Resolved方法。 不带任何参数会直接返回一个Resolved状态的Promise对象。 Promise.reject()Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected。与Promise.resolve方法不同的是，Promise.reject方法的参数会原封不动的作为后续方法的参数传入。 1234567891011const thenable = &#123; then(resolve, reject) &#123; reject('出错了'); &#125;&#125;;Promise.reject(thenable).catch(e =&gt; &#123; console.log(e === thenable)&#125;)// true 附加方法done()和finally()Promise对象的回调链，不管以then方法或catch方法结尾，要是最后一个方法抛出错误，都有可能无法捕捉到（因为Promise内部的错误不会冒泡到全局）。因此，我们可以提供一个done方法，总是处于回调链的尾端，保证抛出任何可能出现的错误。 1234567Promise.prototype.done = function (onFulfilled, onRejected) &#123; this.then(onFulfilled, onRejected) .catch(function (reason) &#123; // 抛出一个全局错误 setTimeout(() =&gt; &#123; throw reason &#125;, 0); &#125;);&#125;; finally方法用于指定不管Promise对象最后状态如何，都会执行的操作。它与done方法的最大区别，它接受一个普通的回调函数作为参数，该函数不管怎样都必须执行。 1234567Promise.prototype.finally = function (callback) &#123; let P = this.constructor; return this.then( value =&gt; P.resolve(callback()).then(() =&gt; value), reason =&gt; P.resolve(callback()).then(() =&gt; &#123; throw reason &#125;) );&#125;; IteratorIterator为可遍历的数据结构提供了一个接口，以更加方便的访问数据结构中的内容。ES6中可遍历的数据结构除了Array和Object外，新增了Map和Set两种数据结构。 Iterator的遍历过程如下： 创建一个指针对象，指向当前数据结构的\b起始位置。 每一次调用一次指针对象的next()方法，将指针指向数据结构的下一个成员。 模拟next()方法代码：12345678910111213141516var it = makeIterator(['a', 'b']);it.next() // &#123; value: \"a\", done: false &#125;it.next() // &#123; value: \"b\", done: false &#125;it.next() // &#123; value: undefined, done: true &#125;function makeIterator(array) &#123; var nextIndex = 0; return &#123; next: function() &#123; return nextIndex &lt; array.length ? &#123;value: array[nextIndex++], done: false&#125; : &#123;value: undefined, done: true&#125;; &#125; &#125;;&#125; for…of…对于拥有Iterator接口的数据结构，可以使用for...of...来进行遍历操作。 相比于for...of...遍历，for\b...in...遍历存在的缺点有： for...in...会遍历原型链上的键。 for...in...可能以任意顺序遍历键名。 另外，for...of...遍历\b的为value值，而for...in...遍历的为key值。 Generator函数Gnerator函数会返回一个遍历器对象，同时每一个遍历器对象拥有一种状态，之后通过调用遍历器的next()方法来依次执行不同状态的对应的操作。 1234567function* helloWorldGenerator() &#123; yield 'hello'; yield 'world'; return 'ending';&#125;var hw = helloWorldGenerator(); Generator函数的声明需要在function后面添加*，通过里面的yield表达式来定义不同的状态，需要注意的是如果yield用在非Generator函数中会报错。 Generator函数在实例化时并不会执行，而是进入第一个状态的等待态中，这时通过调用next()方法会\b将遍历器指针后移，同时执行\b前一个等待态的方法。即yield表达式是暂停执行，而next()\b则是恢复执行。 1234567891011hw.next()// &#123; value: 'hello', done: false &#125;hw.next()// &#123; value: 'world', done: false &#125;hw.next()// &#123; value: 'ending', done: true &#125;hw.next()// &#123; value: undefined, done: true &#125; next方法的参数yield表达式本身没有返回值，或者说总是返回undefined。next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值。 123456789101112function* f() &#123; for(var i = 0; true; i++) &#123; var reset = yield i; if(reset) &#123; i = -1; &#125; &#125;&#125;var g = f();g.next() // &#123; value: 0, done: false &#125;g.next() // &#123; value: 1, done: false &#125;g.next(true) // &#123; value: 0, done: false &#125; for…of循环for...of循环可以自动遍历 Generator 函数时生成的Iterator对象，且此时不再需要调用next方法。 12345678910111213function *foo() &#123; yield 1; yield 2; yield 3; yield 4; yield 5; return 6;&#125;for (let v of foo()) &#123; console.log(v);&#125;// 1 2 3 4 5 这里需要注意，一旦next()方法的返回对象的done属性为true，for...of循环就会中止，且不包含该返回对象，所以上面代码的return语句返回的6，不包括在for...of循环之中。 Generator.prototype.return()Generator函数返回的遍历器对象，还有一个return()方法，可以返回给定的值，并且终结遍历Generator函数。如果不给定值，则会返回undefined。 1234567891011function* gen() &#123; yield 1; yield 2; yield 3;&#125;var g = gen();g.next() // &#123; value: 1, done: false &#125;g.return('foo') // &#123; value: \"foo\", done: true &#125;g.next() // &#123; value: undefined, done: true &#125; yield* 表达式在\b一个Generator函数中调用另一个Generator函数，需要使用yield *表达式。 12345678910111213141516function* foo() &#123; yield 'a'; yield 'b';&#125;function* bar() &#123; yield 'x'; foo(); yield 'y';&#125;for (let v of bar())&#123; console.log(v);&#125;// \"x\"// \"y\" async函数async函数返回一个Promise对象，可以使用then方法添加回调函数，当函数执行遇到await的时候，会等待异步操作完成，再继续执行函数体内后面的语句。 123456789async function getStockPriceByName(name) &#123; var symbol = await getStockSymbol(name); var stockPrice = await getStockPrice(symbol); return stockPrice;&#125;getStockPriceByName('goog').then(function (result) &#123; console.log(result);&#125;); async函数内部的return语句的返回值，会作为then方法回调函数的参数，若函数内部抛出异常，则会\b导致返回的Promise对象进入到rejected状态。因此在使用时，我们通常把await放在try...catch当中。 如果希望await后面的多个请求并发执行，则可以使用Promise.all()方法。 Class的用法ES6中提供了新的类写法，使用Class关键字来声明一个类。在类中有一个constructor方法，作为该类的构造方法。同时类的所有方法都定义在类的prototype属性上面，prototype对象的constructor属性，直接指向该类本身，因为在声明类的实例时会自动执行类的构造方法。 1234567891011//定义类class Point &#123; constructor(x, y) &#123; this.x = x; this.y = y; &#125; toString() &#123; return '(' + this.x + ', ' + this.y + ')'; &#125;&#125; constructor方法一个类如果没有显示定义constructor方法，则会被默认添加一个构造方法，默认方法返回实例对象，即this，也可以指定返回其他对象。 12345678class Foo &#123; constructor() &#123; return Object.create(null); &#125;&#125;new Foo() instanceof Foo// false get和set方法在类的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。 12345678910111213141516171819class MyClass &#123; constructor() &#123; // ... &#125; get prop() &#123; return 'getter'; &#125; set prop(value) &#123; console.log('setter: '+value); &#125;&#125;let inst = new MyClass();inst.prop = 123;// setter: 123inst.prop// 'getter' Class的静态方法在类的方法前面加上static关键字，可以为Class声明静态方法，该方法不会被实例继承，而是直接通过类来调用。父类的静态方法可以被子类继承。 1234567891011class Foo &#123; static classMethod() &#123; return 'hello'; &#125;&#125;Foo.classMethod() // 'hello'var foo = new Foo();foo.classMethod()// TypeError: foo.classMethod is not a function Class的继承ES6的Class可以通过extends关键字来实现继承，在子类的构造器中可以使用super()方法来调用父类的构造器，super方法也是必须被调用的，用来继承父类的this对象，子类是没有自己的this对象的。 12345678910Class ColorPoint extends Point &#123; constructor(x, y, color) &#123; super(x, y); // 调用父类的constructor(x, y) this.color = color; &#125; toString() &#123; return this.color + ' ' + super.toString(); // 调用父类的toString() &#125;&#125; Object.getPrototypeOf()这个方法可以用来获取到子类的父类。 修饰器类的修饰类的修饰器用来改变类的行为，包括为类添加属性或者方法等。 12345678910@testableclass MyTestableClass &#123; // ...&#125;function testable(target) &#123; target.isTestable = true;&#125;MyTestableClass.isTestable // true 修饰器的行为相当于下面这样。 1234567@decoratorclass A &#123;&#125;// 等同于class A &#123;&#125;A = decorator(A) || A; 通过返回一个函数的方式可以为修饰器传入参数。 12345678910111213function testable(isTestable) &#123; return function(target) &#123; target.isTestable = isTestable; &#125;&#125;@testable(true)class MyTestableClass &#123;&#125;MyTestableClass.isTestable // true@testable(false)class MyClass &#123;&#125;MyClass.isTestable // false 方法的修饰当修饰器修饰方法时，修饰函数有三个参数，一个是所要修饰的目标对象，第二个是要修饰的属性名称，第三个是属性的描述对象。当有多个修饰器的时候，修饰器的顺序是从上到下按照入栈出栈的形式执行的。另外修饰器只能修饰类中的方法，不能修饰普通的函数，因为普通函数存在函数和变量提升的问题。 123456789class Person &#123; @nonenumerable get kidCount() &#123; return this.children.length; &#125;&#125;function nonenumerable(target, name, descriptor) &#123; descriptor.enumerable = false; return descriptor;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"},{"name":"ES6","slug":"ES6","permalink":"http://helianthuswhite.cn/tags/ES6/"}]},{"title":"【2017春招】网易游戏前端一面","slug":"article-31","date":"2017-03-09T02:28:32.000Z","updated":"2019-07-02T11:57:03.760Z","comments":true,"path":"2017/03/09/article-31/","link":"","permalink":"http://helianthuswhite.cn/2017/03/09/article-31/","excerpt":"2017网易游戏前端开发面试一面题目如下：","text":"2017网易游戏前端开发面试一面题目如下： HTML DOCTYPE 标签是什么意思 实现子元素的垂直居中 什么是HTML的语义化 HTML5中的缓存是怎么实现的 如何解决前端跨域问题 JS原型链是什么 网站性能优化有哪些方式 引用CSS的link和import有什么区别","categories":[{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/categories/面试/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"},{"name":"HTML5","slug":"HTML5","permalink":"http://helianthuswhite.cn/tags/HTML5/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"},{"name":"HTML","slug":"HTML","permalink":"http://helianthuswhite.cn/tags/HTML/"},{"name":"SEO","slug":"SEO","permalink":"http://helianthuswhite.cn/tags/SEO/"}]},{"title":"JS实现时间的格式化","slug":"article-29","date":"2017-03-07T00:10:58.000Z","updated":"2019-07-02T11:57:02.548Z","comments":true,"path":"2017/03/07/article-29/","link":"","permalink":"http://helianthuswhite.cn/2017/03/07/article-29/","excerpt":"大部分时候，我们都需要显示如下格式的时间： 12017-03-07 08:10:58 //yyyy-mm-dd hh:mm:ss 但是我们却无法直接获取到这种格式的时间，所以可以通过给Date对象增加一个format方法来实现时间的格式化。","text":"大部分时候，我们都需要显示如下格式的时间： 12017-03-07 08:10:58 //yyyy-mm-dd hh:mm:ss 但是我们却无法直接获取到这种格式的时间，所以可以通过给Date对象增加一个format方法来实现时间的格式化。 dateFormat.js123456789101112131415161718192021Date.prototype.format = function(fmt) &#123; const o = &#123; \"M+\" : this.getMonth()+1, //月份 \"d+\" : this.getDate(), //日 \"h+\" : this.getHours(), //小时 \"m+\" : this.getMinutes(), //分 \"s+\" : this.getSeconds(), //秒 \"q+\" : Math.floor((this.getMonth()+3)/3), //季度 \"S\" : this.getMilliseconds() //毫秒 &#125;; if(/(y+)/.test(fmt)) &#123; fmt=fmt.replace(RegExp.$1, (this.getFullYear()+\"\").substr(4 - RegExp.$1.length)); &#125; for(let k in o) &#123; if(new RegExp(\"(\"+ k +\")\").test(fmt))&#123; fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length))); &#125; &#125; return fmt; &#125; 使用方法对一个任意格式的时间time如下使用： 1new Date(time).format('yyyy-mm-dd hh:mm:ss'); 例如： 12new Date(new Date().toLocaleString()).format('yyyy-mm-dd hh:mm:ss');new Date('July 21, 1983 01:15:00').format('yyyy-mm-dd hh:mm:ss');","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"}]},{"title":"JS数组中的map和forEach方法","slug":"article-28","date":"2017-03-07T00:10:53.000Z","updated":"2019-07-02T11:57:01.986Z","comments":true,"path":"2017/03/07/article-28/","link":"","permalink":"http://helianthuswhite.cn/2017/03/07/article-28/","excerpt":"map和forEach是JS中对数组的基本遍历方法，相比于普通的for循环，可以让代码显得更加简洁，操作也更加方便。","text":"map和forEach是JS中对数组的基本遍历方法，相比于普通的for循环，可以让代码显得更加简洁，操作也更加方便。 Array.prototype.map()map()方法创建一个新数组，其结果是该数组中的每个元素调用一个提供函数的结果。 12345array.map(callback(currentValue, index, array)&#123; //do something&#125;, this);array.map(callback[, thisArg]); callback为数组中每个元素执行的函数，该函数接收三个参数： currentValue(当前值)数组中正在处理的当前元素。 index(索引)数组中正在处理的当前元素的索引。 arrayforEach()方法正在操作的数组。 thisArg可选可选参数。当执行回调 函数时用作this的值(参考对象)。 描述map 方法会给原数组中的每个元素都按顺序调用一次 callback 函数。callback 每次执行后的返回值（包括 undefined）组合起来形成一个新数组。 callback 函数只会在有值的索引上被调用；那些从来没被赋过值或者使用 delete 删除的索引则不会被调用。 callback 函数会被自动传入三个参数：数组元素，元素索引，原数组本身。 如果 thisArg 参数有值，则每次 callback 函数被调用的时候，this 都会指向 thisArg 参数上的这个对象。如果省略了 thisArg 参数,或者赋值为 null 或 undefined，则 this 指向全局对象 。 map 不修改调用它的原数组本身（当然可以在 callback 执行时改变原数组）。 使用 map 方法处理数组时，数组元素的范围是在 callback 方法第一次调用之前就已经确定了。在 map 方法执行的过程中：原数组中新增加的元素将不会被 callback 访问到；若已经存在的元素被改变或删除了，则它们的传递到 callback 的值是 map 方法遍历到它们的那一时刻的值；而被删除的元素将不会被访问到。 Array.prototype.forEach()forEach() 方法同map() 方法的使用方法一致，不同的是该方法没有返回值，只是在callback中对数组的每一项有效值进行一次处理。注意，这里与map() 方法不同的是，不是对数组的每一个元素都执行callback，而是只对数组中含有有效值的元素执行。 那些已删除（使用delete方法等情况）或者未初始化的项将被跳过（但不包括那些值为 undefined 的项）（例如在稀疏数组上）。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"}]},{"title":"【数据结构与算法】排序算法","slug":"article-27","date":"2017-03-06T05:29:54.000Z","updated":"2019-07-02T11:57:00.673Z","comments":true,"path":"2017/03/06/article-27/","link":"","permalink":"http://helianthuswhite.cn/2017/03/06/article-27/","excerpt":"排序（Sorting) 是将一组数据按照规定顺序进行排列，其目的是为了便于查询和处理数据。字典是典型的排序结构，无论哪种字典，都要将字或词按一定的顺序排列起来，这样才能便于使用。","text":"排序（Sorting) 是将一组数据按照规定顺序进行排列，其目的是为了便于查询和处理数据。字典是典型的排序结构，无论哪种字典，都要将字或词按一定的顺序排列起来，这样才能便于使用。 气泡排序气泡排序（Bubble Sorting) 是一种最简单的排序算法。设要排序的记录存放在一个数组之中，把关键字较小的记录看成 “较轻的”，所以应该 “上浮”。从底部开始，反复的上下扫描数组。进行每遍扫描的时候，依次考察相邻的两个记录，如果它们的排序位置不对，即 “轻” 的在上面，“重” 的在下面，则将它们互换位置。第一遍扫描，使最轻的记录 “上浮” 到数组的最上面，所以在进行第二遍扫描时，不用比较最顶端的记录。一般来说，第i次的扫描不用比较第i次之前的记录。 代码实现： 12345678function BubbleSorting(array) &#123; for (var i = 0;i&lt;array.length - 1;i++) for (var j = i+1;j&lt;array.length;j++) if (array[i] &gt; array[j]) &#123; [array[j], array[i]] = [array[i], array[j]]; &#125;&#125; 双向气泡排序，通过每次遍历确定某个位置，该位置的一侧已经有序，从该位置向无序的一侧进行遍历排序。通过此算法可以减少气泡排序外层循环的次数。 代码实现： 123456789101112131415161718function DoubleBubbleSorting(array) &#123; var flag = true,i = 0,n = array.length; while(flag) &#123; flag = false; for (var j = n-i+1;j&gt;i;j--) if (array[j] &lt; array[j-1]) &#123; flag = true; [array[j], array[j-1]] = [array[j-1], array[j]]; &#125; for (var j = i+1;j&lt;=n-i+1;j++) if (array[j] &gt; array[j+1]) &#123; flag = true; [array[j], array[j+1]] = [array[j+1], array[j]]; &#125; i++; &#125;&#125; 插入排序插入排序（Insertion Sorting) 类似玩纸牌时整理手中的纸牌。把被排序的记录逐个取出，插在适当的位置。即进行第i遍整理时，前i-1个记录A[1],A[2],...,A[i-1]已经排好顺序；取出第i个记录A[i]，在整理好的序列中为A[i]找到一个合适的位置j，即A[1],A[2],...,A[j-1]的关键字都小于或等于A[i]的关键字，而A[j],...,A[i-1]的关键字都大于A[i]的关键字；将从j开始到位置i-1的记录全部都后移一步；将原来A[i]的数据插在A[j]中；于是，A[1],A[2],...,A[i]任然是排好顺序的。 代码实现： 12345678910function InsertSorting(array) &#123; for (var i = 0;i&lt;array.length;i++) &#123; var j = i; while (array[j] &gt; array[j+1]) &#123; [array[j], array[j+1]] = [array[j+1], array[j]]; j--; &#125; &#125;&#125; 选择排序选择排序（Selection Sorting) 的基本方法是从A[1],A[2],...,A[n]中选出一个关键字最小的记录，换到A[1]；第2遍，从A[2],A[3],...,A[n]中选出一个关键字最小的记录，换到A[2]；…；第i遍，从A[i],A[i+1],...,A[n]中选出一个关键字最小的记录，换到A[i]；…；重复n-1遍。 代码实现： 12345678910function SelectSorting(array) &#123; for (var i = 0;i&lt;array.length - 1;i++) &#123; var lowindex = i; for (var j = i+1;j&lt;array.length;j++) if (array[j] &lt;= array[lowindex]) lowindex = j; [array[i], array[lowindex]] = [array[lowindex], array[i]]; &#125;&#125; shell排序希尔排序（Shell Sorting）又称缩小增量法，基本思想是分组选择排序。即先取定一个整数d1&lt;n,把全部结点分成d1个组,所有距离为 d1倍数的记录放在一组中,在各组内进行直接插入排序;然 后取d2&lt;d1,重复上述分组和排序工作,直至取di=1,即所有 记录放在一个组中排序为止。 代码实现： 12345678910111213141516function ShellSorting(array) &#123; var n = array.length; for (var k = Math.floor(n / 2); k &gt;= 1; k = Math.floor(k / 2)) &#123; for (var j = k; j &lt; n ; j++) &#123; var x = array[j]; var i = j - k; while (i &gt;= 0 &amp;&amp; array[j] &lt; array[i]) &#123; array[j] = array[i]; array[i] = x; i -= k; j -= k; &#125; &#125; &#125;&#125; 快速排序归并排序堆排序基数排序","categories":[{"name":"算法","slug":"算法","permalink":"http://helianthuswhite.cn/categories/算法/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://helianthuswhite.cn/tags/算法/"}]},{"title":"MAC查看端口进程占用","slug":"article-26","date":"2017-03-04T13:42:41.000Z","updated":"2019-07-02T11:57:00.297Z","comments":true,"path":"2017/03/04/article-26/","link":"","permalink":"http://helianthuswhite.cn/2017/03/04/article-26/","excerpt":"MAC查看某个端口是否被进程占用的命令为： lsof -i tcp:port 查看之后可以获得占用进程的PID，然后使用如下命令杀死进程： kill PID","text":"MAC查看某个端口是否被进程占用的命令为： lsof -i tcp:port 查看之后可以获得占用进程的PID，然后使用如下命令杀死进程： kill PID","categories":[{"name":"后端","slug":"后端","permalink":"http://helianthuswhite.cn/categories/后端/"}],"tags":[{"name":"mac","slug":"mac","permalink":"http://helianthuswhite.cn/tags/mac/"}]},{"title":"【2017春招】写在前面","slug":"article-30","date":"2017-02-28T16:00:00.000Z","updated":"2019-07-02T11:57:03.334Z","comments":true,"path":"2017/03/01/article-30/","link":"","permalink":"http://helianthuswhite.cn/2017/03/01/article-30/","excerpt":"2017年春节刚过，各大公司的校招大战就已开启，很多公司都早早的开始了提前批的内推，想要抢到第一批最优秀的实习生。由于之前竞赛获奖的缘故，所以在联系intel的HR之后，就接到几个部门的面试电话，问了一些简单的问题，大概只要确定不是完全不会就行，情人节那天就给了offer。本来我想做前端的，但是在面前端的团队之前，firmware的Team已经给了offer,所以就不能再去前端部门了。想想也行，毕竟去intel做固件开发要比前端好一些。 虽然已经拿到了一个offer，但是还是想多投一些其它的公司，有多个选择总是好的，而且也可以积累一下面试经验。所以接下来的一两个月就开始了各种投简历——面试环节，遇到的问题不少，写下这篇文章来记录一下各个公司的面试情况。","text":"2017年春节刚过，各大公司的校招大战就已开启，很多公司都早早的开始了提前批的内推，想要抢到第一批最优秀的实习生。由于之前竞赛获奖的缘故，所以在联系intel的HR之后，就接到几个部门的面试电话，问了一些简单的问题，大概只要确定不是完全不会就行，情人节那天就给了offer。本来我想做前端的，但是在面前端的团队之前，firmware的Team已经给了offer,所以就不能再去前端部门了。想想也行，毕竟去intel做固件开发要比前端好一些。 虽然已经拿到了一个offer，但是还是想多投一些其它的公司，有多个选择总是好的，而且也可以积累一下面试经验。所以接下来的一两个月就开始了各种投简历——面试环节，遇到的问题不少，写下这篇文章来记录一下各个公司的面试情况。 【2017春招】网易游戏其中最早开始内推的公司就是网易游戏，在春节前就已经给出了内推消息和QQ群，所以很多人都早早的投了网易游戏，等待大年初八HR小姐姐们开始上班的时候筛选简历。 前端简历的筛选结果是在2月底开始的，3.1号下午面的一面，问的都是一些基础知识点，本来约好的15.00开始，结果15.15才打电话过来，可能是面试官GG比较忙，面的时候也感觉很仓促。相关的面试问题在另一篇文章中，因为刚开学也没有准备，所以没有能够都答出来，最后还是遗憾没能够通过面试。 【2017春招】腾讯AlloyTeam3.2号早上的时候看到学校就业群里有学长发了腾讯的内推消息，就投了一波简历，没想到面试消息来得这么快。中午收到短信，通知我下午四点开始面试，面试的部门是AlloyTeam。 AlloyTeam啊！！！大二的时候当时就看到了该团队的博客，还在下面留了一条言问如何能够以后加入该团队，得到的回答是学好基础课就行了，很无奈我学的并不好。咳咳，跑远了，因为根本没有准备啊，就去团队博客看了一下，发现AlloyTeam招前端写的是招JS，心想GG。果然，面试的时候基本全部是JS的问题，我这个JS的渣渣，稳挂。 【2017春招】阿里weex团队投阿里和腾讯的情况挺像的，都是面的太早了，一点准备都没有，不过跟阿里的面试官聊的挺多的，毕竟问了很多简历上的东西，还是能够侃侃而谈的。3.2号中午的时候投的阿里内推，当时想的过两天再做测试题和编程题的，可以先缓两天再面试。结果没想到的是晚上七点就接到了面试电话。OTZ 面试官是一位大姐姐，刚开始没听清她是哪个部门的，后来又问了一下，她告诉我她们以前是淘宝UED的，现在叫淘宝无线，不过她们的团队主要是负责weex的研发。所以面试就主要围绕项目来聊，然后中间会问很多问题，大部分都是移动端相关的。面试差不多了，大姐姐说本来约的四十分钟的，现在估计都五十分钟了吧，就到这里吧。挂了以后我一看时间==，竟然聊了105分钟。不过最后还是进了备胎池，可能是面试官一直在反复确认纠结吧。 【2017春招】腾讯SNG质量部之前面的AlloyTeam已经GG了，就没在意这个，所以就随便投了一下。某天接到腾讯深圳总部的电话才知道，是投的SNG的测试，就面了一波。 一面主要问了一些JS的基础知识，可能面试官对前端了解的不多，所以问的也比较简单，都答了出来，后来又聊了波项目，主要就是说说遇到的问题，然后就是问对QQ或者微信聊天做测试的话该怎么去做等等。 过了几天接到二面的约面电话，刚好凑到网易、360、腾讯模拟笔试那一天。二面的话主要聊了下项目，感觉是考察学习能力的，也问了一下对QQ或微信测试的问题，还问了对测试的看法（这个比较有意思）。结束后我问了一下，告诉我如果通过的话后面就是HR面了。 HR面的电话打来的时候我正准备上火车检票，于是就告诉她半个小时后打过来就行。HR面就在火车上进行了。感觉像是查户口一样，HR问我出来干啥，然后就被发现翘课出来找女朋友了TT。聊了大概四十分钟，中途火车上没信号还断了一次，不过HR又打了过来。 offer已经拿到，虽然是系统测试，但是还是蛮想去腾讯的，而且觉得自己现在太菜了，要学的东西还挺多，感觉去腾讯能学到不少。 【2017春招】百度地图前端百度春招开启前接到了百度地图的面试电话，以为是学长的内推，后来又接到一个百度的电话才想到这个应该是我在大街网投的。一面主要还是问一些基础，问的比较简单，感觉答的还行，最后面试官也问了我可以实习的时间和可以入职的时间。以为很快就可以等到二面，结果最后还是没有了消息。 【2017春招】百度口碑前端接到这个面试与百度地图的面试电话是在同一天，接到的第一反应是二面来的这么快？结果开始面了之后才发现不是二面，而是百度的另一个团队，问的也是以基础为主，但是相比于之前的还是要难不少，自己答的确实不够好。当我问他问题时，我问了一下他们主要使用什么技术栈，面试官好像不是特别高兴，告诉我他们框架什么的也都会用，只是在用框架之前更应该把基础掌握牢固。 面试完之后我就知道这个肯定是过不了的，但是对百度地图还是心存希望的，只是最后没了消息也是让自己备受打击，好像没有一个前端的面试能够获得二面，自己真的是菜的没救了吗？ 【2017春招】百度云计算事业部本来已经彻底放弃春招了，因为各大公司的内推都已经结束，BAT的笔试又都没有做，所以就拒了intel准备去腾讯嗨一波。结果偶然在知乎上看见百度云计算招前端工程师，评论区看到可以接受18届实习生，就投了一波简历，很快得到了答复。 邮件回复我们简历已经通过了筛选，但是面试之前需要做一个笔试，十天时间完成一个天气的WEBAPP或者一个地名选择器。很不巧的是那几天要在驾校学车，所以就没有报任何希望，加上面试滴滴被狠虐了一番，一点信心都没了。等科三考完试，离截止日期不到四天，心里想着，就当是练手吧，能完成多少是多少。最后半天时，总算把一个差不多像样的WEBAPP给提交了过去，有兴趣的同学可以去看一看——仿IOS天气预报WEBAPP。 我以为自己尽力了应该很快就会等到面试，结果一周都没有消息，又是被深深的打击了一波。但是在朋友（百度大佬）的劝说下我还是发了封邮件问问情况。很快收到了回复邮件，问我实习时间以及是否愿意接受上海实习。第二天HR打电话来约了面试时间，看来多少还是给了个机会。 在面试百度云计算之前去参加了一下新浪微博的现场面试，讲道理我感觉我答的算是挺好的吧，反正跟面试官感觉说了不少，最后告诉我我的项目很多，但是都没有沉淀，我的技术深度没有达到项目那么多。T T，直接就给挂掉了，心灰意冷，转念一想还是得感谢这个面试官，指出的问题很准确，同时也更感激手上offer了。真的是突然感觉自己是真的菜，转眼要实习了，发现自己什么都没有学好，基础很差，技术又不精，心情也很烦躁，游戏也没有任何意思了，过两天的百度面试已经想要放弃了。 该来的还是要来，在没有任何准备的情况下，我开始了百度的面试。一面听起来是个年轻的小哥，听完我的自我介绍之后告诉我我的经历蛮丰富的，我的心里却很无奈，很多面试官听完我的介绍都这样给我说过，可是往往期望也高，失望也会越大。一面的话主要也是问一些基础的知识点，关于html、css、js方面的很快就问完了，之后面试官看我是软件工程专业的，就问我是不是学过数据结构与算法、计算机网络这些课，我心里一想，GG，课本上的知识早就忘的差不多了。面试官先问了一个最简单的冒泡排序，我先把代码说了一遍，然后讲解排序流程的时候把自己给绕进去了。。。。。。因为我记得冒泡排序跟选择排序还有插入排序shell排序好像很像，万一说叉了不是拉闸。好在面试官也没为难我，让我说一下快排，这个记得还是蛮清楚的。之后计网又问了一些问题。最后问题问完，面试官告诉我二面面试官会在十到二十分钟之后联系我，听到这个太开心了我，哈哈哈，我终于也是有二面的人了。 二面的话是一个小姐姐，没有自我介绍，就开始问我一些实际场景，让我说一说实现的方法，JS方面的问的挺多的，最后让我说一下项目，我就主要说了一下那个天气预报WEBAPP的。我感觉二面答的并不够好，面试官最后也告诉我实际上我的项目经验其实并不是那么足，（听到这一句，好吧，拉闸）不过实习的话也够了。哇，真的是一句话听的我的心情是跌宕起伏的。之后面试官就告诉我今天会有经理面。 经理面聊的很轻松，经理了解了我的基本信息等情况之后就让我说说的项目经历，我就从我的第一个项目和第一个竞赛说起，一直把我去年一年的事情都说完了，我感觉自己当时说的肯定是眉飞色舞、神采激昂。不过经理问了一下我们学校的情况，让我觉得难道他是我的老学长？经理面很短，只有二十四分钟，最后经理说面试结束，他马上会把材料整理一下发给HR，等HR联系我就行。总算是有了结果。 写在最后在拿到百度云计算的offer之后，我的整个春招找实习的过程也就结束了，最后还是确定了百度，终于可以做自己喜欢的工作了。 在这段时间，自己经历了很多面试，也经历了很多失败，发现了自己的渺小，也知道了找工作的艰辛，明白了很多道理，最后能够收获一份自己满意的offer也是很开心很幸运。 如何评价自己接触到的面试官和HR，总得来说，所有公司的HR基本上都是很不错的小姐姐，人很好声音也都好听，哈哈哈，可能是因为职业的缘故吧。至于面试官，也许是我非BAT面的比较少吧，还是觉得BAT的面试官比其他的面试官要好一些，包括问题的拿捏，说话的语气，表达的清晰等。 intel的面试官也算是一直和我联系的导师吧，我差点因为他去了intel，每次给他邮件问问题时回复我都很及时，最后给他发了封邮件告诉他我不去了，他先是立马回了我一份邮件，第二天就打电话问我原因，当我说工资有点低可能付不起房租时，他告诉我他可以先借我钱（哇，顿时好感度上升）。我觉得通过他对一个实习生的态度可以知道自己去一个公司能发挥自己多大的价值以及学到多少东西。 百度云计算的面试官我觉得比较好的一点就是，每次我回答错误的时候对方会告诉我错了，之后会告诉我如何找到正确答案或者是告诉我怎么做是一种更好的做法。这一点我觉得真的蛮重要的，因为好多次面试有些问题都不知道自己说的是不是正确的，而这种情况下一般都会自认为自己说的还行。所以我总是觉得自己答的还行，可以最后就是没有过。 【2017春招】就到这里啦，期待接下来的实习生活，期待明年更好的自己~","categories":[{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/categories/面试/"}],"tags":[{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"}]},{"title":"We Can't Stop","slug":"music-11","date":"2017-01-24T16:11:14.000Z","updated":"2019-07-02T11:57:12.530Z","comments":true,"path":"2017/01/25/music-11/","link":"","permalink":"http://helianthuswhite.cn/2017/01/25/music-11/","excerpt":"Can’t you see it’s we who own the night?","text":"Can’t you see it’s we who own the night? We Can’t Stop - Boyce Avenue / Bea MillerRed cups and sweaty bodies everywhere举杯欢庆，激情热舞Hands in the air like we don’t care挥动双臂，毫不在乎‘Cause we came to have so much fun now欢乐无限，乐趣无穷Bet somebody here might be the one now寻觅派对达人，调动派对气氛If you’re not ready to go home你若无归家之心Can I get a “Hell, no!”? (Hell no)就尽情狂欢吧‘Cause we’re gonna go all night今夜派对，风光无限‘Til we see the sunlight, alright彻夜狂欢，直至天明So la da di da di准备好，啦答嘀答嘀We like to party我们爱派对Dancing you and me你我共舞Doing whatever we want随心所欲This is our house,This is our rules我们的地盘，我们做主And we can’t stop我们无法停止And we won’t stop我们难以停止Can’t you see it’s we who own the night?夜晚属于我们Can’t you see it’s we who ‘bout that life?生活由我们缔造And we can’t stop我们无法停止And we won’t stop我们难以停止We run things, things don’t run we是我们主宰世界，不是世界主宰我们Don’t take nothing from nobody做真实的自我，不受他人拖累Yeah, yeah耶，耶To my homegirls just tryin’ to live it up, shaking it the like they can’t they enough….家乡姑娘，身材火辣，激情热舞，如临夜店Remember only god can judge us.记住！只有上帝有权力评判我们Forget the haters, somebody loves ya.忘却仇人，我们会得到真爱Memories made ‘til the nights through.彻夜狂欢，记忆终止Surrounded by the ones who love you.被爱你的人包围We all so turned up here, getting turned up…yeah!!我们欢呼雀跃，啊，无比开心欢腾So… La, di, da, di, di…准备好，啦答嘀答嘀We like to party.我们爱派对Dancing you and me, doing whatever we want…和我动起来，尽情狂欢And, this is our house. And, this is our rules.我们的地盘，我们做主And we can’t stop.我们无法停止And we won’t stop.我们难以停止Can’t you see it’s we who own the night?夜晚属于我们Can’t you see it we who about “that life?”生活由我们缔造And we can’t stop我们无法停止And we won’t stop我们难以停止We run things. Things don’t run we.是我们主宰世界，不是世界主宰我们Don’t take nothing’ from nobody做真实的自我，不受他人拖累Yeah! Yeah!耶！耶！It’s our party. We can do what we want to我们的派对，随心所欲It’s our house. We can LOVE who want to!我们的派对，爱无界限It’s our song. We can sing if want to.我们的歌谣，毫无限制It’s my mouth. I can SAY what I want to!我们的嘴巴，话无阻挡ohhhh.. Ohhhh ohhhhh ohhh噢噢噢噢噢And we can’t stop.我们无法停止And we won’t stop.我们难以停止Can’t you see it’s we who own the night?夜晚属于我们Can’t you see it we who about “that life?”生活由我们缔造And we can’t stop我们无法停止And we won’t stop我们难以停止We run things. Things don’t run we.是我们主宰世界，不是世界主宰我们Don’t take nothing’ from nobody做真实的自我，不受他人拖累Yeah! Yeah!耶！耶！It’s our party. We can do what we want to我们的派对，随心所欲It’s our house. We can LOVE who want to!我们的派对，爱无界限Can’t you see it’s we who own the night?夜晚属于我们Can’t you see it we who about “that life?”生活由我们缔造It’s our song. We can sing if want to.我们的歌谣，毫无限制It’s my mouth. I can SAY what I want to!我们的嘴巴，话无阻挡We run things. Thins don’t run we是我们主宰世界，不是世界主宰我们Cause we can’t stop…因为我们无法停止···","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"Dream It Possible","slug":"music-10","date":"2017-01-22T13:46:11.000Z","updated":"2019-07-02T11:57:12.430Z","comments":true,"path":"2017/01/22/music-10/","link":"","permalink":"http://helianthuswhite.cn/2017/01/22/music-10/","excerpt":"And we’ll dream it possible","text":"And we’ll dream it possible Dream It Possible - DelaceyI will run, I will climb, I will soar我奔跑，我攀爬，我会飞翔I’m undefeated永不言败Jumping out of my skin, pull the chord跳出我的皮肤，拨弄琴弦Yeah I believe it哦，我相信。The past, is everything we were don’t make us who we are往昔，逝去的光阴不会决定现在So I’ll dream, until I make it real, and all I see is stars所以我们梦想，直到变成真，看到满天星光Its not until you fall that you fly不怕跌倒，所以飞翔When your dreams come alive you’re unstoppable当你的梦想成真，你是不可阻挡Take a shot, chase the sun, find the beautiful挥着翅膀，追逐太阳，寻找美丽We will glow in the dark turning dust to gold在黑暗中闪耀点石成金And we’ll dream it possible我们会梦想成真I will chase, I will reach, I will fly我追逐，我奔驰，我要飞翔Until I’m breaking, until I’m breaking直到坠落，直到崩溃Out of my cage, like a bird in the night走出我的囚笼，像在黑夜里的莺I know I’m changing, I know I’m changing我知道我在变化，在蜕变In, into something big, better than before变成无比强大，从未有过And if it takes, takes a thousand lives如果需要牺牲，需要无数的生命Then It’s worth fighting for那值得去奋斗Its not until you fall that you fly不怕跌倒，所以飞翔When your dreams come alive you’re unstoppable当你的梦想成真，你是不可阻挡Take a shot, chase the sun, find the beautiful挥着翅膀，追逐太阳，寻找美丽We will glow in the dark turning dust to gold在黑暗中闪耀点石成金And we’ll dream it possible我们会梦想成真From the bottom to the top从山谷到巅峰We’re sparking wild fire’s我们正在迸发野火Never quit and never stop永不放弃，永不停止The rest of our lives点燃未来From the bottom to the top从山谷到巅峰We’re sparking wild fire’s我们正在迸发野火Never quit and never stop永不放弃，永不停止Its not until you fall that you fly不怕跌倒，所以飞翔When your dreams come alive you’re unstoppable当你的梦想成真，你是不可阻挡Take a shot, chase the sun, find the beautiful挥着翅膀，追逐太阳，寻找美We will glow in the dark turning dust to gold在黑暗中闪耀点石成金And we’ll dream it possible possible我们会梦想成真","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"合久必婚","slug":"music-9","date":"2017-01-22T13:46:07.000Z","updated":"2019-07-02T11:57:15.240Z","comments":true,"path":"2017/01/22/music-9/","link":"","permalink":"http://helianthuswhite.cn/2017/01/22/music-9/","excerpt":"明日若无法遇见更好，我答应最早来到","text":"明日若无法遇见更好，我答应最早来到 合久必婚 - 李克勤 / 陈苑淇作曲 : 伍乐城作词 : 林夕我大概未算学懂保护别人才无名无份以致我们拖拉至今令你未放心全程做我一世情人彷佛还未够相衬大家忙多么漂亮理由爱不够只不过是借口凭我爱你这么久亦没信心走出教堂没理由为何未够好 请听我预告就算跟你未游尽花都可给你的都会做到并未求什么唯一志愿想你安好谁能及我好 我也想知道就算这相貌从未讨好总可当跟椅垫共老任地厚天高回家也都想得到拥抱除非这感情你不希罕太易得到大家忙多么漂亮理由爱不够只不过是借口凭我爱你这么久亦没信心走出教堂没理由为何未够好 请听我预告就算跟你未游尽花都可给你的都会做到并未求什么唯一志愿想你安好为何没结婚 我也想知道就算这相貌从未讨好总可当跟椅垫共老任地厚天高回家也都想得到拥抱除非这感情你不希罕太易得到明日若然你要我抱一抱明日若无法遇见更好我答应最早来到","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"她","slug":"music-8","date":"2017-01-22T13:46:02.000Z","updated":"2019-07-02T11:57:15.029Z","comments":true,"path":"2017/01/22/music-8/","link":"","permalink":"http://helianthuswhite.cn/2017/01/22/music-8/","excerpt":"她，留着他最爱的长发","text":"她，留着他最爱的长发 她 - 周海媚作曲 : 刘佳作词 : 王韵韵她 的秋千荡了半个年华她 的眼角依然闪着火花她 说话的样子嘻嘻哈哈热闹的那么风雅她 留着他最爱的长发她 不再爱玫瑰花她 后来一笑而过代替翻涌的喧哗 oh 她…..她的眼泪看不见却依然洁白无暇对伤的痛的选择笑着装聋作哑而她 让人心疼的傻瓜岁月请留住她她的疯狂太温柔却故作潇洒对爱的恨的选择放却夜夜梦话等她 深夜聊到了喉咙沙哑把她的心带回家她 的手中捧着流逝的沙她 的裙摆露着小小脚丫她 听了世上最美的谎话就随着他去天涯她 被时间陌生了脸颊她 熟练对应牵挂她 后来轻描淡写看似深刻的伤疤 哦她她的眼泪看不见却依然洁白无暇对伤的痛的选择笑着装聋作哑而她 让人心疼的傻瓜岁月请留住她她的疯狂太温柔却故作潇洒对爱的恨的选择放却夜夜梦话等她 深夜聊到了喉咙沙哑把她的心带回家她的眼泪看不见却依然洁白无暇对伤的痛的选择笑着装聋作哑而她 让人心疼的傻瓜岁月请留住她她的疯狂太温柔却故作潇洒对爱的恨的选择放却夜夜梦话等她 深夜聊到了喉咙沙哑把她的心带回家","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"小半","slug":"music-7","date":"2017-01-22T13:45:57.000Z","updated":"2019-07-02T11:57:14.827Z","comments":true,"path":"2017/01/22/music-7/","link":"","permalink":"http://helianthuswhite.cn/2017/01/22/music-7/","excerpt":"纵容着、任性的、随意的、放肆的、轻易的，将所有欢脱倾翻","text":"纵容着、任性的、随意的、放肆的、轻易的，将所有欢脱倾翻 小半 - 陈粒作曲 : 陈粒作词 : 涂玲子不敢回看左顾右盼不自然的暗自喜欢偷偷搭讪总没完地坐立难安试探说晚安 多空泛又心酸低头呢喃对你的偏爱太过于明目张胆在原地打转的小丑伤心不断空空留遗憾 多难堪又为难释然 慵懒 尽欢 时间风干后你与我再无关没答案 怎么办 看不惯自我欺瞒纵容着 喜欢的 讨厌的 宠溺的 厌倦的一个个慢慢黯淡纵容着 任性的 随意的 放肆的 轻易的将所有欢脱倾翻不应该 太心软 不大胆 太死板 不果断玩弄着肆无忌惮不应该 舍弃了 死心了 放手了 断念了无可奈何不耐烦不算灯火阑珊我的心借了你的光是明是暗笑自己情绪太泛滥形只影单自嘲成习惯 多敏感又难缠低头呢喃对你的偏爱太过于明目张胆在原地打转的小丑伤心不断空空留遗憾 多难堪又为难释然 慵懒 尽欢 时间风干后你与我再无关没答案 怎么办 看不惯自我欺瞒纵容着 喜欢的 讨厌的 宠溺的 厌倦的一个个慢慢黯淡纵容着 任性的 随意的 放肆的 轻易的将所有欢脱倾翻不应该 太心软 不大胆 太死板 不果断玩弄着肆无忌惮不应该 舍弃了 死心了 放手了 断念了无可奈何不耐烦任由着 你躲闪 我追赶 你走散 我呼喊是谁在泛泛而谈任由着 你来了 你笑了 你走了 不看我与理所当然分摊不明白 残存的 没用的 多余的 不必的破烂也在手紧攥不明白 谁赧然 谁无端 谁古板 谁极端无辜不知所以然纵容着 喜欢的 讨厌的 宠溺的 厌倦的（不管）一个个慢慢黯淡纵容着 任性的 随意的 放肆的 轻易的将所有欢脱倾翻不应该 太心软 不大胆 太死板 不果断玩弄着肆无忌惮不应该 舍弃了 死心了 放手了 断念了无可奈何不耐烦","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"We Don't Talk Anymore","slug":"music-6","date":"2017-01-22T13:45:51.000Z","updated":"2019-07-02T11:57:14.734Z","comments":true,"path":"2017/01/22/music-6/","link":"","permalink":"http://helianthuswhite.cn/2017/01/22/music-6/","excerpt":"We don’t talk anymore, we don’t talk anymore","text":"We don’t talk anymore, we don’t talk anymore We Don’t Talk Anymore - Charlie Puth / Selena GomezWe don’t talk anymore, we don’t talk anymore沉默 我们之间只剩无边的沉默We don’t talk anymore, like we used to do再也回不到从前的耳语亲昵 只剩沉默We don’t love anymore爱也在这样的沉默里消耗殆尽What was all of it for?这一切究竟是何原因Oh, we don’t talk anymore, like we used to do无话不说的从前已成回忆 一切都被沉默代替I just heard you found the one you’ve been looking听闻你已找到心仪的他You’ve been looking for而他也如你所愿的爱你I wish I would have known that wasn’t me真希望我能早点明白你要的不是我Cause even after all this time I still wonder分开了那么久我却不知为何Why I can’t move on还迟迟不肯释怀不肯放手Just the way you did so easily而你却那么轻易地说走就走Don’t wanna know不想去想What kind of dress you’re wearing tonight今夜的你会为他怎样精心装扮自己If he’s holding onto you so tight也不想去想他会否如我从前那般The way I did before将你紧拥在怀里I overdosed我还沉浸于过去久久不能平息Should’ve known your love was a game早该明白你我之间不过游戏Now I can’t get you out of my brain那样也不至于让我至今都忘不了你Oh, it’s such a shame真让我无言又无奈We don’t talk anymore, we don’t talk anymore找不到问候的理由 我们之间只剩无边的沉默We don’t talk anymore, like we used to do也再回不到从前的亲昵耳语 只剩沉默We don’t love anymore爱也在这样的沉默里消耗殆尽What was all of it for?这一切究竟是何原因Oh, we don’t talk anymore, like we used to do无话不说的从前已成回忆 一切都被沉默代替I just hope you’re lying next to somebody希望此时的你正轻靠在某个温暖的怀抱里Who knows how to love you like me希望他也能像我那般懂得爱你There must be a good reason that you’re gone那我也能以此为由安慰自己说你离开我也会幸福开心Every now and then I think you当我每次想起你Might want me to come show up at your door都会希望能重回到在你楼下等你的场景But I’m just too afraid that I’ll be wrong但也许我也只是自己骗自己Don’t wanna know不想去想If you’re looking into her eyes此时的他是否正深情凝望着你的眼睛If she’s holding onto you so tight the way I did before也不想去想他会否如我从前那般将你紧拥在怀里I overdosed我还沉浸于过去久久不能平息Should’ve known your love was a game早该明白你我之间不过游戏Now I can’t get you out of my brain那样也不至于让我至今都忘不了你Oh, it’s such a shame真让我无言又无奈That we don’t talk anymore (We don’t, we don’t)我们无话不说的从前已成回忆We don’t talk anymore (We don’t, we don’t)一切都被沉默代替We don’t talk anymore, like we used to do再也回不到从前的耳语亲昵 一切都已被沉默代替We don’t love anymore (We don’t, we don’t)爱也在这样的沉默里消耗殆尽What was all of it for? (We don’t, we don’t)这一切究竟是何原因Oh, we don’t talk anymore, like we used to do无话不说的从前再也回不去Like we used to do一切都已被沉默代替Don’t wanna know不想去想What kind of dress you’re wearing tonight今夜的你会为他怎样精心装扮自己If he’s giving it to you just right也不想去想他会否如我从前那般The way I did before将你紧拥在怀里I overdosed我还沉浸于过去久久不能平息Should’ve known your love was a game早该明白你我之间不过游戏Now I can’t get you out of my brain那样也不至于让我至今都忘不了你Oh, it’s such a shame真让我无言又无奈That we don’t talk anymore (We don’t, we don’t)一切怎会被沉默代替We don’t talk anymore (We don’t, we don’t)无话不说的从前怎会成为回忆We don’t talk anymore, like we used to do再也回不到从前的耳语亲昵 一切都已被沉默代替We don’t love anymore (We don’t, we don’t)爱也在这样的沉默里消耗殆尽What was all of it for? (We don’t, we don’t)这一切究竟是何原因Oh, we don’t talk anymore, like we used to do无话不说的从前已成回忆 一切都已被沉默代替We don’t talk anymore再也回不到从前的耳语亲昵What kind of dress you’re wearing tonight (Oh)我还会去想今夜的你会为他怎样精心装扮自己If he’s holding onto you so tight (Oh)会去想他会否如我从前那般The way I did before将你紧拥在怀里We don’t talk anymore (I overdosed)一切都已被沉默代替 我还沉浸于过去久久不能平息Should’ve known your love was a game (Oh)早该明白你我之间不过游戏Now I can’t get you out of my brain (Woah)那样也不至于让我至今都忘不了你Oh, it’s such a shame真让我无言又无奈We don’t talk anymore美好从前都已被沉默取代","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"来日方长","slug":"music-5","date":"2017-01-22T13:45:46.000Z","updated":"2019-07-02T11:57:14.579Z","comments":true,"path":"2017/01/22/music-5/","link":"","permalink":"http://helianthuswhite.cn/2017/01/22/music-5/","excerpt":"我说爱，或许是来日方长的事情","text":"我说爱，或许是来日方长的事情 来日方长 - 薛之谦/黄龄作曲 : 常石磊/袁娅维作词 : 常石磊有些东西你要是不提 我不去回忆惯了借叹气喘息再试着碰碰运气总要过下去总是妄想借半生流离 换某人怜悯只怪那输得起的遇不上看得起的找谁对不起我说爱 或许是来日方长的事情等不到人 也至少盼着自己爱 终究是来日方长的秘密答案 不过是场 好觉睡醒有些东西你要是不提 我不去回忆只怪那输得起的遇不上看得起的找谁对不起我说爱 或许是来日方长的事情等不到人 也至少盼着自己爱 终究是来日方长的秘密答案 不过是场 好觉睡醒","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"借我","slug":"music-4","date":"2017-01-22T13:45:38.000Z","updated":"2019-07-02T11:57:14.428Z","comments":true,"path":"2017/01/22/music-4/","link":"","permalink":"http://helianthuswhite.cn/2017/01/22/music-4/","excerpt":"静看光阴荏苒，借我喑哑无言","text":"静看光阴荏苒，借我喑哑无言 借我 - 谢春花作词 : 锦屏作曲 : 谢知非借我十年借我亡命天涯的勇敢借我说得出口的旦旦誓言借我孤绝如初见借我不惧碾压的鲜活借我生猛与莽撞不问明天借我一束光照亮黯淡借我笑颜灿烂如春天借我杀死庸碌的情怀借我纵容的悲怆与哭喊借我怦然心动如往昔借我安适的清晨与傍晚静看光阴荏苒借我喑哑无言不管不顾不问不说也不念静看光阴荏苒借我喑哑无言不管不顾不问不说也不念借我十年借我亡命天涯的勇敢借我说得出口的旦旦誓言借我孤绝如初见借我不惧碾压的鲜活借我生猛与莽撞不问明天借我一束光照亮黯淡借我笑颜灿烂如春天借我杀死庸碌的情怀借我纵容的悲怆与哭喊借我怦然心动如往昔借我安适的清晨与傍晚静看光阴荏苒借我喑哑无言不管不顾不问不说也不念静看光阴荏苒借我喑哑无言不管不顾不问不说也不念","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"童话镇","slug":"music-3","date":"2017-01-22T13:40:42.000Z","updated":"2019-07-02T11:57:14.229Z","comments":true,"path":"2017/01/22/music-3/","link":"","permalink":"http://helianthuswhite.cn/2017/01/22/music-3/","excerpt":"总有一条蜿蜒在童话镇里梦幻的河，分隔了理想分隔现实","text":"总有一条蜿蜒在童话镇里梦幻的河，分隔了理想分隔现实 童话镇 - 陈一发作曲 : 暗杠作词 : 竹君听说白雪公主在逃跑小红帽在担心大灰狼听说疯帽喜欢爱丽丝丑小鸭会变成白天鹅听说彼得潘总长不大杰克他有竖琴和魔法听说森林里有糖果屋灰姑娘丢了心爱的玻璃鞋只有睿智的河水知道白雪是因为贪玩跑出了城堡小红帽有件抑制自己变成狼的大红袍总有一条蜿蜒在童话镇里七彩的河沾染魔法的乖张气息却又在爱里曲折川流不息扬起水花又卷入一帘时光入水让所有很久很久以前都走到幸福结局的时刻听说睡美人被埋藏小人鱼在眺望金殿堂听说阿波罗变成金乌草原有奔跑的剑齿虎听说匹诺曹总说着谎侏儒怪拥有宝石满箱听说悬崖有颗长生树红鞋子不知疲倦地在跳舞只有睿智的河水知道睡美人逃避了生活的煎熬小人鱼把阳光抹成眼影投进泡沫的怀抱总有一条蜿蜒在童话镇里七彩的河沾染魔法的乖张气息却又在爱里曲折川流不息扬起水花又卷入一帘时光入水让所有很久很久以前都走到幸福结局的时刻总有一条蜿蜒在童话镇里梦幻的河分隔了理想分隔现实又在前方的山口汇合川流不息扬起水花又卷入一帘时光入水让所有很久很久以前都走到幸福结局的时刻 又陌生啊啊啊啊","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"全世界谁倾听你","slug":"music-2","date":"2017-01-22T13:33:07.000Z","updated":"2019-07-02T11:57:13.937Z","comments":true,"path":"2017/01/22/music-2/","link":"","permalink":"http://helianthuswhite.cn/2017/01/22/music-2/","excerpt":"从你的全世界路过，把全盛的我都活过","text":"从你的全世界路过，把全盛的我都活过 全世界谁倾听你 - 林宥嘉作词：李焯雄作曲：梁翘柏多希望有一个像你的人但黄昏跟清晨无法相认雨停了 歌停了 风继续雨伞又遗落原地多希望你就是最后的人但年轮和青春不忍相认一盏灯 一座城 找一人一路的颠沛流离从你的全世界路过把全盛的我都活过请往前走 不必回头在终点等你的人会是我多希望你就是最后的人但年轮和青春不忍相认一盏灯 一座城 找一人一路的颠沛流离从你的全世界路过把全盛的爱都活过我始终没说不增加你负荷最后等你的人是我从你的全世界路过把全盛的我都活过请往前走 不必回头在终点等你的人会是我你爱默默倾听全世界全世界谁倾听你一朵一朵 一首一首的曾经从你的全世界路过把全盛的爱都活过我始终没说不增加你负荷最后等你的人是我从你的全世界路过把全盛的我都活过请往前走 不必回头在终点等你的人会是我请往前走 不必回头在终点等你的人会是我","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"解忧杂货店","slug":"book-2","date":"2017-01-22T12:54:19.000Z","updated":"2019-07-02T11:57:12.055Z","comments":true,"path":"2017/01/22/book-2/","link":"","permalink":"http://helianthuswhite.cn/2017/01/22/book-2/","excerpt":"不是推理小说，却更扣人心弦","text":"不是推理小说，却更扣人心弦 这本书是东野圭吾的作品，虽然不是推理小说，却隐隐约约的添加了推理的意味。 几个不同的烦恼，几位不同的主角，貌似没有关联的故事，却又有着千丝万缕的联系。 过去，现在，还是未来，在思考逻辑的时间之外，充满了最善意的温情。","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"书籍","slug":"书籍","permalink":"http://helianthuswhite.cn/tags/书籍/"}]},{"title":"Merry Christmas","slug":"story-6","date":"2016-12-27T10:39:36.000Z","updated":"2019-07-02T11:57:16.112Z","comments":true,"path":"2016/12/27/story-6/","link":"","permalink":"http://helianthuswhite.cn/2016/12/27/story-6/","excerpt":"圣诞快乐","text":"圣诞快乐 PART ONE你就像烟火的美丽，那么美丽 二呆从来没有和女生一起度过圣诞节，所以丫头说让二呆陪她一起过圣诞的时候，二呆走些小紧张，小激动又有点小兴奋。 二呆跑到镇上的网吧，想上网查一下看有没有比较合适的攻略。他想给丫头过一个浪漫又难忘的圣诞节。 “如何陪女生过一个难忘的圣诞节”，二呆把这句话输入到搜索框，一系列的结果出现在屏幕上。 “带她去宾馆，然后嘿嘿嘿”，“用尽十八种姿势让她上天”，“到野外去，在星光下让她感受你的火热”……“呸！都是些啥几把玩意儿”二呆骂了几句，虽然二呆已经十八了，但是他觉得丫头作为他的女神，就像池塘里的那一朵白莲，出淤泥而不染，那种下流的事情他是肯定不会做的。对，可能是因为生活在农村的关系，二呆的思想还是比较保守，自从他知道了男女之事之后，在他脑海里就给扣上了下流的帽子。 二呆失望的出了网吧，往门口的台阶一坐，掏出一根烟点着，抽一口仰望天空吐出一个淡淡的眼圈。二呆觉得自己此时就像一个忧郁的王子，过个圣诞节而已，咋就这么难呢。 “砰——”一根爆竹在二呆旁边炸开，吓得二呆烟都掉到了地上，忧郁的王子一下子变成了暴躁的王子。“卧槽，哪个傻逼呢”二呆冲着旁边正在玩爆竹的几个小屁孩吼去。突然，有一丝灵感蹿进了二呆的脑子里。“哎呀卧槽，你们真他妈是天才！”二呆突然想到可以给丫头来一场浪漫的烟花表演，这能不浪漫，这能不难忘？ 可是问题来了，二呆没有那么多钱买烟花。他向好友二狗求助，虽然二狗也没有钱，但是他给二呆提供了一条线索——在镇子东边有一个处理过期和劣质烟花的工厂。 二呆跑到镇子东边如愿以偿的以十分便宜的价格买到了一大堆的烟花。他把它们悄悄的藏在了稻场，那里是用来打麦子和稻谷的，比较空旷，正适合放烟花。现在万事俱备，只需要等待圣诞之夜的到来就好了。 圣诞节很快就到了，在等待的这几天二呆每天都生活在担忧与兴奋的夹界之中。一方面他总是担心自己藏的烟花会被那些贪玩的小鬼头们发现，所以他每天都要去检查一下那些烟花是否还完好；另一方面一想到丫头被自己的烟花表演感动到泪光闪烁的样子，二呆就可以兴奋好久。 圣诞节这天，白天的时候二呆和丫头就跟平时约会一样，上午在镇子里面转一圈，中午一起吃饭，然后下午去网吧打游戏。 “这破游戏有什么意思啊，一点都不好玩”在丫头第八次被抓死的时候，丫头气的把耳机往键盘上一砸。“哎呀，生啥气勒，等老子后期起来干死他们”二呆还在全神贯注地操作着。“玩个屁啊，我让你陪我过圣诞节，你倒好，让我来陪你打游戏”丫头生气的按下了二呆座位上的关机键，走出了网吧。 二呆也急忙下了机追了出去。显然，跟游戏相比，还是妹子比较重要。 “哎呀，生啥子气嘛，今天不是还没过完嘛，急个啥”二呆连忙跟丫头解释道。“真的么，那你想陪我怎么过”丫头别过头去，还有些生气。“你放心，我肯定会让你过一个难忘的圣诞节”二呆拍拍胸脯说到。“那我就勉为其难的再相信你一次” 二呆带着丫头在镇里又转了一圈，然后吃了个饭，七点半，虽然还有点早，但是天已经黑了，可以开始行动了。 于是二呆就拉着丫头到了稻场。晚上的稻场黑漆漆的，丫头的手捏的紧了点，她不知道二呆究竟要干什么。不过当她看到二呆搬出一箱箱的烟花的时候，她好像明白了点什么，心里也轻松下来了，“那个呆子，还能想到这种东西啊”。 二呆很快就把烟花摆好了，并用了一根长长的引线把所有烟花桶的引子连到了一起。“准备好了么，丫头”，二呆冲丫头露出一口大黄牙。“嗯”，丫头轻轻的应了一声，羞涩的就像一位发春的少女。 二呆点燃了引线，跑到了丫头旁边。他们手牵着手，等待烟花绽开的美好瞬间。 “咻～～嘭”，烟花成功的上天并且绽放，小小的火药在空中炸开，燃烧，带着金属的光芒，在空中形成一朵朵绚丽的花朵，整个稻场都被照的亮堂了起来。 “哇～”，丫头痴痴的望着天空，带着小姑娘的欢悦和少女的腮红。二呆看着丫头，此时的丫头可爱极了，红红的脸蛋就像是平安夜的苹果，让人好像咬一口。看来这个烟花表演果然很有效果啊，自己真是太牛逼了，二呆想着。 “丫头”，二呆轻轻地叫了丫头一声。“嗯”，丫头也轻轻地应着。二呆含情脉脉地看着丫头，丫头羞涩地低下了头，时不时地抬眼瞧一瞧二呆。太浪漫了，二呆脑中想着，他觉得自己现在就像言情小说中的男主角，在感动了女主角后来个浪漫的接吻，简直完美。 “我爱——”，在二呆“你”字还没有说出来的时候，“嘭 ——”一声巨响在他们耳边炸开，有一桶烟花没有上天就炸开了！ 二呆和丫头赶紧睁开眼，结果发现出事了！倒不是原地炸开的烟花伤着人了，而是弹开的烟花落到了稻场边缘的谷堆上面，干燥的谷堆一下子就燃了起来。二呆有些慌了，他也没料到会发生这样的事情。可是事情已经发生，怎么办，跑啊！这是二呆回过神来的第一反应。 二呆拉着丫头快速的跑向镇子的中间，身后稻场的火苗已经蹿的很高了，镇上的大人们都急急忙忙地向那边跑去，准备灭火。路过二呆和丫头时，他们故作镇定的样子并没有太过引起人们的注意。“呼 ——”在已经离稻场很远的地方，二呆终于松了口气。“怎么办啊，呆子，不会发现我们吧”，丫头有些担心的语气。“没啥事的，咱俩刚才跑过来，没有人注意到咱们，不是么”，二呆心里也没有谱，但是还是要先安慰丫头的。 二呆送丫头回家，两个人一路上默默地走着，谁都没有说话。 第二天，二呆在睡梦中被揪着耳朵揪醒。事情很快就查了出来，最近买那些劣质烟花的只有二呆。那天，似乎整栋楼都听到了二呆的惨叫声。 不过隔日，二呆还是鼻青脸肿的去上课了。在周围同学的玩笑声中，二呆长长地叹了口气 —— 倒底还真它妈的是个难忘的圣诞节。 PART TWOMerry Merry Christmas，Lonely Lonely Christmas 12月24日，平安夜。 当余凡从网吧出来的时候，外面已经开始下起了雪。走的时候网管告诉他今天晚上有活动，可是他并不在意，出来上网只是不想闷在寝室罢了，可是在网吧打了几个小时游戏后却也再感觉不到任何的乐趣。余凡想随便走一走，就像平时心情不好的时候一样，吹一吹风就会好受一些。 不知不觉余凡走到了市中心的商业街，作为最繁华的街道，平安夜里自然是人山人海，只是和平日里不同的是，今夜的男女比例有些均衡，来来往往的不是男男女女，而是男女男女。虽然已经快要零点，但是街道两旁的商店丝毫没有想要打烊的心思，一家家的音响放着最热闹的音乐来吸引更多的顾客。沿路的小贩也不惧寒冷，售卖着各种有趣的小玩意儿，他们也像在场的大部分人一样盼望着圣诞节的到来，只是他们的目的更单纯而已。身旁的情侣们要么手牵着手，要么互相拥搂，分享着最开心的笑容。相比之下，一个人彳亍着的余凡反而要显得更加显眼。可是，他才不会在意那么多。余凡掏出了耳机戴上，仿佛周围的喧闹与他无关。 再往前走就到了江边，夜晚的江面一片漆黑，就像天空的一部分一直绵延到了脚下。宽广的江面总会有很强烈的风，掠过岸边的树梢，留下一阵沙沙的响声。这里人很少，余凡找到一个长凳坐下了。 还有半小时圣诞节就来了，余凡看了看时间，虽然脸上没有任何表情，可是心里还是有些难受，不然也不会在深夜一人跑到这里来。 他与她已经分手256天，可是他还是很想她。分手那天余凡很平静，就像与她平常对话的那样，余凡答应了她的分手请求，后来余凡也尽力的过着平静的生活，好像分手并没有对他造成任何影响。可是只有余凡知道，他放不下她，他还很想她。 高考填报志愿那天，她告诉他，她想陪他一起看最美的雪。所以他在最后不顾家人的反对，改掉了自己的志愿，最后成功的来到了这个城市。可是她却没有被录取上，留在了家乡的城市。结果出来的那天，她很害怕，不敢告诉他这个消息，结果他只是摸了摸她的头，说 “ 傻丫头，没事的，只是异地恋而已，放假的时候不是还可以见面的嘛。”她终于破涕为笑，在他的怀里蹭了蹭，“ 嗯，那我圣诞节的时候去找你吧。”“ 嗯，好。” 余凡把她搂的更紧了点。 圣诞节的时候，她如约来找他，从南到北，从艳阳到寒雪。他在车站接她的时候，她红了眼眶，他把她紧紧抱在怀里。 他带她走过这条繁华的街道，就像大部分的情侣一样，他牵着她，在拥挤的人潮中，他怕一不小心就把她丢了。那天的雪很大，温度也是格外的低，可是他们并不觉得冷，因为彼此带来的温暖敌过世间所有的寒冰。 在教堂前面，她告诉他：他日等君来，君若不来，我便不嫁；他回应道：他日盼汝至，汝若不至，我便不娶。这是他们之间最动听的情话，却也是最年轻的承诺。 他们在街中央的西餐厅吃饭，为了衬托圣诞节的气氛，餐厅也做了额外的装潢。他们在情侣区，摇晃的蜡烛照亮了昏暗的房间，也照亮了她的脸庞，由室外进入室内，她的脸颊有些泛红，他笑着望着她：真好看。她的脸颊更红了，好像多了些少女的羞涩。 从餐厅出来，他带她去吃冰棍，虽然不知道为什么，只知道这里冰棍很出名，每次他来这里都会吃。“ 呐，给你的 ”，他从人群中挤出来，递给她一支草莓口味的。“ 竟然不冷啊，好甜 ”，她有些兴奋，就像吃到糖的小朋友。他轻轻地揉了揉她的头发，就像从前座位前后她揉他一样。 再往前的江畔广场此时已经没有了广场舞的喧闹，只剩下售卖孔明灯的小贩和成双入对的情侣们。“ 我们也去放孔明灯吧 ”，她提议道。“ 嗯 ”。他们选好了灯，拿了笔，她在上面写着：天长地久。他们互相写下对方的名字，他的名字清秀整齐，她的名字歪三扭四。他们点了火，等着灯罩慢慢鼓起，一点点的上浮，最后松开了手。据说，孔明灯飞的越高越远，上面的愿望就越容易实现。忽然，一阵风吹过，孔明灯摇摇晃晃，他们抬头望着有些紧张。灯最终没有翻过来，只是挂在了树枝上，当所有人都在担心燃烧的灯罩是否会将干枯的树枝点燃时，她有些慌乱，抓紧了他的手，不知所措。终究是让看热闹的人们失望了，孔明灯的燃料慢慢耗尽，从树枝上掉了下来。她把头埋在他的怀里，他抱紧了她，告诉她，没事的，不用太相信这个啊。 零点过后，他们一起去看电影，故事是很俗的爱情片，可是大概是因为圣诞节的缘故吧，现场还是有很多女生哭成一片。她没有哭，只是靠在了他的肩上。出来后，她告诉他，银幕的爱情很感人，他告诉她，现实的爱情都很简单。 他送她回酒店，他转身要走，她叫住了他。“ 你要走啊，不上去坐坐么 ”。“ 好啊，既然你都这么说了，嘿嘿嘿~ ”，他做出一脸坏笑。“ 哼，看你一脸坏笑，才不让你上去呢。你快回去吧 ”。“ 知道啦，你也早点休息吧 ”，他知道她是开玩笑，所以也没有感到懊恼。他准备离开，她踮起脚尖，在他脸上亲亲一吻，然后跑进了电梯。 “ 铛——，铛——，铛——。。。。。。”，商业街中心的大钟敲了十二下，又一年的圣诞节到来。余凡抬起了头，长吁了一口气，灯光下的脸庞隐隐有着泪水划过的痕迹。他想要站起来，由于长时间寒冷导致的麻木让他差点摔倒。他活动了一下身子，让自己尽量能够自由行动。“ 过去了，都过去吧 ”，余凡告诉自己。他撇撇嘴，笑了笑，最后给她发了条短信 —— “ 圣诞快乐。” 发完之后，余凡拉黑了通讯录号码，曾经熟记于心的数字，以后再也不会提起了吧。 余凡沿着江边往回走，背后圣诞的喧闹越来越远，耳机里回荡着的还是Eason那熟悉的歌声： Merry Merry christmasLonely Lonely Christmas写了卡片能寄给谁心碎得像街上的纸屑谁来陪我过这圣诞节…… PART THREE为你我用了半年的积蓄，漂洋过海的来看你 坐在火车上，耀川望着窗外，一片片被雪覆盖的田地从他的眼中掠过。火车里的温度越来越高了，窗户渐渐凝起了水珠，向下流过。 “ 小伙子，看着水 ”，待得旁人提醒，耀川才发现淌下的水珠已经沾湿了自己的衣袖。“ 谢谢 ”，耀川一边道谢一边拿出纸巾把窗边沿的水珠吸食干净。 耀川此行要翘两天的课，坐十六个小时的硬座，走过一千七百多公里，去见一个人。确切地说，是一个网友。耀川不明白自己为什么会这么冲动，可能真的像他说的那样，他喜欢她，耀川喜欢一个素未谋面的网友。 耀川自己都没有想过会以这样的方式去喜欢一个人。 那天，室友说要给耀川介绍一个对象，耀川摇摇头，“ 还是算了吧，现在这样挺好的。”可是第二天，耀川想了想，还是向室友要了那个女生的联系方式，应该是看出来女孩挺漂亮吧，男生第一眼都会只看外表。 今天是十二月二十三，距离他们认识两个月整。明天是圣诞节，所以耀川想要去找她。耀川没有经历过网恋，之前的异地恋只维持了不到两个月，连追女生也是头一遭。 耀川觉得那个女孩和他很像，在很多方面，所以耀川动心了，他想要追她，合不合适在一起才知道。他向好友求助如何追女孩子，好友推荐给他一些攻略，他看了觉得一点都不靠谱，与其说是追女孩子的攻略不如说是约炮攻略。所以，这条路，还得耀川自己摸索。 耀川准备了一个小本本，上面记录着她说的话，她的喜好，因为耀川怕哪天忘了之前她说的什么让她生气。她说她笑点比较低，他会找一些有趣的图片给她看。她说她喜欢小猫和哈士奇，所以他会找到萌萌的小猫照片或是蠢蠢的哈士奇照片。她说她不怎么会聊天，所以他会绞尽脑汁的去想一些话题，因为他也不会聊天。她说她不喜欢自己的话是最后一句，所以无论她说什么他都会回复，哪怕只是一个标点。她说她吃糖的时候心情会变好，所以他给她买了很多糖果，希望她在生气的时候吃糖果让心情变好。她说她不喜欢幼稚的男生，所以他会尽量去表现的成熟，可是又忍不住想要给她发一些可爱的表情。她说她作业很多不一定写的完，所以他会放下自己要复习的考试，帮她完成她的任务。她说……耀川不会追女生，但是他对人很好，所以他知道自己应该对喜欢的人更好。 已经过了零点了，可是车厢里的人们仍没有要休息的迹象。长途硬座车厢总是挤满了人，站着的、坐着的、还有蹲着的，人一多就变得嘈杂，与车厢里的暖气一起哄的人头疼。耀川不喜欢人多嘈杂的地方，就像她也不喜欢一样。 耀川打开背包，伸手摸了一下里面的东西，还好，没有化掉。那是准备给她的礼物。耀川很早就已经买了，因为怕双十二的时候物流太慢不能及时收到。在走之前，耀川还在纠结该穿什么衣服过去，虽说只是见网友，但毕竟心里也是有着美好的愿望。最终他还是穿上了最近才买的，他打算过年穿的那套衣服，第一次见面当然要留一个好的印象啊，他这样告诉自己。 耀川实在有些撑不住了，他头倚着窗，就这样睡了。他醒来的时候已经中午了，坐着睡毕竟是睡不好的，他夜里醒来好多次，现在也觉得浑身酸痛。刚才广播里播报，列车晚点一个半小时，这对他来说更增几分煎熬。 “ 下一站就到啦 ”，耀川告诉她，有点兴奋，掺杂着激动，更少不了紧张。“ 那我去接你吧 ”，她回复。“ 哎呀，不用啦，而且人家一路坐车蓬头垢面的怎么好意思见你 ”，耀川假设过这种情况发生，所以提前就准备好了回答。可是过了一会儿，他又有点后悔了，他想要早点见到她。而且他觉得，相比于完美的自己，他更愿意她接受不完美的自己。 最终他们还是没有在火车站见着面，不过这对已经抵达这座城市的耀川来说并没有太大的影响。耀川打了车前往提前预定好的宾馆。简单收拾一下又洗个澡之后，他又打车到他们约定的见面地点，现在是下午四点半，比计划晚了两个小时。 耀川没有感觉太意外，她给他的感觉与隔着网络一样，也许比想象中的矮一点，现在的他可以很轻松的摸到她的头。她带耀川去吃饭，填饱肚子之后天色已经有点晚了，原定的上网计划只能提前了。因为她想，所以计划里必须有这个。倒不是耀川不喜欢陪她上网，只是他觉得约会应该做点更浪漫的事。从网吧出来十点多，他把她送回家。第一次见面，他觉得应该没有给她留下什么不好的印象。 第二天，不幸的是，雾霾和感冒打乱了耀川的计划，不是耀川感冒，而是她，只是耀川不想让她感冒加重。她带着他吃了她很爱的花甲粉，不过她说没有她们学校的好吃。吃完饭后她带他去看她的学校，因为耀川一直觉得她的学校很漂亮，所以他想去看一看。已经放假的校园剩不下多少人，风也有些大，吹得两人将手缩在各自的口袋。她给他讲，那排红色的楼是她们的寝室；路中间的时钟据说需要五百万；湖中间的小岛有鹿和孔雀；夏天的时候湖里会有很多的鱼和蝌蚪……终于上了公交车，耀川才觉得暖和了点。他觉得她应该会觉得更冷，所以他不想再带她在室外逛了，他看了一下他的计划，室内活动只有电影和上网。“ 现在我们去哪啊 ”，她问他。“ 要不我们回去玩那个密室吧 ”，他想起来中午吃饭的时候路过看到一家密室，她说她没有玩过，想要试一下。 两个人玩密室有些吃力，即使耀川觉得自己算是个推理达人，一个小时时间两人最终没能解开第三个谜题。不过有意思的是中间的一个问题的答案是需要两个人手拉手才能完成，耀川拉着她的手，有点凉，这是他的感受。那家密室还有另一个让耀川觉得比较棒的事情就是，玩密室后可以去另一家私人影吧看电影，这样就又解决了一个找不到去哪里玩的难题。 影吧的大厅有一只猫，挺可爱的，耀川和她都挺喜欢。在等空房间的空闲就靠着这只猫来打发两个人的时间。猫咪可能有些饿了，一直在找他们中午买的小蛋糕，找不到就咬耀川的手指，不用力，就像撒娇要糖的小朋友。耀川拿出手机想要拍一下猫咪，顺便偷偷拍一下她，不过连拍了两张，效果都不是特别理想。后来他们选了一张恐怖片，就像很多爱看恐怖片的女孩子一样，她也很喜欢，可是又不敢看，所以在看的时候总是偷偷的偏过头或者捂着眼。 从影吧出来到了吃晚饭的时间，他们随便吃了点小吃。“ 接下来干嘛啊 ”，还是一样的问题。已经看过电影了，再看不合适，找个咖啡厅坐着聊聊天吧，两个都不爱说话的人也聊不了什么，出去逛街吧，太冷了还容易让她生病加重，想来想去，耀川最终还是决定跟她去网吧。因为是圣诞节，所以耀川没有提醒她时间，两个人玩到了过零点才下机。 两个人从网吧出来，街道上已经没有多少人了，虽然没有什么话可以说，可是两个人还是走了挺久。“ 要不我送你到下个路口吧，已经太晚了，也不能送你太远 ”，她说。“ 这样啊，那我还是送你回家吧，太晚了我不太放心啊 ”，耀川这样回到，只是为了能够多陪她走一段路。短短的一段路程，耀川却觉得走了好久，终于把她送到了小区门口，两人道了别。“ 我到家了，你走到哪里了 ”，她发来消息。“ 就是走到我们折返的那个路口 ”。“ 从我家可以看到那里，你开下手电筒，我试试能不能看到 ”。耀川找了半天没有找到手电筒在哪，只能开了录像的闪光，在十字路口的中央挥舞着手臂。“ 看到啦，快点回去吧 ”。“ 嗯，早点休息，晚安 ”。“ 晚安 ”。“ ~ ”。耀川回到宾馆，明天就要回去了，该好好想一想明天的计划。 早上的时候她告诉他，她发烧了。而且，外面下起了雨。这是耀川最不想看到的结果。“ 你起来了告诉我，我带你去打针 ”，耀川给她发了条消息，她没有回，应该是睡着了。耀川想，在宾馆待着也是没事，所以就去前台退了房。 耀川要先去买一把伞，在结账的时候看到柜台前有她喜欢的阿尔卑斯糖。她喜欢阿尔卑斯原味和草莓味的，软糖喜欢巧克力味的，耀川这样想到，就要了两条阿尔卑斯原味的硬糖，两条草莓味的和两条巧克力味的软糖。出了店，一手撑着伞，一手提着糖耀川不知道往哪走。这时，他想起来昨天她提到的玫瑰谷，那是一家蛋糕店，他想吃蛋糕了，他想她也应该想吃蛋糕了。 靠着导航，走了大概半个小时，耀川终于找到了玫瑰谷的所在。店面不大，图片上的应该是总店。他很快在里面转了一圈，最终挑了一盒抹茶蛋糕、一盒泡芙和一个玛奇朵，店员包好后递给他，他小心翼翼的和之前的糖放在一个袋子里。 从玫瑰谷到她家步行大概有一个小时的路程，他没有坐车，因为他觉得她醒来可能还要挺久。雨已经挺小了，只是风还很大，耀川裹紧了衣服，这样可以让自己暖和一点。 已经中午了，她还没有回消息，下午的车不算晚，所以耀川需要在中午过一点就得往车站走。耀川觉得今天应该不能再见到她了，他走进了她家小区旁的超市，进去买了点东西，把蛋糕和糖放在了柜台，叮嘱收银员会有人来取。“ 我走了 ”，他给她发了条消息，她还是没有回。 在公交已经走了一半的路程时，她回了消息，“ 我睡过了 ”。“ 嗯，那你记得去打针 ”，耀川有点失望，可能是因为没有在走之前见着她最后一面。 在车站等车的时候是最无聊的，车站人很多，耀川没有地方坐，只能靠在墙上。他回想着这两天的情景，她对他还算满意吧，他想着，可是却因为他导致她发烧了。耀川突然意识到这个问题，她之前是告诉过他她感冒了的，可是他却还是要她陪他出来。耀川越想越觉得不安，他看了看时间，离发车还有一个小时。“ 你现在能起来么，我送你去医院 ”，来回打车四十分钟，二十分钟带她去医院，时间应该来得及吧，耀川在心里算着。“ 没事啊，小病而已，你不是要上车了嘛 ”。“ 来得及的，而且车肯定会晚点的 ”。“ 我起来还要很久的，而且我爸会带我去的，不用担心 ”。“ 嗯，那好吧 ”，耀川已经出了车站，看来带她去打针确实是不太可能了。 耀川戴上了耳机，静静地等待着火车的到来。","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/tags/故事/"}]},{"title":"岛上书店","slug":"book-1","date":"2016-12-12T05:46:28.000Z","updated":"2019-07-02T11:57:11.922Z","comments":true,"path":"2016/12/12/book-1/","link":"","permalink":"http://helianthuswhite.cn/2016/12/12/book-1/","excerpt":"没有谁是一座孤岛","text":"没有谁是一座孤岛 没有谁是一座孤岛，每本书都是一个世界。 我们读书而后知道我们不孤单。我们读书，因为我们孤单，我们读书，然后就不孤单。我们并不孤单。 我们不全是长篇小说，也不全是短篇故事。最后的最后，我们成为一部人生作品集。","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"书籍","slug":"书籍","permalink":"http://helianthuswhite.cn/tags/书籍/"}]},{"title":"CSS中的定位","slug":"article-25","date":"2016-12-12T01:56:30.000Z","updated":"2019-07-02T11:57:00.067Z","comments":true,"path":"2016/12/12/article-25/","link":"","permalink":"http://helianthuswhite.cn/2016/12/12/article-25/","excerpt":"CSS中的定位机制CSS 有三种基本的定位机制：文档流、浮动和绝对定位。 文档流即元素本身的默认定位方式，所有的html标签按照块级元素从上到下，行内元素从左到右的方式正常排列。 浮动定位会使元素脱离正常的文档流，可以将其理解为浮动在正常文档流的上方，所以对文档流中的其他元素来说，浮动元素相当于不存在。当浮动元素遇到包含框或者另一个浮动框的边框时，将会停止。 绝对定位是使元素在文档流中相对于任何非static定位的父元素的定位，也是常用来控制元素定位的一种方式。","text":"CSS中的定位机制CSS 有三种基本的定位机制：文档流、浮动和绝对定位。 文档流即元素本身的默认定位方式，所有的html标签按照块级元素从上到下，行内元素从左到右的方式正常排列。 浮动定位会使元素脱离正常的文档流，可以将其理解为浮动在正常文档流的上方，所以对文档流中的其他元素来说，浮动元素相当于不存在。当浮动元素遇到包含框或者另一个浮动框的边框时，将会停止。 绝对定位是使元素在文档流中相对于任何非static定位的父元素的定位，也是常用来控制元素定位的一种方式。 CSS中的position属性static定位元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。该属性为元素的默认position属性值。 示例： 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=\"text/css\"&gt; .father &#123; position: static; &#125; .son1 &#123; position: static; &#125; .son2 &#123; position: static; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"father\"&gt; &lt;div class=\"son1\" style=\"background: red;width: 200px;height: 200px;\"&gt;块1&lt;/div&gt; &lt;div class=\"son2\" style=\"background: blue;width: 200px;height: 200px;\"&gt;块2&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; relative定位元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。相对于元素原来的正常文档流进行偏移。 示例： 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=\"text/css\"&gt; .father &#123; position: static; &#125; .son1 &#123; position: relative; left: 100px; &#125; .son2 &#123; position: static; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"father\"&gt; &lt;div class=\"son1\" style=\"background: red;width: 200px;height: 200px;\"&gt;块1&lt;/div&gt; &lt;div class=\"son2\" style=\"background: blue;width: 200px;height: 200px;\"&gt;块2&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; absolute定位元素框从文档流完全删除，并相对于其包含块定位，也就是任何非static定位的父元素的定位。元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。 示例一： 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=\"text/css\"&gt; .father &#123; position: static; left: 100px; &#125; .son1 &#123; position: absolute; left: 100px; &#125; .son2 &#123; position: static; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"father\"&gt; &lt;div class=\"son1\" style=\"background: red;width: 200px;height: 200px;\"&gt;块1&lt;/div&gt; &lt;div class=\"son2\" style=\"background: blue;width: 200px;height: 200px;\"&gt;块2&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 示例二： 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=\"text/css\"&gt; .father &#123; position: relative; left: 100px; &#125; .son1 &#123; position: absolute; left: 100px; &#125; .son2 &#123; position: static; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"father\"&gt; &lt;div class=\"son1\" style=\"background: red;width: 200px;height: 200px;\"&gt;块1&lt;/div&gt; &lt;div class=\"son2\" style=\"background: blue;width: 200px;height: 200px;\"&gt;块2&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 示例三： 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=\"text/css\"&gt; .father &#123; position: relative; left: 100px; &#125; .son1 &#123; position: absolute; left: 100px; &#125; .son2 &#123; position: absolute; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"father\"&gt; &lt;div class=\"son1\" style=\"background: red;width: 200px;height: 200px;\"&gt;块1&lt;/div&gt; &lt;div class=\"son2\" style=\"background: blue;width: 200px;height: 200px;\"&gt;块2&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 示例四： 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=\"text/css\"&gt; .father &#123; position: absolute; left: 100px; &#125; .son1 &#123; position: absolute; left: 100px; &#125; .son2 &#123; position: static; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"father\"&gt; &lt;div class=\"son1\" style=\"background: red;width: 200px;height: 200px;\"&gt;块1&lt;/div&gt; &lt;div class=\"son2\" style=\"background: blue;width: 200px;height: 200px;\"&gt;块2&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 示例五： 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=\"text/css\"&gt; .father &#123; position: fixed; left: 100px; &#125; .son1 &#123; position: absolute; left: 100px; &#125; .son2 &#123; position: static; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"father\"&gt; &lt;div class=\"son1\" style=\"background: red;width: 200px;height: 200px;\"&gt;块1&lt;/div&gt; &lt;div class=\"son2\" style=\"background: blue;width: 200px;height: 200px;\"&gt;块2&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; fixed定位元素框的表现类似于将position设置为absolute，不过其包含块是视窗本身。 示例： 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=\"text/css\"&gt; .father &#123; position: relative; top: 100px; &#125; .son1 &#123; position: fixed; left: 100px; &#125; .son2 &#123; position: static; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"father\"&gt; &lt;div class=\"son1\" style=\"background: red;width: 200px;height: 200px;\"&gt;块1&lt;/div&gt; &lt;div class=\"son2\" style=\"background: blue;width: 200px;height: 200px;\"&gt;块2&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"}]},{"title":"冰城","slug":"story-4","date":"2016-11-28T03:16:01.000Z","updated":"2019-07-02T11:57:16.014Z","comments":true,"path":"2016/11/28/story-4/","link":"","permalink":"http://helianthuswhite.cn/2016/11/28/story-4/","excerpt":"找一个人相陪，找一颗心相随","text":"找一个人相陪，找一颗心相随 冬已至，雪将飘 愿得一人陪我疯闹 在这美丽的冰城 把那寒冰都融化了 与你在古老的中央大街嬉笑 大声欢笑让别人都知道 看街旁美丽的灯光闪耀 吃着美味的马迭尔冰棍 很冷，你却还想要 牵着你的手怕你丢掉 带你到索菲亚教堂 为思念的爱人祈祷 然后我们坐在广场的长凳 看看喷泉可好 从大街的一头寻找 把这里的饰品店都逛掉 希望能够找到 一样能够与你般配的宝 渐渐的，等黎明破晓 为你准备温暖的早餐 听你温柔的说一声，早 带你来到防洪纪念塔 拍一张照 然后去斯大林公园 听听音乐，逗逗小鸟 等到船家开始工作了 我们可以去买两张船票 越过松花江时 在宽阔的江面远眺 寒风有点冷，我可以借你怀抱 下了船我们就到了太阳岛 周围有树木环抱 里面有人们开心的笑 我想找一个安静的地方 和你聊聊天就好 这里的风景甚是美妙 在离开时不要觉得时间太少 以后若有机会 我会带你再走一道 希望那时你不会轻易把我拒掉 地球环绕，夜幕会到 来时的船只换了装貌 彩灯张结，霓虹闪耀 美丽的一幕幕不要看的呆掉 后面还有，更美的没到 天气会更加寒冷了 窗外的寒风奔驰呼啸 请你不要害怕 因为你有我的怀抱 我们可以到最高的龙塔 看万里的疆土冰封 听高空的气流咆哮 偷偷把手伸出外套 感受到高处不胜寒的真奥 静候能工巧匠们的创造 将厚厚的冰块 变成各种各样的奇妙 在冰雪大世界里 穿越冰冻的城堡 陪你放肆的玩闹 听解说员的介绍 摸摸看能不能感受到 稍微累了，冻了 我们可以去室内看看舞蹈 只是在温暖的怀抱 你不可以想要睡觉 分开的日子会到 不要觉得难过了 虽然我们还没有一起细细观察雪花 虽然我们还没有一起开心的打过雪仗 虽然我们还没有一起堆起一个可爱雪人 虽然我们还没有一起穿着冰刀在冰面舞蹈 不过，没关系 你离开的时候 我会将未完成的事情做到 我会做一片永不融化的雪花送给你 我会把和小伙伴打雪仗的画面放给你 我会堆起一个独一无二的大雪人照给你 我会穿着冰刀在光滑的冰面上舞一支给你 所以，请不要难过 等来年，你来到 我会陪你再走一遭","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/tags/故事/"}]},{"title":"不为谁而作的歌","slug":"music-1","date":"2016-11-28T03:08:27.000Z","updated":"2019-07-02T11:57:12.338Z","comments":true,"path":"2016/11/28/music-1/","link":"","permalink":"http://helianthuswhite.cn/2016/11/28/music-1/","excerpt":"梦为努力浇了水，爱在背后往前推","text":"梦为努力浇了水，爱在背后往前推 不为谁而作的歌 - 林俊杰词：林秋离曲：林俊杰原谅我这一首不为谁而作的歌感觉上仿佛窗外的夜色曾经有那一刻回头竟然认不得需要从记忆再摸索的人和他们关心的 的地方和那些走过的请等一等梦为努力浇了水爱在背后往前推当我抬起头儿才发觉我是不是忘了谁累到整夜不能睡夜色哪里都是美一定有个人她躲过避过闪过瞒过她是谁她是谁原谅我这一首不为谁而作的歌感觉上仿佛窗外的夜色曾经有那一刻回头竟然认不得需要从记忆再摸索的人和他们关心的 的地方和那些走过的梦为努力浇了水爱在背后往前推当我抬起头儿才发觉我是不是忘了谁累到整夜不能睡夜色哪里都是美一定有个人她躲过避过闪过瞒过她是谁她是谁也许在真实面对自己才不顾一切去探究当初我害怕面对梦为努力浇了水爱在背后往前推当我抬起头儿才发觉我是不是忘了谁累到整夜不能睡夜色哪里都是美一定有个她躲过避过闪过瞒过她是谁她是谁她是谁","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://helianthuswhite.cn/tags/音乐/"}]},{"title":"俗不可耐的故事","slug":"story-2","date":"2016-11-25T14:23:17.000Z","updated":"2019-07-02T11:57:15.873Z","comments":true,"path":"2016/11/25/story-2/","link":"","permalink":"http://helianthuswhite.cn/2016/11/25/story-2/","excerpt":"谢谢你，曾来过","text":"谢谢你，曾来过 余凡寝室熄灯之后，室友都躺着床上刷手机。就像往常一样在看完一篇故事之后，我会检查一下手机上的各个通讯软件，没准会有遗漏的消息呢。 “ 嗯？这么晚了，她还没睡么？ ”我点开了她的QQ窗口，上面显示wifi在线。我在纠结要不要打个招呼。 她叫徐子瑜，是我的大学同学。但是我们不同班，只是高中在同一个学校，她在七班，我在二班，我们互相却从来没有过印象。我们认识是因为大一时候的聚会，大学里比较流行这个，一个省的，一个高中的，一个班的，各种聚会，只不过我们是在高中同学聚会中认识的。我是那次聚会的负责人，因此认识了很多人，她是其中一个，漂亮，安静。 “ 嘿！ ” 我给她打了声招呼。“ n(≧▽≦)n ” 她每次都会发一个萌萌的表情，她是个可爱的女孩子。“ 这么晚了还没睡么 ”“ 在补作业呢 ”“ 嗯 ” 我突然不知道该跟她聊些什么了。 我第一次找她聊天的时候是我上一段恋情结束一个多月。那一个月我就像是一个忧伤的诗人，整日里发一些感慨的打油诗，期待着前女友会因此而回来。一个月后，想想日子还是要过的，我这么优秀的男生都不要，以后就等着后悔吧。于是，我想要找一个新的妹子。子瑜挺好的，只是我还不喜欢她，但是我会喜欢她的吧。 “ 你还记得大一的时候么，我们刚认识的时候 ”“ 啊？ ” 她对我突如其来的问话感到有些惊讶。 大一寒假的时候我们聊天算是最频繁的了，每天互相分享着有趣的事情，每天互相道个早安晚安，那个时候每天好像都挺开心的。我觉得我已经快要忘了前女友，我觉得我快要喜欢上这个可爱的女生。 某天晚上，我从梦里醒来。梦中之前的那个她哭着找她的 “小凡凡”，她一个又一个的问班上的同学，我去哪儿了。我就在她的面前啊，可是她却怎么也看不到我，最后她急的坐在地上哭泣，最后我急的从梦中惊醒。我还是放不下她呵！我缩在被窝里，一张张翻看我和她之前的照片，不知道什么时候睡着了。 第二天中午醒来的时候，发现QQ上新增好几条消息。我和子瑜每天早上七点互道早安，今天却没有回她，她有些担心，连发了好几条消息。我连忙给她回了个早安，顺便补上一句，不好意思睡过头了。她发个可爱的表情，你没事就好啦，都中午了，快起床吧~我想了想昨天的梦，苦笑了一下，都过去了吧，我现在有子瑜不是挺好的么。 “ 听到这里你是不是觉得我很讨厌？ ” 我把最初的想法都向子瑜坦白了。她没有说话，但是我知道她也没有睡觉。 事情好像进展的都挺顺利，刚上大学的少男少女都按耐不住青春期被家长老师扼杀的情愫，尤其是重点大学的 “乖宝宝们”。开学之后的第一个周末，我决定跟子瑜约会，我叫她周六下午一起去看电影，她同意了。在计划实施的前一天晚上，我在群里向一群老哥们炫耀自己的脱单计划，你们这群老光棍不行啊，前段时间还嘲笑我失恋了，看哥明天再给你们领个对象回来。这个老司机群里瞬间就炸了，大家纷纷向我咨询详细情况。然而在我慷慨激昂的讲述完我的心路历程的时候，群里都沉默了。“ 你这样不行啊老铁 ” 终于有人发声了。“ 就是就是，你这不喜欢人家就祸害人家小姑娘干啥呢 ”“ 你这行为不做好，我不认你这个预言家 ”“ 没发现你咋还有这渣男思想呢 ”。。。。。。结果好像和我预想的不太一样啊，这群老哥们不顶我怎么还怼我呢。然后，我就被各位老哥教育了一通，总之，都说我这个做法是不对的。 晚上躺在床上，我想了很多乱七八糟的事情，最后想到自己现在变成这样，是太不应该了把。不喜欢别人，为什么要跟别人在一起呢？只是为了满足自己的私心？可是最后却是伤害了一位好姑娘呵。 第二天，我爽约了。“ 你今天是不是挺忙的啊，我等了你好久的，你下次再这样我就不理你了￣へ￣ ”“ 嗯，不好意思啊 ”“ 好啦，没事的，晚安啦~ ”“ 晚安 ”子瑜没有继续追问我爽约的原因，但是她肯定挺难过吧。 “ 你知道么，那天我本来是有课的，但是我逃了那一节课。 ” 子瑜突然插话。“ 对不起 ” 现在的我也不知道该说些什么好。她没有接话，气氛有些尴尬，但是既然话已经说出了，那就都说完吧。 那次之后，我就开始渐渐的疏远子瑜了，我觉得我不应该去祸害一个好姑娘，不是么。刚开始，我和她都有些不适应，但是时间久了，也都习惯了吧。当我和她已经很久不联系的时候，我写了一百零六篇日记，十个月里，我想了之前的那个她一百零六次。 在不和子瑜联系后，我发现我想前女友的次数更多了，每次想她的时候我会把自己的思念写在日记里，我们的回忆，我们的点点滴滴，十个月，我写了一百零六篇日记。 可能是我之前爱的不够深，从某一时刻，日记断了，之后再也没有连上。我还是把之前的她给放下了。 “ 她真幸福 ” 子瑜发来四个字。 在之后的一段时间里，我感到莫名的轻松，不再有任何感情的负担，也不会再去想某个人。一个人沉迷学习，无法自拔。 那天是照例刷完最后一道物理题，我稍作休息，拿起手机刷了会儿空间。“ 好想死，别问我为什么。 ” ————子瑜我突然看到子瑜发了这么一条动态。“ 你怎么了？ ” 我在聊天窗口翻了好久找到了子瑜的头像。“ ( ⊙ o ⊙ )啊！没事啦，就是肚子疼。。。。。。” 子瑜很快回复了消息，有点小惊讶。“ 好吧，那我陪你聊聊天吧，分散一下注意力应该会好一点 ”“ (⊙v⊙)嗯，好哒~ ”我不知道自己怎么鬼使神差的说要陪子瑜聊天，可能只是我不愿意看见她难受吧。 我陪她聊了一下午，后来她说她好多了，要去吃饭。“ 谢谢你。 ” ————子瑜她更新了自己的动态，我默默地点了个赞，收拾了一下自己的书包也准备去吃饭了。 后来我总是隔三差五的就会找子瑜聊天，因为跟她聊天我的心情会很好啊。室友说：如果你的手机里有一个会让你秒回消息的特别关心，那说明你喜欢她。我觉得我可能是喜欢上子瑜了。 “ 。 ” 子瑜回复了一个句号。 于是我尝试着去追一下这个女孩。她应该对我有好感吧？我这样想，但是却又不确定，因为之前和她聊天的时候，她会主动找我，而现在，每次聊天都是我发起的。“ 明天你有时间么，要不要一起去看电影啊 ” 我鼓起勇气发了这么一句话，因为之前的事情，我怕她会拒绝。“ 嗯，我看一下 ” “ 你真幸运~ 刚好我明天没有课 ”我没想到她这么轻易的就答应了我。晚上躺在床上，翻来覆去睡不安稳，想着明天应该有哪些活动。 事情没有我想的那么复杂，我们一起去看了一场电影，然后又一起吃饭，最后我送她回宿舍，就是这么简单，别的什么都没有发生。那天她穿着白色的裙子，真好看，我看的有些发呆，还被她嗤笑了一番。 我以为剩下的事情会水到渠成，只需要我们多约会几次。 可是，在我连续两次约她出去都失败时，我觉得可能是我自我感觉太良好了吧。而且那段时间她和我聊天时也有了变化，总是心不在焉的，这让我更加失望。也许她对所有人都挺好呢，也许她和其他人聊天也会发可爱的表情呢，也许有那么一个人她会主动找他聊天呢。只是因为我对她好，所以她才会答应上次跟我出去的吧。 “ 不是这样的。 ” 子瑜发来一句。“ 嗯哼？ ”“ 你不知道我的想法啊 ”我沉默没有说话，她也沉默。 “ 其实，从一开始我就喜欢你的啊！” 我不知道子瑜现在的心情是怎样的，我把想说的都说出来，她应该也很苦恼吧。“ 我以前没有谈过恋爱，也不知道怎样才算是喜欢一个人，但是从大一的时候，每天和你聊天都会很开心，手机有消息时就会连忙查看是不是你发的，有时候上课也会发呆，室友告诉我说，这就是恋爱的前兆，我才知道，原来这就是喜欢一个人啊 ”“ 我本来以为就像故事里常有的，自己会在大学里谈一场美好的恋爱。你那时每天会发很多关于你前女友的动态，室友说你这样的男生不好，要么是花心，要么是不喜欢，只是为了找对象而找对象。可是我不信，我给她们说我们每天互相道早安晚安的事情，我给她们说你关心我的事情，她们却说我执迷不悟。”“ 直到后来，你那天的失约，以及后来慢慢疏远我，我不知道为什么，只是很难过，可是却没有勇气问你原因。好在时间会冲淡很多，时间久了，我也就习惯啦。 ”“ 我以为自己和你不会再有什么过多的交集，只是普通朋友就好啦。没想到你后来又突然找我聊天了，那天肚子特别疼，自己一个人在寝室，有一瞬间感觉好像自己被世界给抛弃了。那天下午，真的谢谢你。”“ 后来你找我聊天又有些频繁了，我不知道该怎么形容当时自己的心情，反正挺复杂吧，自己可能还是喜欢你的，可是我怕再像之前那样，你或许并不喜欢我。所以我告诉自己不要再主动找你聊天，只是和你聊天的时候还是会很开心。”“ 日子不紧不慢的过着，我对那时很满足，不管你喜不喜欢我，但是能找我聊天就很开心的。后来你突然说要约我去看电影，我一开始很担心，我担心又是像大一时候一样，可是我却反复告诉自己你不是那样的人，所以我答应了你。 ”“ 很开心那天和你一起，那是我第一次和男生单独出去看电影。”“ 只是，那段时间，有另一个男生追我。他对我也很好，可是我却不喜欢他，但是我也不知道该怎么拒绝他，所以那段时间很烦，不愿意出去，基本没事就待在寝室了。因此拒绝了你后来两次约我出去，我当时感觉一点都搞不清楚自己真正的想法，脑子很乱。” “ 嗯 ” 子瑜突然给我说了这么多，我也有些懵了。 “ 我们已经大三了，还记得上一次跟你出去的时候，你说你明年会直接出去工作，可是我要考研啊。所以我觉得即使我们在一起也早已晚了吧，明年还是要分道扬镳的。而且之后你突然又开始渐渐地远离我，我感觉的到，我觉得自己不应该再去想这些乱七八糟的呵。也许命中注定我们就不能在一起的吧。” 子瑜的话让我突然觉得想笑，不是嘲笑，而是苦笑，这样俗不可耐的小说剧情就发生在了我的身上么。是不是两个人互相误解最终越走越远终究不能在一起呢？但这一次我想把握住机会，既然话已经挑明，她还是喜欢我的吧，那相互喜欢的两个人为什么不能在一起呢。就像之前一样，不管老师怎么说，不管同学怎么看，我喜欢她，她喜欢我，我们就在一起，即使没有走到最后，至少那段时光是快乐的，不是么。 “ 好吧，那现在呢？我想告诉你，子瑜，我喜欢你，你会答应我么。 ” 我觉得现在表白，她应该不会再拒绝我了吧。“ 对不起 ” 她回了短短的三个字让我感觉仿佛瞬间堕入万丈冰渊。“ 为什么啊！你喜欢我，我也喜欢你，为什么我们不能在一起啊？ ” 我的手有些抖，打出这些话，还没发出去，又有新消息提示了。“ 不过呢，我也没说就拒绝你啦~ ” 她又恢复了俏皮的样子。“ 我之前不是说了么，马上我要准备考研了，每天又没有时间唉，怎么答应你啊。要不这样好了，我想要去厦大，我很喜欢那个城市，如果明年我们能在厦门相遇，我就答应做你女朋友怎么样n(≧▽≦)n ” “ 怎么了啦，你是不是不愿意啊 ”“ 你再不回我我要生气了啊 ”“ 我是真的没有办法，我不太能接受异地恋的，所以如果你接受不了我的条件，那我们也不能够在一起的。 ” “ 好，我答应你。 ” 过了许久，我才打出这几个字。“ 已经很晚了，作业明天再写吧，早点休息，晚安。 ”“ 晚安~ ” 我盯着屏幕没有动，看着她的状态由wifi变成了离线。我想她现在应该挺开心的吧，可是她却不知道屏幕外的我满脸悲伤。 我告诉过她我明年会直接出去工作，可是那是半年前呵，暑假回家之后，父母知道了我这个决定却勃然大怒。他们告诉我，如果我不继续读研的话以后就别进这个家门。我不知道他们为什么发这么大的火，也许因为我是家族里唯一一个考上好大学的人吧，所以他们想让我走的更远，就像他们常给我说的，现在这社会大学生一抓一大把，你不读研以后有什么用。我一向是一个不愿意让父母失望的孩子，所以我妥协了，明年我会出国，已经联系好了一所不错的大学，直博。 所以当子瑜告诉我在一起的条件时，我却没敢告诉她真相。我不敢告诉她，让她等我回来，我觉得自己不是一个能够坚持几年异地的人，也许等我回来的时候，早已物是人非。我觉得这是上天给我开的一个玩笑，或许只是我今晚不该找子瑜聊天，或许大一的时候我就不该去聊一个不喜欢的人吧。 我最后点进了子瑜的空间，给她留了一条言：三生有幸遇见你。 徐子瑜寝室已经熄灯了，可是明天要交的报告还没有写完，还只能借着手电的光来与作业作斗争。哎，早知道下午就不该跟室友出去浪了。 “ 叮咚—— ” 手机突然在这个时候想起来。“ 嘿！ ” 嗯哼？！好久没联系的他怎么会突然找我聊天呢？“ n(≧▽≦)n ” 我照惯例给他发一个可爱的表情。“ 这么晚了还没有睡么 ”“ 在补作业呢 ”“ 嗯 ” 他好像不知道该说些什么了。 他叫余凡，是我的大学同学。我们不同学院，相识也只是因为高中在同一个学校，他说他当时在二班，我在七班，可是我们却没有见过面。刚到大学的时候，因为比较流行各种聚会，我们就是在同一个高中的同学聚会时认识的。他是那次聚会的负责人，负责安排好几十号人，看起来很厉害，而且他长得挺帅的。嗯，我必须得承认我有些颜控。 “ 你还记得大一的时候么，我们刚认识的时候 ”“ 啊？” 他怎么突然说这么一句话，不会要讲故事了吧。 自从第一次聚会之后，我们就相识了，偶尔我们会聊聊天。不出意外的，我发现他有女朋友，他空间里有他们的合影，他的女朋友真漂亮，眼睛很大，很好看，从他的动态也可以看出来，他很爱她。虽然我对他有点好感，但是我应该不会喜欢一个有女朋友的男生吧。可是，没过多久，他和她分手了。那一个月，他每天会发为她写的诗，诗的内容看出来他很悲伤，悲伤的让人心疼，我不知道如何去安慰他，也没有理由去安慰他，只能对他的动态默默点个赞。 让我感到又喜又惊的是，他越来越多的找我聊天。 大一寒假的时候，我和他几乎每天都会聊天，他很爱睡懒觉，可是会每天早上定个闹钟起来给我说早安然后继续睡下，晚上的时候我也会等着他的晚安入睡。我们在那段时间互相了解了很多，我给他看我小时候的日记，他给我讲他小时候的故事，我告诉他我喜欢看书，尤其是古诗词，他告诉我他喜欢玩游戏，特别是射击类。。。。。。那个寒假我每天都过得很开心，因为有他的陪伴。当然，中间也有一点小插曲啦。那天早上我起床后发现QQ上却没有任何消息，我以为他可能是睡过了，可是他的状态显示他在线，没准他今天忘了呢，我这样想到。于是我给他道了声早安。可是过了很久他都没有回应，后来我又连续发了好几条消息，都没有回应。我突然有点慌，不知道他出了什么事情，如果他有什么事情，他应该会告诉我的啊。一上午，看了半天书却根本没有看下去什么，直到中午的时候他发来消息说他睡过了。我送给了口气，只要他没事就好啦。我不知道自己怎么会因为他的事情魂牵梦绕，虽然我们只能通过QQ聊天，可是他的每一句话却都能拨动我的心弦，我觉得这应该就是喜欢一个人的感觉吧。以前总被父母老师告诉要好好学习，千万不能早恋，所以有时看着身边的同学成双入对的打闹嬉戏，自己只能在题海里一遍又一遍的钻研，直到心里那青春期的萌动被题海淹没。到了大学，自己终于可以光明正大的谈恋爱了，我喜欢他，可是我却不知道他对我是什么感觉。 “ 听到这里你是不是觉得我很讨厌？ ” 余凡果然给我说了一大堆，都是关于我们之间故事。只是我没想到的是，他接近我并不是因为喜欢我。我有些难受，现在已经完全没有心思继续写我的报告了。 他继续讲，说出了那天我们约好看电影他却爽约的原因。 我一直以为他是喜欢我的。所以，当他约我出去的时候，我毫不犹豫的答应了，即使第二天我有一节课。我有些兴奋，甚至有些小激动，我想了很多小说里的约会情节，期待着我和他的见面应该会符合哪一种。可是，他却没有出现。我从下午两点等到六点，余凡都没有来，中途我给他打过电话，却也没有人接。我觉得我不应该有任何不好的想法，也许只是他今天临时有事，可是我的心里却有点慌。晚上我很早就躺在了床上，可是却没有任何睡意，因为直到现在，他都还没有上线。“ 你今天是不是很忙啊，我等了你好久的，你下次再这样我就不理你了￣へ￣ ” 我试着给他发了一条消息。“ 嗯，不好意思啊 ” 他很快的回复了我，他的状态还是离线。我不知道为什么他要隐身，也没有去问他爽约的原因，只是心里很难过，可是我不应该表现出来不是么？“ 好啦，没事的，晚安啦~ ” 我假装没有什么事情，给他道了晚安。“ 晚安 ” “ 你知道么，那天我本来是有课的，但是我逃了那一节课。” 我不知道该怎么表达现在的心情，我想过很多原因，可是就是没有想过他是因为不喜欢我所以才失约的。“ 对不起 ” 如果说女生最不想听到男生说的话，应该莫过于这三个字吧。 余凡开始给我讲他和她的故事。从他们最初的相遇，他讨厌她，到最后经历一些挫折，他慢慢喜欢她，最后他们在一起。这是一段很长的故事，很曲折，也很美好，因为有情人终成眷属了啊。他们在一起的时候，她爱他，爱到为之疯狂；他们在一起的时候，他宠她，宠到世界融化。可是爱情有时来的太快，散的也太快，他们很快就分手了，因为异地的缘故。听到这里我有些怅然，再甜蜜美好的爱情都无法跨过天涯相隔的槛么。 余凡告诉我在后来疏远我的那段时间里，他会经常做梦，梦中都是她的影子，每次想她的时候，他都会把自己的思念写到日记里。十个月，他写了一百零六篇日记。 “ 她真幸福 ” 我有些羡慕他和她的甜蜜爱情，也有些嫉妒她，曾拥有这样的他。 在余凡渐渐疏远的日子里，我有些不知所措，不知道应该怎么去处理自己对他的情感。只是希望如室友所说，时间会冲淡一切。我以为我们就会至此而已，以后不会再见面，也不会再有过多交谈。曾经向往的恋爱夭折在了襁褓之中，原来爱情并不都像小说里面那样美好，原来大学里也不是随便就可以找到自己的爱情。 我没想到的是他又突然找我说话了，距离我们上一次说话五个月十二天。 “ 你怎么了？ ” 他突然问我这么一句话，看到熟悉的名字我有些吃惊。“ ( ⊙ o ⊙ )啊！没事啦，就是肚子疼。。。。。。” 我想他肯定是看到了我发的动态，因为大姨妈的缘故，不知道为什么今天疼的要命。“ 好吧，那我陪你聊聊天吧，分散一下注意力应该会好一点 ” 我不知道他为什么突然找我说话，也不知道他为什么这样做，也许只是朋友间的关心吧。“ (⊙v⊙)嗯，好哒~ ” 余凡陪我聊了一下午，不知是心里作祟还是怎样，和他聊天的时候确实没有感到那么疼，可能分散注意力确是一个不错的办法吧。虽然我觉得自己已经不再去想与恋爱有关的事情，不过在自己最难受无助的时候有一个人能够站出来还是很开心的，所以我发了一个动态：“ 谢谢你。 ”我知道他会看，几乎我的每一条动态他都会点赞。 后来他总会隔三差五的找我聊天，虽然不似关系最近时候的一天一说，但也比之前长久不理好了一些。只是我不太明白他的意图，所以不会去主动找他聊天啦，或许他只是跟之前一样，无聊了想找人聊天的吧。即使自己尽力的去克制，可是和他聊天的时候还是不自觉的就觉得很开心，我觉得自己越来越危险了，那快被时间消磨殆尽的情感又渐渐萌出了芽。我把这些告诉室友，室友告诉我，stay away！不要再上当了。可是我却不相信他是这样的人，我给室友讲他的好，为他辩解。不知不觉我发现，问室友只是为了让自己更加的相信他吧。 “ 明天你有时间么，要不要一起去看电影啊 ” 余凡又一次约我出去。我的心里当然是愿意的啊，可是想起上一次，自己心里又有些打退堂鼓。那就听天由命吧，看看课表，如果有课，那就不去，这一次不会再翘课了。我最终这样做了决定。明天正巧没有课。我不知道是他幸运还是我幸运，我答应了他。已经很久没有见面了，明天该穿什么衣服好呢。女生的那点小心思，我也避免不了。 第二天见到他的时候，在阳光下白衬衣和他好像融在了一起，他静静地站在那里，看着我笑，露出一口洁白的牙齿。是不是女生对穿白衬衣男生的好感度都会飙升？“ 怎么了，不认识了么 ” 我对他开了个玩笑。“ 没有，只是你今天太好看了 ” 他吐了吐舌头。 我们如约一起看了场电影，出来的时候刚好是晚饭时间，就一起又吃了个饭。吃完饭已经八点了，从下午两点到八点，我不知道我们怎么花了这么久的时间。他说送我回寝室，我嘴上说不用了，可是心里的想法却一点都不一样。 第一次约会，虽然平平淡淡，却也很美好。 可是我记得那天我问余凡他明年的计划，他告诉我他想要直接找工作。我以为如果他能够陪我一起考研，然后一起去一个学校，或许我们还能在一起吧。现在我们都已经大三了呵，马上就要忙各自的事情了，即使在一起，也总会分离的吧。想到这些，我又有些难过，却不敢将内心真正的想法说出来。 “ 可是，后来我连续两次约你出去都失败时，我就觉得可能是自己自我感觉太良好了吧。而且那段时间你和我聊天时也有了变化，总是心不在焉的，这让我更加失望。我就想也许是你对所有人都挺好呢，也许你和其他人聊天也会发可爱的表情呢，也许有那么一个人你会主动找他聊天呢。可能只是因为我对你好，所以你才会答应上次跟我出去的吧。” 余凡给我说了他的想法，也是他后来又疏远我的原因。“ 不是这样的。” 我不知道余凡竟然会这样想。 我把自己的所有想法都告诉了余凡。 原来我们一直相互喜欢着对方，却又相互误会，不愿意将心里的话说出来，而是以沉默来互相伤害，互相难过。 “ 好吧，那现在呢？我想告诉你，子瑜，我喜欢你，你会答应我么。” 在我说完一切之后，余凡问我。 我犹豫了一下，但是理智最后还是战胜了情感。“ 对不起 ”“ 为什么啊！你喜欢我，我也喜欢你，为什么我们不能在一起啊？”“ 不过呢，我也没说就拒绝你啦~ ”“ 我之前不是说了么，马上我要准备考研了，每天又没有时间唉，怎么答应你啊。要不这样好了，我想要去厦大，我很喜欢那个城市，如果明年我们能在厦门相遇，我就答应做你女朋友怎么样n(≧▽≦)n ”我告诉余凡，我会考研去厦大，如果他能够去厦门工作，我就答应他。 余凡没有立即回复我。 “ 怎么了啦，你是不是不愿意啊 ”“ 你再不回我我要生气了啊 ”“ 我是真的没有办法，我不太能接受异地恋的，所以如果你接受不了我的条件，那我们也不能够在一起的。 ”我不知道为什么余凡不太愿意接受这个条件，可是如果相恋的两个人不能在一起，有多少能够走到最后呢。 “ 好，我答应你。 ”“ 已经很晚了，作业明天再写吧，早点休息，晚安 ”“ 晚安~ ”余凡终于是答应了我，看来是我多想了呢刚才。 我松了口气，只是感觉这一切来的有点突然。突然余凡就找我聊天，然后就讲了很多事情，然后发现原来我们一直误会着对方，原来我们一直喜欢着对方，虽然这段爱情来得有点晚，可是最终是赶上了不是么？我捏了捏自己的脸，还蛮真实的，这么离谱的事情竟然不是在做梦唉。我退了QQ，收拾了一下作业，说了那么多话，作业都没写完。 “ 叮咚—— ” 我刚躺下，手机又响了。 余凡给我留了一条留言：三生有幸遇见你。我皱了皱眉头，我记得，他曾经给我推荐过一篇故事，故事的最后是两句话：三生有幸遇见你，纵使悲凉也是情。我不知道余凡是不是想要说这句话，或许是他有什么事情没有告诉我么？ “ 呵—— ” 我打了一个长长的哈欠，有些困了。算了啦，别想那么多了，也许他就是想简单的告诉我前半句话呢。我告诉自己，又定了一个闹铃，然后睡下了。","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/tags/故事/"}]},{"title":"清风徐来，水波不兴","slug":"scene-1","date":"2016-11-13T07:43:58.000Z","updated":"2019-07-02T11:57:15.443Z","comments":true,"path":"2016/11/13/scene-1/","link":"","permalink":"http://helianthuswhite.cn/2016/11/13/scene-1/","excerpt":"清风徐来，水波不兴。良辰美景，依偎佳人。","text":"清风徐来，水波不兴。良辰美景，依偎佳人。 厦门世茂海峡大厦。 厦大新校区周围的景色，非常喜欢它这样的房子。 快要日落的时候拍的，这两天的天气很凉爽，非常舒适。 我在南方的艳阳里四季如春，你在北方的寒风中大雪纷飞。 同伴说这是椰子树，我问他，为什么树上没有长椰子。 这个是榕树吧，这一片树林会不会都是这一棵树。 晚上我们骑车沿海边转了一圈。 已经很晚了，但是还有不少人在露营和烧烤。 背着吉他，带她去流浪。 嗯，我一直觉得这个很像“大菠萝”。 夜晚的海面总是黑黢黢的，只有远远的桥上闪着灯光。","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"游记","slug":"游记","permalink":"http://helianthuswhite.cn/tags/游记/"}]},{"title":"起源","slug":"story-1","date":"2016-11-10T17:45:10.000Z","updated":"2019-07-02T11:57:15.654Z","comments":true,"path":"2016/11/11/story-1/","link":"","permalink":"http://helianthuswhite.cn/2016/11/11/story-1/","excerpt":"我喜欢听故事，可是我没有酒。","text":"我喜欢听故事，可是我没有酒。 只是一个简单的想法，希望能够记录一些什么。 我不太喜欢做一个没有人文气息的工科生，所以想要在茫茫代码之外寻求一点文学的气息。 可能只是俗套的爱情剧，可能只是简单的告白语，也可能只是无厘头的牢骚，但是比起冰冷的代码，至少也是有些感情的吧。 我不是一个好的写手，只想写下一些心中的故事与想说的话。 这些故事也许是发生在我身边的，也许是发生在你身边的。 这就是 “故事” 这个栏目的起源，有着美好的初衷，也希望能够善始善终。","categories":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/categories/故事/"}],"tags":[{"name":"故事","slug":"故事","permalink":"http://helianthuswhite.cn/tags/故事/"}]},{"title":"你或许不知道的CSS性能提高","slug":"article-24","date":"2016-11-02T11:33:58.000Z","updated":"2019-07-02T11:56:59.658Z","comments":true,"path":"2016/11/02/article-24/","link":"","permalink":"http://helianthuswhite.cn/2016/11/02/article-24/","excerpt":"在最近给自己的博客换了个CSS3动画背景之后，发现打开博客会导致CPU占用暴增，而且还会有卡顿现象，于是乎去查了一下CSS动画的相关优化，发现了不少好文，以前从来没有想过CSS还能够进行优化，一下子就涨知识了。","text":"在最近给自己的博客换了个CSS3动画背景之后，发现打开博客会导致CPU占用暴增，而且还会有卡顿现象，于是乎去查了一下CSS动画的相关优化，发现了不少好文，以前从来没有想过CSS还能够进行优化，一下子就涨知识了。 我找到了几个写的比较好点的前辈们的文章，链接如下：前端性能优化CSS动画之性能优化高性能CSS3动画使用will-change来提高页面性能 下面我就总结一下CSS性能提高的一些原理和方法。 是什么影响了CSS性能图层当浏览器在渲染一个页面时，会先将页面分为很多个图层，每个图层上有一个或多个DOM节点，然后再去渲染具体的每个DOM节点。 在渲染DOM的时候，浏览器所做的工作实际上是： 获取DOM后分割为多个图层 对每个图层的节点计算样式结果（Recalculate style–样式重计算） 为每个节点生成图形和位置（Layout–回流和重布局） 将每个节点绘制填充到图层位图中（Paint Setup和Paint–重绘） 图层作为纹理上传至GPU 符合多个图层到页面上生成最终屏幕图像（Composite Layers–图层重组） 而在Chrome中，满足以下任意情况就会创建图层： 3D或透视变换（perspective transform）CSS属性 使用加速视频解码的&lt;video&gt;节点 拥有3D（WebGL）上下文或加速的2D上下文的&lt;canvas&gt;节点 混合插件（如Flash） 对自己的opacity做CSS动画或使用一个动画webkit变换的元素 拥有加速CSS过滤器的元素 元素有一个包含复合层的后代节点（一个元素拥有一个子元素，该子元素在自己的层里） 元素有一个z-index较低且包含一个复合层的兄弟元素（换句话说就是该元素在复合层上面渲染） 需要注意的是，如果图层中某个元素需要重绘，那么整个图层都需要重绘。因此当图层较大的时候，只刷新图层中的某个元素而刷新整个图层自然会多花费一些时间。 重布局有些节点，当你改变它时，会需要重新布局（这也意味着需要重新计算其他被影响的节点的位置和大小）。这种情况下，被影响的DOM树越大（可见节点），重绘所需要的时间就会越长，而渲染一帧动画的时间也相应变长。 盒子模型相关属性会触发重布局： width height padding margin display border-width border min-height 定位属性及浮动也会触发重布局： top bottom left right position float clear 改变节点内部文字结构也会触发重布局： text-align overflow-y font-weight overflow font-family line-height vertival-align white-space font-size 这么多常用属性都会触发重布局，可以看到，他们的特点就是可能修改整个节点的大小或位置，所以会触发重布局。 重绘前面已经说了，重绘就是将每个节点重新绘制到它的所在图层之中。 修改时只触发重绘的属性有： color border-style border-radius visibility text-decoration background background-image background-position background-repeat background-size outline-color outline outline-style outline-width box-shadow 这样可以看到，这些属性都不会修改节点的大小和位置，自然不会触发重布局，但是节点内部的渲染效果进行了改变，所以只需要重绘就可以了。 GPU加速虽然只是运行在浏览器中的动画，但是依然可以调用硬件GPU来提高动画渲染和绘制的性能。 浏览器接收到页面文档后，会将文档中的标记语言解析为DOM树。DOM树和CSS结合后形成浏览器构建页面的渲染树。渲染树中包含了大量的渲染元素，每一个渲染元素会被分到一个图层中，每个图层又会被加载到GPU形成渲染纹理。 需要注意的是： 如果GPU加载了大量的纹理，那么很容易就会发生内容问题，这一点在移动端浏览器上尤为明显，所以，一定要牢记不要让页面的每个元素都使用硬件加速。 使用GPU渲染会影响字体的抗锯齿效果。这是因为GPU和CPU具有不同的渲染机制。即使最终硬件加速停止了，文本还是会在动画期间显示得很模糊。 对症下药——对CSS进行性能提升减少重布局和重绘为了减少重布局和重绘，只需要针对相应的属性做出变化即可。所以一般来说，CSS动画中为了提高性能和效率，尽量使用如下四个方面的属性： 改变位置 改变大小 旋转 改变透明度 同时应该避免让元素处于文档流之中，这样可以减少重布局的时间；采用扁平化设计风格，少用box-shadow、gradients等属性以减少重绘的时间等。 需要注意的是，上面那些触发重绘的属性里面没有opacity（透明度），很奇怪不是吗？实际上透明度的改变后，GPU在绘画时只是简单的降低之前已经画好的纹理的alpha值来达到效果，并不需要整体的重绘。不过这个前提是这个被修改opacity本身必须是一个图层，如果图层下还有其他节点，GPU也会将他们透明化。 开启硬件的GPU加速前面我们说了是否使用GPU来渲染图层会影响CSS动画的性能，那么我们如何开启GPU加速呢？ 方法比较简单，使用transform属性中的translate来强制开启GPU加速： 1234div &#123; transform: translateZ(0); //这两种方法都可以，选一个即可 transform: translate3d(0,0,0);&#125; 还有什么方法？使用比较新的元素属性will-change。顾名思义，will-change属性就是为了告诉浏览器接下来我想要浏览器做什么事情，这样浏览器就可以提前准备好，从而提高CSS的性能。 will-change虽然可以加速，但是，一定一定要适度使用。那种全局都开启will-change等待模式的做法，无疑是死路一条。尼玛，用脚趾头想想也知道，你让浏览器各个元素都随时GPU渲染加速待命，还是妥妥搞死！","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"},{"name":"CSS3","slug":"CSS3","permalink":"http://helianthuswhite.cn/tags/CSS3/"},{"name":"前端优化","slug":"前端优化","permalink":"http://helianthuswhite.cn/tags/前端优化/"}]},{"title":"CSS使文字一行显示，超出显示省略号","slug":"article-23","date":"2016-11-01T16:16:07.000Z","updated":"2019-07-02T11:56:59.376Z","comments":true,"path":"2016/11/02/article-23/","link":"","permalink":"http://helianthuswhite.cn/2016/11/02/article-23/","excerpt":"经常用到的功能，就只有小小的几个属性，但是老是记不住。 当文字较多时，让这些文字都在一行显示，并且超出容器之后显示省略号。","text":"经常用到的功能，就只有小小的几个属性，但是老是记不住。 当文字较多时，让这些文字都在一行显示，并且超出容器之后显示省略号。 123456div &#123; width: 100px; //容器限制一定的宽度 white-space: nowrap; //让文字不换行显示 overflow: hidden; //容器超出部分不显示 text-overflow: ellipsis; //文本超出部分显示省略号&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"}]},{"title":"MAC出现“无法使用此Apple ID进行更新”的解决办法","slug":"article-22","date":"2016-10-20T15:14:28.000Z","updated":"2019-07-02T11:56:59.036Z","comments":true,"path":"2016/10/20/article-22/","link":"","permalink":"http://helianthuswhite.cn/2016/10/20/article-22/","excerpt":"今天在使用AppStore进行更新的时候报错了如下错误：","text":"今天在使用AppStore进行更新的时候报错了如下错误： 点击一下之后出现 解决办法如果你仔细观察之后会发现，不能更新的是Xcode，终于找到原因了，因为我的Xcode是从别人那里拷来的，而不是自己从AppStore下载的，所以会报错。只需要重新从AppStore下载Xcode就可以更新了，不过我觉得这个方法还是挺蛋疼的，但是没有找到其他的办法。 虽然不知道你们的问题是不是由于Xcode造成的，但是我估计也是因为软件是从别人那里拷的缘故，大家也可以试试该方法。","categories":[{"name":"mac","slug":"mac","permalink":"http://helianthuswhite.cn/categories/mac/"}],"tags":[{"name":"mac","slug":"mac","permalink":"http://helianthuswhite.cn/tags/mac/"}]},{"title":"NodeJS报错socket hang up的解决办法","slug":"article-21","date":"2016-10-14T08:45:17.000Z","updated":"2019-07-02T11:56:58.626Z","comments":true,"path":"2016/10/14/article-21/","link":"","permalink":"http://helianthuswhite.cn/2016/10/14/article-21/","excerpt":"之前在使用NodeJS模拟HTTP请求向JAVA的Socket转发的时候报了如下错误： 1234567events.js:48 throw arguments[1]; // Unhandled 'error' event ^Error: socket hang up at createHangUpError (http.js:1091:15) at Socket.onend (http.js:1154:27) at TCP.onread (net.js:363:26)","text":"之前在使用NodeJS模拟HTTP请求向JAVA的Socket转发的时候报了如下错误： 1234567events.js:48 throw arguments[1]; // Unhandled 'error' event ^Error: socket hang up at createHangUpError (http.js:1091:15) at Socket.onend (http.js:1154:27) at TCP.onread (net.js:363:26) 找了半天没有找到错误的解决办法，后来终于在stackoverflow中找到了这个问题的解决答案——How to debug a socket hang up error in NodeJS?。 原来是因为HTTP请求与Socket的不能正常连接，链接请求和接受必须是同类型的才可以。即HTTP的请求只能以HTTP的方式来接受，Socket的请求只能和Socket的端口来建立连接。所以，我把我的HTTP请求换成了Socket之后就解决了上述的错误。","categories":[{"name":"NodeJS","slug":"NodeJS","permalink":"http://helianthuswhite.cn/categories/NodeJS/"}],"tags":[{"name":"NodeJS","slug":"NodeJS","permalink":"http://helianthuswhite.cn/tags/NodeJS/"},{"name":"后端","slug":"后端","permalink":"http://helianthuswhite.cn/tags/后端/"},{"name":"Socket","slug":"Socket","permalink":"http://helianthuswhite.cn/tags/Socket/"}]},{"title":"使用CSS设置元素背景固定","slug":"article-20","date":"2016-10-14T08:23:44.000Z","updated":"2019-07-02T11:56:58.313Z","comments":true,"path":"2016/10/14/article-20/","link":"","permalink":"http://helianthuswhite.cn/2016/10/14/article-20/","excerpt":"有时我们需要一个元素的背景成为固定的，比如让body的背景固定等,我们这里提供两种解决办法。","text":"有时我们需要一个元素的背景成为固定的，比如让body的背景固定等,我们这里提供两种解决办法。 我们通常的解决办法是给元素添加一个背景，同时设置该元素为固定定位： 1234div &#123; position: fixed; background: url(images/bg.jpg);&#125; 除此之外，我们还可以有其他的解决办法，就是利用一个background-attachment属性: 12345div &#123; background: url(images/bg.jpg); background-attachment: fixed; /*页面滚动时，背景固定。*/ /* background-attachment: scroll; 页面滚动时，背景滚动。 */&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"}]},{"title":"NodeJS报错[Error:listen EADDRINUSE]","slug":"article-19","date":"2016-10-11T12:58:42.000Z","updated":"2019-07-02T11:56:57.894Z","comments":true,"path":"2016/10/11/article-19/","link":"","permalink":"http://helianthuswhite.cn/2016/10/11/article-19/","excerpt":"NodeJS服务器运行的时候报出错误： Error:listen EADDRINUSE xxxxxxx 原因： 服务器的端口被占用","text":"NodeJS服务器运行的时候报出错误： Error:listen EADDRINUSE xxxxxxx 原因： 服务器的端口被占用 解决办法： 杀死其他占用端口的进程。 一般都由于前一次node服务器进程没有杀死造成，可以使用 killall -9 node 命令来杀死所有node进程。 也可以先查看自己的端口占用情况再根据端口占用进程的PID来杀死进程。 netstat -anp | grep 8080 //linux 查看8080端口的进程使用情况 如果后面的PID显示的 - 的话说明没有权限，需要在命令之前加上 sudo 来提升权限。 之后可以使用下面命令直接杀死相应的进程即可： killall -9 PID","categories":[{"name":"NodeJS","slug":"NodeJS","permalink":"http://helianthuswhite.cn/categories/NodeJS/"}],"tags":[{"name":"NodeJS","slug":"NodeJS","permalink":"http://helianthuswhite.cn/tags/NodeJS/"},{"name":"后端","slug":"后端","permalink":"http://helianthuswhite.cn/tags/后端/"},{"name":"linux","slug":"linux","permalink":"http://helianthuswhite.cn/tags/linux/"}]},{"title":"Git实用入门教程","slug":"article-18","date":"2016-10-10T06:52:13.000Z","updated":"2019-07-02T11:56:57.791Z","comments":true,"path":"2016/10/10/article-18/","link":"","permalink":"http://helianthuswhite.cn/2016/10/10/article-18/","excerpt":"“任何新技术的使用都是由需求所决定！” 以不同实例场景来讲解Git的使用，通俗易懂，不是简单的文档式教程。","text":"“任何新技术的使用都是由需求所决定！” 以不同实例场景来讲解Git的使用，通俗易懂，不是简单的文档式教程。 场景一——第一次使用git现在我们需要使用github来建立一个自己的代码仓库，方便存储和管理自己的代码。 命令行操作1、新建一个文件夹，作为本地存放代码的git仓库。 mkdir my_repository //linux 新建文件夹 2、在新建的文件夹下面进行git初始化操作。 cd my_repository //打开新建的文件夹 git init // 进行git初始化将该文件夹变成git仓库 新建完成之后在该文件夹下回多一个.git文件夹 3、在本地的git仓库中添加文件。 touch test.txt //linux 新建文件 vi text.txt //linux 编辑文件 添加内容 4、到github自己的目录去创建一个git仓库。 5、复制github上面的仓库链接并将其与本地仓库连接。 git remote add origin https://github.com/helianthuswhite/my_repository.git //将远程仓库与本地仓库连接 6、将本地代码和修改提交commit。 git add -A //-A是提交本地所有修改的意思，可以指定 git commit -m&apos;这是第一次提交&apos; //这里填写提交时的信息 这里第6步和第5步的顺序可以对调。 7、将刚才的commit push 到远程仓库。 git push origin master //master是提交到远程仓库的master分支 到这里，我们已经把自己的代码提交到远程的github仓库了。之后在本地修改代码完成后，只需要重复上面的第6步和第7步就可以完成仓库的更新了。 客户端操作1、使用客户端新建一个本地git仓库。 2、在刚才新建好的本地仓库里面添加自己的文件，这时可以在客户端中看到自己添加的文件及其内容。 3、在下面输入commit的信息内容，然后点击按钮即可完成commit。 4、完成commit之后在history里面可以看到自己的commit，但是此时代码还是在本地，需要点击右上角的publish把本地仓库提交到github上面。 在提交时会填写一些信息，这是github上面仓库的信息。客户端在上传时会自动创建远程仓库。 最后在远程仓库就可以看到自己上传的内容了。 从上面我们可以看出，客户端在新手使用的时候确实是十分方便的。因为它操作比较简单，并且能够随时看到自己是否完成commit，以及代码变化的内容（这点在以后也是十分好用的）。然而客户端的功能并不是很全，有些必须要命令行来完成。 最后提示一下：要善于变通，有时候将命令行和客户端结合起来用会方便很多。 场景二——git克隆到本地我们本地的git仓库不小心丢失了，可能是因为系统重装或是硬盘损坏等原因。此时我们如何继续我们未完成的工作呢。 命令行操作通过git clone命令将远程仓库克隆到本地，然后再进行工作。 git clone https://github.com/helianthuswhite/my_repository.git //将远程代码克隆到本地仓库 之后可以继续修改、add、commit、push操作。 客户端操作客户端操作更加简单，只需要点击添加按钮即可看到当前登录账号的远程仓库，选择clone就好。 场景三——解决push时的冲突前两个场景只是单人仓库存储的使用，之后介绍的就是如何使用git来进行团队协作。 现在我们要与其他人一起完成一个项目，每个人完成的部分是不一样的。如果大家都把远程仓库克隆到本地，然后完成自己的内容再提交到远程仓库，那样第一个提交的人不会出错，但其他人就会遇到如下错误： ! [rejected] master -&gt; master (non-fast-forward) 这是因为，在我们提交本地代码之前，仓库里面的代码已经发生了变化。那么，如何解决我们遇到的这个问题？ 命令行操作1、clone远程仓库到本地。 2、新建一个本地分支。 git branch dev //新建一个名为dev的分支 3、查看当前仓库的分支。 git branch //查看当前仓库的分支 4、切换到dev分支上面。 git checkout dev //切换到dev分支 5、修改仓库内容，然后顺序执行add、commit。 touch heh.txt //linux 新建一个文件 vi heh.txt //linux 修改文件内容 git add -A //git 操作 git commit -m&apos;新建分支&apos; //git 操作 6、执行push操作将本地分支推送到远程仓库。 git push origin dev //这里不是master了，因为我们从master分支切换到了dev分支 7、如果当前处于工作之中并且需要临时查看一下demo的话，可以切换到master分支，然后同步一下其他分支的内容。 git checkout master //切换到master分支 git pull origin dev //将dev中新修改的内容同步到master的本地分支 最后别忘了再将master本地仓库推送到远程仓库。这样操作之后，就可以把其他分支中的内容同步到主分支上面。所以在实际的开发中，团队协作时可以每人各建一个分支，需要合并时与他人分支进行合并即可。 8、除了同步可以解决分支的问题，也可以采用合并分支的办法，来将不同的分支进行合并。 git checkout master //切换到master分支 git merge dev //将dev分支merge到master分支上面 将本地改变推送到远程仓库中。 9、当任务都完成之后，我们需要将多余的分支给删掉。 git checkout master //切换到主分支 git branch -d dev //删除本地dev分支 git branch //查看所有的分支 git branch -r -d origin/dev //删除远程仓库的分支 git push origin :dev //将删除远程分支的操作同步到远程仓库 客户端操作1、创建新的分支。 2、切换到自己新建的分支上面。 3、完成自己工作，并且提交到远程仓库。 4、从客户端发送pull request请求，可以请求合并分支。 5、点击客户端右上角按钮可以看到自己刚才提交的pull request。 6、仓库的拥有者可以查看他人提交的Pull request，并且选择是否merge，merge之后两个分支的内容就完成了合并。 7、客户端是无法删除分支的，但是可以从github上面删除分支。 场景四——第一次pull request上面讲解的是比较简单的团队协作以及以自己仓库为主的pull request。还有很多复杂的协作情况需要大家掌握git的使用。 接下来的场景是如何向别人的仓库的master分支发起Pull request。 命令行操作1、先到github网站上面进入到别人的仓库里面，点击右上角的fork选项将该仓库fork到自己的github里面。 2、进入到自己刚才fork的仓库里面，使用命令行clone到本地，然后进行修改、add、commit、push等操作。 3、此时在自己的远程仓库里面已经可以看到刚才自己提交的更新了，但是现在只是提交到了自己fork的仓库里面，还没有到他人的仓库里。 这时点击右上角的New pull request选项，就可以发起新的pull request了，之后仓库的拥有者就可以选择是否合并你的操作。 客户端操作与命令行操作一样先到网页的进行fork操作，之后再按照情景三里面一步步进行即可。 场景五——合并commit有时，我们发现自己的commit提交的乱七八糟的，有很多提交内容基本都差不多，想要把这些commit合并为一个。 命令行操作1、查看自己提交的commit情况。 git log //查看commit情况 2、获得需要合并的commit的序列号，并且进入合并页面。 git rebase -i abc123 //abc123为想要合并的多个commit的前一个commit序列号 3、修改rebase文件，可以直接按照注释的说明进行。 pick //使用该commit reword //使用该commit,修改该commit的信息 edit //修改该commit squash //将该commit合并到前一个commit fixup //与squash相似，不过会丢弃commit的日志信息 exec //运行剩下的命令 drop //删除commit 4、修改完成保存退出之后，可以再次查看commit信息就会发现已经发生了更改。但是还需要把本地的修改提交到远程服务器。 git push --force origin master //--force 是强制合并，否则会把远程commit同步到本地，就无法合并了 5、可以去网站查看发现，已经完成了commit的合并。如果发现之前对commit的操作有问题，可以执行以下代码来恢复。 git rebase --abort //撤销之前的git rebase操作 情景六——拉取远程分支代码一般来说，对于多人合作的项目，我们不会直接在master分支上面进行开发操作，而是会在其他的分支进行操作。比如：master分支为项目的主要分支，是项目的主要可用版本，而dev分支为项目的开发分支，所以我们操作的时候就应该在dev分支上面进行操作。 但是现在问题就来了，我们如何把远程仓库的dev分支给clone下来呢？ 命令行操作1、将远程分支上面的仓库clone到本地，此时clone下来的代码是只有master分支的。 git clone https://github.com/helianthuswhite/my_repository.git //克隆远程仓库 2、创建一个分支，创建远程origin的dev分支到本地。 git checkout -b dev origin/dev //创建一个远程dev分支 3、此时可以看到本地已经有这个dev分支了，切换到该分支下。 git branch //查看当前分支 git checkout dev //切换到开发分支 4、将远程仓库的开发分支代码同步到本地。 git pull origin dev //拉取远程分支代码 5、此时可以发现本地的代码就是远程dev分支的代码了，可以直接进行开发和提交就好。","categories":[{"name":"个人作品","slug":"个人作品","permalink":"http://helianthuswhite.cn/categories/个人作品/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://helianthuswhite.cn/tags/Git/"},{"name":"Github","slug":"Github","permalink":"http://helianthuswhite.cn/tags/Github/"},{"name":"个人作品","slug":"个人作品","permalink":"http://helianthuswhite.cn/tags/个人作品/"}]},{"title":"OpenCV中waitKey()函数","slug":"article-17","date":"2016-09-27T09:50:19.000Z","updated":"2019-07-02T11:56:57.477Z","comments":true,"path":"2016/09/27/article-17/","link":"","permalink":"http://helianthuswhite.cn/2016/09/27/article-17/","excerpt":"OpenCV中waitKey()函数的详细说明。","text":"OpenCV中waitKey()函数的详细说明。 waitKey(x): 参数x：等待x ms，如果在此期间有按键按下，则立即结束并返回按下按键的ASCII码，否则返回-1。 如果x=0，那么无限等待下去，直到有按键按下。 注意：waitKey仅对窗口机制起作用，即namedWindow产生的窗口。若在此之前没有产生窗口，则waitKey相当于未执行。另外，在imshow之后如果没有waitKey语句则不会正常显示图像。","categories":[{"name":"OpenCV","slug":"OpenCV","permalink":"http://helianthuswhite.cn/categories/OpenCV/"}],"tags":[{"name":"OpenCV","slug":"OpenCV","permalink":"http://helianthuswhite.cn/tags/OpenCV/"},{"name":"图像处理","slug":"图像处理","permalink":"http://helianthuswhite.cn/tags/图像处理/"}]},{"title":"Flex布局的用法","slug":"article-16","date":"2016-09-25T15:50:25.000Z","updated":"2019-07-02T11:56:57.187Z","comments":true,"path":"2016/09/25/article-16/","link":"","permalink":"http://helianthuswhite.cn/2016/09/25/article-16/","excerpt":"关于Flex布局的用法，在阮一峰老师的博客中讲的十分详细，可以直接参考Flex 布局教程：语法篇。 我补充一下上诉文章中没有讲到的部分，主要是关于子元素部分的flex属性。","text":"关于Flex布局的用法，在阮一峰老师的博客中讲的十分详细，可以直接参考Flex 布局教程：语法篇。 我补充一下上诉文章中没有讲到的部分，主要是关于子元素部分的flex属性。 首先明确一点是，flex 是 flex-grow、flex-shrink、flex-basis的缩写。 flex 的默认值是以上三个属性值的组合。假设以上三个属性同样取默认值，则 flex 的默认值是 0 1 auto。同理，如下是等同的： 123456.item &#123;flex: 2333 3222 234px;&#125;.item &#123; flex-grow: 2333; flex-shrink: 3222; flex-basis: 234px;&#125; 当 flex 取值为 none，则计算值为 0 0 auto，如下是等同的： 123456.item &#123;flex: none;&#125;.item &#123; flex-grow: 0; flex-shrink: 0; flex-basis: auto;&#125; 当 flex 取值为 auto，则计算值为 1 1 auto，如下是等同的： 123456.item &#123;flex: auto;&#125;.item &#123; flex-grow: 1; flex-shrink: 1; flex-basis: auto;&#125; 当 flex 取值为一个非负数字，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%，如下是等同的： 123456.item &#123;flex: 1;&#125;.item &#123; flex-grow: 1; flex-shrink: 1; flex-basis: 0%;&#125; 当 flex 取值为一个长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink 取 1，有如下等同情况（注意 0% 是一个百分比而不是一个非负数字）： 123456789101112.item-1 &#123;flex: 0%;&#125;.item-1 &#123; flex-grow: 1; flex-shrink: 1; flex-basis: 0%;&#125;.item-2 &#123;flex: 24px;&#125;.item-1 &#123; flex-grow: 1; flex-shrink: 1; flex-basis: 24px;&#125; 当 flex 取值为两个非负数字，则分别视为 flex-grow 和 flex-shrink 的值，flex-basis 取 0%，如下是等同的： 123456.item &#123;flex: 2 3;&#125;.item &#123; flex-grow: 2; flex-shrink: 3; flex-basis: 0%;&#125; 当 flex 取值为一个非负数字和一个长度或百分比，则分别视为 flex-grow 和 flex-basis 的值，flex-shrink 取 1，如下是等同的： 123456.item &#123;flex: 2333 3222px;&#125;.item &#123; flex-grow: 2333; flex-shrink: 1; flex-basis: 3222px;&#125; flex-basis 规定的是子元素的基准值。所以是否溢出的计算与此属性息息相关。flex-basis 规定的范围取决于 box-sizing。 这里主要讨论以下 flex-basis 的取值情况： auto：首先检索该子元素的主尺寸，如果主尺寸不为 auto，则使用值采取主尺寸之值；如果也是 auto，则使用值为 content。 content：指根据该子元素的内容自动布局。有的用户代理没有实现取 content 值，等效的替代方案是 flex-basis 和主尺寸都取 auto。 百分比：根据其包含块（即伸缩父容器）的主尺寸计算。如果包含块的主尺寸未定义（即父容器的主尺寸取决于子元素），则计算结果和设为 auto 一样。 举一个不同的值之间的区别： 12345678910111213141516171819202122232425262728&lt;div class=\"parent\"&gt; &lt;div class=\"item-1\"&gt;&lt;/div&gt; &lt;div class=\"item-2\"&gt;&lt;/div&gt; &lt;div class=\"item-3\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;style type=\"text/css\"&gt; .parent &#123; display: flex; width: 600px; &#125; .parent &gt; div &#123; height: 100px; &#125; .item-1 &#123; width: 140px; flex: 2 1 0%; background: blue; &#125; .item-2 &#123; width: 100px; flex: 2 1 auto; background: darkblue; &#125; .item-3 &#123; flex: 1 1 200px; background: lightblue; &#125;&lt;/style&gt; 主轴上父容器总尺寸为 600px 子元素的总基准值是：0% + auto + 200px = 300px，其中 120% 即 0 宽度auto 对应取主尺寸即 100px 故剩余空间为 600px - 300px = 300px 伸缩放大系数之和为： 2 + 2 + 1 = 5 剩余空间分配如下： 12item-1 和 item-2 各分配 2/5，各得 120pxitem-3 分配 1/5，得 60px 各项目最终宽度为： 123item-1 = 0% + 120px = 120pxitem-2 = auto + 120px = 220pxitem-3 = 200px + 60px = 260px 当 item-1 基准值取 0% 的时候，是把该项目视为零尺寸的，故即便声明其尺寸为 140px，也并没有什么用，形同虚设。 而 item-2 基准值取 auto 的时候，根据规则基准值使用值是主尺寸值即 100px，故这 100px 不会纳入剩余空间。 这里细说了一下子元素flex的取值问题，还有关于flex布局的实例用法，也可以参考阮一峰老师的文章Flex 布局教程：实例篇。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS3","slug":"CSS3","permalink":"http://helianthuswhite.cn/tags/CSS3/"},{"name":"响应式设计","slug":"响应式设计","permalink":"http://helianthuswhite.cn/tags/响应式设计/"}]},{"title":"CSS子元素垂直居中","slug":"article-15","date":"2016-09-21T07:00:06.000Z","updated":"2019-07-02T11:56:56.779Z","comments":true,"path":"2016/09/21/article-15/","link":"","permalink":"http://helianthuswhite.cn/2016/09/21/article-15/","excerpt":"如何实现一个CSS子元素的垂直居中，这里有完备的解决方案！","text":"如何实现一个CSS子元素的垂直居中，这里有完备的解决方案！ 当父元素为浏览器窗口时，子元素垂直居中：12345678div &#123; position: fixed; left: 0; right: 0; top: 0; bottom: 0; margin: auto;&#125; 父元素为块级元素，子元素已知大小（假设为300*400）：1234567.child &#123; position: absolute; top: 50%; left: 50%; margin-top: -200px; margin-left: -150px;&#125; 父元素为块级元素，子元素未知大小： 解决方案一： 12345678.child &#123; positon: absolute; left: 0; right: 0; top: 0; bottom: 0; margin: auto;&#125; 解决方案二： 1234567.father &#123; display: table;&#125;.child &#123; display:table-cell; vertical-align: middle;&#125; 解决方案三： 123456789.father &#123; display:flex; flex-flow:row nowrap; justify-content: center; align-items: center;&#125;.child &#123; flex: 1;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"}]},{"title":"Xcode运行《学习Opencv》代码","slug":"article-14","date":"2016-09-20T15:48:51.000Z","updated":"2019-07-02T11:56:56.657Z","comments":true,"path":"2016/09/20/article-14/","link":"","permalink":"http://helianthuswhite.cn/2016/09/20/article-14/","excerpt":"使用Xcode编译运行Opencv代码。","text":"使用Xcode编译运行Opencv代码。 先从书中给的网站将代码示例下载下来并解压。 在Xcode中闯将新的Project，选择Command Line Tool。 创建好之后先将下图所示修改完好。 之后再按下图所示修改。 修改完成之后右键点击项目，New Group，取名随意，因为要放置opencv的包，所以我取名为Opencv lib。 右键Opencv lib，Add files to ……，在选择文件的时候command+shift+G,搜索/usr/local/lib，将里面Opencv的包全部导入进去，那个python的文件夹不能导入，否则可能会出现问题。 现在就可以在main.cpp中测试一下opencv的代码了。如果没有问题，OK，开始导入之前下载的例子代码。 这里我又新建了一个Group叫samples，同样用Add files to….的方法把代码全部导入了（注意，在导入的时候下面有个Option选项，把target内容取消，否则每次都要编译全部文件）。 之后就是如何使用这些代码了。 这些代码有一个问题就是，在运行的时候不能使用图片的相对路径，必须使用绝对路径，这一点很烦人，因为每次都要输入那么长的地址。 后来琢磨了一下，发现每份代码里面都会引入highgui.hpp这个头文件。 于是我就把测试图片当成常量定义在了highgui.hpp中，这样在所有的代码中都可以直接使用了。 最后就是代码的编译运行问题。 之前因为没有选中target，所以目前编译运行时应该只有main.cpp一个文件。 我们在运行某份代码时，只需要将右上角的那个target选中即可。（记得把main.cpp的target取消掉) 至此，就可以开开心心的学习OPENCV了。 最后，安利一下我的学习计划，我是将每一个例子的每一句代码都加上了注释，这样的话可以让其他人通过直接看代码便能初步的掌握Opencv的各种包和库的用法。 github地址为：https://github.com/helianthuswhite/Opencv-notes","categories":[{"name":"Xcode","slug":"Xcode","permalink":"http://helianthuswhite.cn/categories/Xcode/"}],"tags":[{"name":"OpenCV","slug":"OpenCV","permalink":"http://helianthuswhite.cn/tags/OpenCV/"},{"name":"Xcode","slug":"Xcode","permalink":"http://helianthuswhite.cn/tags/Xcode/"},{"name":"图像处理","slug":"图像处理","permalink":"http://helianthuswhite.cn/tags/图像处理/"}]},{"title":"mac安装OpenCV","slug":"article-13","date":"2016-09-20T15:47:04.000Z","updated":"2019-07-02T11:56:56.544Z","comments":true,"path":"2016/09/20/article-13/","link":"","permalink":"http://helianthuswhite.cn/2016/09/20/article-13/","excerpt":"mac下安装opencv，本来在网上看的教程，结果发现一直出现问题，琢磨了半天终于搞定了。 先去官网下载OPENCV,然后解压。 再去下载cmake，这里要注意了，最好不要下载*.dmg文件，我就是因为下载的这个导致安装好之后没有环境变量，整了半天，最后换成了.tar就好了。","text":"mac下安装opencv，本来在网上看的教程，结果发现一直出现问题，琢磨了半天终于搞定了。 先去官网下载OPENCV,然后解压。 再去下载cmake，这里要注意了，最好不要下载*.dmg文件，我就是因为下载的这个导致安装好之后没有环境变量，整了半天，最后换成了.tar就好了。 下载好cmake之后，解压。在解压的cmake文件夹内输入： ./bootstrap make make install 如果提示权限不够，前面加上sudo即可。安装好后输入cmake测试，如果不是commond not found则说明安装成功。 之后命令行进入到解压后的opencv文件夹内，分别输入： sudo cmake -G “Unix Makefiles”sudo make -j8sudo make install 等待安装完成。接下来就可以找一段opencv代码进行测试啦~","categories":[{"name":"OpenCV","slug":"OpenCV","permalink":"http://helianthuswhite.cn/categories/OpenCV/"}],"tags":[{"name":"mac","slug":"mac","permalink":"http://helianthuswhite.cn/tags/mac/"},{"name":"OpenCV","slug":"OpenCV","permalink":"http://helianthuswhite.cn/tags/OpenCV/"}]},{"title":"mac显示隐藏文件","slug":"article-12","date":"2016-09-20T15:46:08.000Z","updated":"2019-07-02T11:56:56.372Z","comments":true,"path":"2016/09/20/article-12/","link":"","permalink":"http://helianthuswhite.cn/2016/09/20/article-12/","excerpt":"defaults write com.apple.finder AppleShowAllFiles -bool true //显示隐藏文件 执行命令后强制退出finder","text":"defaults write com.apple.finder AppleShowAllFiles -bool true //显示隐藏文件 执行命令后强制退出finder","categories":[{"name":"mac","slug":"mac","permalink":"http://helianthuswhite.cn/categories/mac/"}],"tags":[{"name":"mac","slug":"mac","permalink":"http://helianthuswhite.cn/tags/mac/"}]},{"title":"MongoDB数据库的安装","slug":"article-11","date":"2016-09-20T15:38:46.000Z","updated":"2019-07-02T11:56:54.873Z","comments":true,"path":"2016/09/20/article-11/","link":"","permalink":"http://helianthuswhite.cn/2016/09/20/article-11/","excerpt":"最近在学习Node方面的内容，需要用到MongoDB数据库。本来已经能够熟练安装SQL Server和MySQL的我看着Mongo那“娇小”的身躯，以为很快就能够完事，结果==竟然装了辣么久。。。。。。把坑先记下来吧，免得以后再装的时候又步后尘。","text":"最近在学习Node方面的内容，需要用到MongoDB数据库。本来已经能够熟练安装SQL Server和MySQL的我看着Mongo那“娇小”的身躯，以为很快就能够完事，结果==竟然装了辣么久。。。。。。把坑先记下来吧，免得以后再装的时候又步后尘。 MongoDB数据库可以直接从官网下载https://www.mongodb.org/，最新的版本好像要收费，可以直接下载后面的版本。不过我试了一下，发现我这里好像不怎么能连接到资源，所以就另外找了下载地址。这个是开源中国提供的一个下载地址，可以直接下载： https://www.mongodb.org/dl/win32/x86_64-2008plus-ssl。 下载之后直接打开安装就行，最新版的安装目录是这样的： 然后打开cmd命令行，进入到安装目录中的/bin目录下。然后输入启动命令：mongod.exe，然后就会出现一大堆的东西；之后再输入连接命令：mongo.exe；然后不出意料你应该就会看到如下界面： 这是什么意思呢，显然是连接失败了，连接失败的原因又是什么呢？ 主要是因为这个版本的MongoDB没有自动配置数据存放文件夹，所以在启动时无法找到数据库存放的地方，就会出现上面的错误。 解决方法的话就是在任意磁盘的根目录，对！没错！就是在根目录！根目录！根目录！不要问我为什么这么激动，因为我被坑惨了T T。在根目录下建一个名为data的文件夹，然后在data文件夹中建立一个db文件夹。例如：D:/data/db。（说一下为什么是根目录，因为如果不是根目录的话，在后面的操作时会报错：file or repositories not found.) 完成以上的步骤之后命令行进入/bin目录下，输入：mongod –dbpath D:/data/db .也就是你刚才建立db文件夹的目录。然后你就会惊奇的发现又是一大堆东西出现，不过已经没有之前的错误了。 你需要等呀等呀直到出现下面的情况： 这时它在等待你连接27017端口，所以你需要做的就是去浏览器中输入：localhost:27017。如果你看到以下内容，那就说明mongo已经启动成功了。 It looks like you are trying to access MongoDB over HTTP on the native driver port. 之后再另外打开一个命令行窗口，切记！前面那个窗口不能关闭，否则又要重新打开。进入之前的/bin目录下，输入mongo.exe，然后就能够成功进入MongoDB的命令行中了： 到此为止，MongoDB就算安装成功了。不过如果不喜欢命令行的话，也可以使用图形化管理界面，推荐的比较多的就是Robomongo,直接去其官网下载就行https://robomongo.org/download。下载安装完成之后，打开可以看到如下界面： 点击左上角的create按钮，需要填写的直接默认就行，然后如果你点击了左下角的Test按钮，你会发现出现了下面的一个错误： 出现这个错误要淡定，不要方，直接忽略掉就好。这个是因为你的数据库没有开启验证功能，如果你想知道如何开启MongoDB的验证功能可以查看我的另一篇博文——MongoDB数据库开启验证。如果前面你用命令行能够成功进入mongo的话，那么用这个图形化工具也能成功进入的。","categories":[{"name":"数据库","slug":"数据库","permalink":"http://helianthuswhite.cn/categories/数据库/"}],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"http://helianthuswhite.cn/tags/MongoDB/"},{"name":"数据库","slug":"数据库","permalink":"http://helianthuswhite.cn/tags/数据库/"}]},{"title":"CSS中的黑科技——calc()","slug":"article-10","date":"2016-09-19T15:21:53.000Z","updated":"2019-07-02T11:56:54.763Z","comments":true,"path":"2016/09/19/article-10/","link":"","permalink":"http://helianthuswhite.cn/2016/09/19/article-10/","excerpt":"帮别人调试代码的时候看到的这个属性，然后就去了解了一下，发现真的是CSS中的黑科技。。。。。。 它能够使在CSS中进行四则运算成为可能，不要说四则运算有什么了不起，在CSS中能进行四则运算可是能帮助我们解决很多问题的。虽然在IE浏览器中也有一个CSS属性能够使用JS代码——expression，然而仅限于IE，还是旧版本。所以当我知道这个属性的时候内心还是蛮激动==","text":"帮别人调试代码的时候看到的这个属性，然后就去了解了一下，发现真的是CSS中的黑科技。。。。。。 它能够使在CSS中进行四则运算成为可能，不要说四则运算有什么了不起，在CSS中能进行四则运算可是能帮助我们解决很多问题的。虽然在IE浏览器中也有一个CSS属性能够使用JS代码——expression，然而仅限于IE，还是旧版本。所以当我知道这个属性的时候内心还是蛮激动== 不扯那些没用的了，还是早点进入正题吧。 calc()能做什么？前面已经介绍过了，进行四则运算。不过它是用于长度的单位运算的，em、px、rem都可以用来计算。最重要的一点是能够对百分比也进行计算！！比如我们经常会遇到这样的问题，对body设置了宽度100%，但是又要对盒子设置边框，于是，在设置完边框之后我们会发现浏览器的下面多了一行滚动条。这当然不是我们想要的，所以我们就可以用calc()来解决。我们可以这样做： body{ width: calc(100% – 2px); border: solid 1px #000; } 注意一点！运算符前后的空格必须，不然会无效！ 然后，之前的问题就完美解决了。还有很多类似这样的例子我们都可以用这种方法进行解决。 calc()的运算规则使用 + – * / 四则运算符","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS3","slug":"CSS3","permalink":"http://helianthuswhite.cn/tags/CSS3/"}]},{"title":"什么是CSS栅格布局","slug":"article-9","date":"2016-09-19T15:06:23.000Z","updated":"2019-07-02T11:57:11.834Z","comments":true,"path":"2016/09/19/article-9/","link":"","permalink":"http://helianthuswhite.cn/2016/09/19/article-9/","excerpt":"这个问题的出现来自于百度前端技术学院的一个小任务——响应式栅格布局。其实很早之前我就接触了一点响应式的设计，但无奈当时懵懂，并没有真正理解其中的奥妙。今天再次接触到这个，决定把它记录下来。","text":"这个问题的出现来自于百度前端技术学院的一个小任务——响应式栅格布局。其实很早之前我就接触了一点响应式的设计，但无奈当时懵懂，并没有真正理解其中的奥妙。今天再次接触到这个，决定把它记录下来。 栅格布局原理最早出现在BootStrap框架之中，由于它的响应式布局和友好的设计风格，栅格布局很快成为了前端布局中最流行的布局之一。关于栅格布局原理，BootStrap文档中也有解释，不过个人觉得那个不是很容易理解，所以在查找之后，在木的树博客中看到一篇文章，感觉很好，特此摘录。【转自——木的树博客】 栅格系统的原理 假设：Flowline的宽度为W，column的宽度为c，Gutter的宽度为g，Margin的宽度为m，栅格列数为N W = cN + g(N-1) + 2m；g的宽度通常为m的两倍，所以： W = (c+g) * N；把c+g记为C，得： W = C * N; 大部分的栅格系统都是此公式的变体。 BootStrap栅格系统下面我们将一起来看一下常见的栅格布局的设计和bootstrap中的设计实现。BootStrap中合理的使用栅格布局，必须将列放入row中，而row必须放入container中。container类在布局中主要有两个作用： 在不同的宽度区间内（响应式断点）提供宽度限制。当宽度变化时，采用不同的宽度。提供一个padding，阻止内部内容触碰到浏览器边界。 Bootstrap中使用padding代替上文中的margin。大小为15px，如下图所示，粉红色为padding大小。 Row是column的容器，每个row中的column之和必须为12，不过我们可以通过嵌套的方式扩展。Row的左右margin都为-15px，用来抵消container中的padding，如下图蓝色部分所示： Row的这种设计则是方便嵌套。 Colomn是栅格系统的主角，每个column左右padding都为15px，上文中row的负margin抵消了container的 padding，所以为每个column设置padding就是为了防止内容直接触碰边界，同时不同的column之间拥有30px的卡槽 （Gutter）。如下图黄色部分所示： 现在想想上文中提到的公式：W = C * N; 上文提到row的负margin设计主要为了嵌套，如果要在column中嵌套column首先 要把被嵌套的column放到row中，把row放到作为容器的column中，而不需要在放置一个container。如下图中蓝色所示，是放入 column中的row的负margin区域。 现在将被嵌套的column放入row中，如下图所示，上层column便是起到了container的作用。 以上便是栅格系统和BootStrap栅格布局系统的原理。 而在完成这个任务的时候，还遇到宽度百分比的问题，因为目前大部分盒子模型width都不包括padding，所以当设置宽度百分比的时候会出现容器内部盒子超出的问题。我的解决方案是使用CSS3的一个“黑科技”属性吧，也是今天才知道的——CSS中神奇的calc()。不过我看了大牛的简单写法，就是用box-sizing更改盒子模型。。。。。。好吧，这个我倒是知道，但是从来没有想起来用过==。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"},{"name":"CSS3","slug":"CSS3","permalink":"http://helianthuswhite.cn/tags/CSS3/"},{"name":"BootStrap","slug":"BootStrap","permalink":"http://helianthuswhite.cn/tags/BootStrap/"}]},{"title":"java.lang.ClassNotFoundException:com.mysql.jdbc.Driver 关于JAVAEE连接Mysql典型错误","slug":"article-8","date":"2016-09-18T06:27:43.000Z","updated":"2019-07-02T11:57:11.685Z","comments":true,"path":"2016/09/18/article-8/","link":"","permalink":"http://helianthuswhite.cn/2016/09/18/article-8/","excerpt":"今天做javaee的第一次作业，要用到Mysql，好久没有用过了，只好重新拾起。 结合同学和我的问题，对javaee报错 java.lang.ClassNotFoundException: com.mysql.jdbc.Driver 进行总结。","text":"今天做javaee的第一次作业，要用到Mysql，好久没有用过了，只好重新拾起。 结合同学和我的问题，对javaee报错 java.lang.ClassNotFoundException: com.mysql.jdbc.Driver 进行总结。 这个问题显然是java找不到mysql的驱动包。 先检查项目看看是否导入了mysql驱动包，如果导入，再看该驱动包是否加入项目的编译路径中。 先看驱动包是否导入： 是否解决？——》是，结束 | | 否，将驱动包加入路径： 驱动包——》右键——》build path——》add to build path——》Configure build path——》select all ——》ok： 问题是否解决？——》是，结束 | | 否，将mysql驱动包加入到tomcat的lib中： 是否解决？——》是，结束 | | 否，那我也没招了。 在该问题中，主要需要注意的一点就是，在java中能够连接到Mysql数据库而javaEE无法连接的时候，这是因为Tomcat服务器不会根据JAVA类中的代码去寻找驱动包，所以需要手动将驱动包加入到Tomcat的类库中。","categories":[{"name":"JavaEE","slug":"JavaEE","permalink":"http://helianthuswhite.cn/categories/JavaEE/"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://helianthuswhite.cn/tags/JavaWeb/"},{"name":"Mysql","slug":"Mysql","permalink":"http://helianthuswhite.cn/tags/Mysql/"}]},{"title":"JS闭包——经典实例循环取i详解","slug":"article-7","date":"2016-09-18T06:20:41.000Z","updated":"2019-07-02T11:57:11.476Z","comments":true,"path":"2016/09/18/article-7/","link":"","permalink":"http://helianthuswhite.cn/2016/09/18/article-7/","excerpt":"在segmentfault上面看到这篇文章，不是主要讲闭包，但是通过一个面试的经典实例将闭包的问题讲解的更加具体，更容易理解。 主要需要注意的方法有：","text":"在segmentfault上面看到这篇文章，不是主要讲闭包，但是通过一个面试的经典实例将闭包的问题讲解的更加具体，更容易理解。 主要需要注意的方法有： 方法一和方法二是最经典的解决办法，必须掌握。 更高级的做法比较有意思的是： 方法三、方法六、方法七和方法九。 文章链接：https://segmentfault.com/a/1190000003818163","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"}]},{"title":"JavaScript程序的解析与执行顺序","slug":"article-6","date":"2016-09-18T05:51:17.000Z","updated":"2019-07-02T11:57:10.384Z","comments":true,"path":"2016/09/18/article-6/","link":"","permalink":"http://helianthuswhite.cn/2016/09/18/article-6/","excerpt":"JavaScript是一种描述型脚本语言，它不同于java或C#等编译性语言,它不需要进行编译成中间语言,而是由浏览器进行动态地解析与执行。所以它的执行顺序和其他语言有所不同。","text":"JavaScript是一种描述型脚本语言，它不同于java或C#等编译性语言,它不需要进行编译成中间语言,而是由浏览器进行动态地解析与执行。所以它的执行顺序和其他语言有所不同。 一、函数的解析与执行1.1 代码块JavaScript的代码块即是指的在html中被标签所包裹的内容，例如： 123456&lt;script type=\"text/javascript\"&gt; alert(\"这是代码块一\");&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; alert(\"这是代码块二\");&lt;/script&gt; JS是按照代码块来进行编译和执行的，代码块间相互独立，但变量和方法共享。 举个例子： 123456789&lt;script type=\"text/javascript\"&gt; alert(str);//因为没有定义str，所以浏览器会出错，下面的不能运行 alert(\"我是代码块一\");//没有运行到这里 var test = \"我是代码块一变量\";&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; alert(\"我是代码块二\"); //这里有运行到 alert(test); //弹出\"我是代码块一变量\"&lt;/script&gt; 上面的代码中代码块一中运行报错，但不影响代码块二的执行，这就是代码块间的独立性，而代码块二中能调用到代码一中的变量，则是块间共享性。 但是如果把代码块一放置在代码块二的下方，代码块二依然会报错。因为代码块之间的共享性只能是由位于下方的块共享上方块的内容，这也符合了javascript从上到下解析的特点。 1.2 函数的声明和赋值JS中的函数分为两类，一类是声明式函数，一类是赋值式函数。例如： 123456789&lt;script type=\"text/javascript\"&gt; function Fn()&#123; //声明式函数 &#125; var Fn = function&#123; //赋值式函数 &#125;&lt;/script&gt; 页面加载过程中，浏览器会对页面上或载入的每个js代码块(或文件)进行扫描，如果遇到声明式函数，则进行预处理(类似于C等的编译)，处理完成之后再开 始由上至下执行；遇到赋值式函数，则只是将函数赋给一个变量，不进行预处理(类似1中变量必须先定义后引用的原则)，待调用到的时候才进行处理。 1.3 预编译期和执行期事实上，JS的解析过程分为两个阶段：预编译期(预处理)与执行期。 预编译期JS会对本代码块中的所有声明的变量和函数进行处理（类似与C语言的编译），但需要注意的是此时处理函数的只是声明式函数，而且变量也只是进行了声明但未进行初始化以及赋值。 12345678910&lt;script type=\"text/javascript\"&gt; Fn(); //执行结果：\"执行了函数2\",同名函数后者会覆盖前者 function Fn()&#123; //函数1 alert(\"执行了函数1\"); &#125; function Fn()&#123; //函数2 alert(\"执行了函数2\"); &#125;&lt;/script&gt; 12345678910&lt;script type=\"text/javascript\"&gt; Fn(); //执行结果：\"执行了声明式函数\",在预编译期声明函数及被处理了，所以即使Fn()调用函数放在声明函数前也能执行。 function Fn()&#123; //声明式函数 alert(\"执行了声明式函数\"); &#125; var Fn = function()&#123; //赋值式函数 alert(\"执行了赋值式函数\"); &#125;&lt;/script&gt; 我们上面说了JS引擎是按照代码块来顺序执行的，其实完整的说应该是按照代码块来进行预处理和执行的，也就是说预处理的只是执行到的代码块的声明函数和变量，而对于还未加载的代码块，是没法进行预处理的，这也是边编译边处理的核心所在。 二、变量的解析与执行一般的变量声明与函数的解析与执行顺序相同，都是声明在执行之前。例如： 1234&lt;script&gt; var a=1; alert(a); //输出为1&lt;/script&gt; 1234&lt;script&gt; alert(a); //输出为undefined var a=1;&lt;/script&gt; 变量的声明比函数的声明更加严格，它通常要按照一定的顺序来执行，并且每个变量都有它的作用范围。类似于其他语言中的全局变量与局部变量的区别，函数内部声明的变量在函数之外便无法使用，但是函数之外的变量在函数内部却可以调用。例如： 123456789101112&lt;script&gt; function A() &#123; var a=1; function B() &#123; alert(a); //输出结果为1 &#125; B(); &#125; A();&lt;/script&gt; 但是，如果在函数的外部和内部都同时声明了一个变量呢？结果又会是什么样的？ 12345678910111213&lt;script&gt; function A() &#123; var a=1; function B() &#123; var a = 2;//变量的声明在执行之前 alert(a)；//输出结果为2 &#125; B(); &#125; A();&lt;/script&gt; 从上面的例子可以看出，对于函数内外都声明了的变量，函数优先使用自己的变量。 三、JavaScript中的线程有很多有其他编程语言经验的人都知道有“线程”这个概念，单线程主要是指程序按照顺序依次执行，而多线程主要是用来解决一些程序中并发的问题，能够允许在同一时间多个方法同时执行。那么，在Javascript中是否有线程的说法呢？严格的来说是没有的，javascript中所有的方法都是按照顺序执行的。有些人可能会问，ajax的异步加载，定时器的延时执行等不是多线程么？例如： 123456789101112&lt;script&gt; function fn1()&#123; setTimeout(function()&#123; alert(\"我先调用\") &#125;,1000); &#125; function fn2()&#123; alert(\"我后调用\"); &#125; fn1();// 先弹出：“我后调用”， fn2();// 1秒后弹出：“我先调用”&lt;/script&gt; 从上面的例子来看，fn1()先于fn2()声明和调用，为什么fn2()先执行呢？这其实是由于Javascript中的“回调”机制在作用，就是让当前的方法先中断，然后过段时间再回调该函数使其执行。这种机制就好比操作系统中的“中断”机制，先执行fn1()函数，发现当中的定时器存在，使该执行“中断”，等到1s之后再次开始执行。 四、总结而根据HTML文档流的执行顺序，需要在页面元素渲染前执行的js代码应该放在前面的script代码块中，而需要在页面元素加载完后的js放在元素后面，body标签的onload事件是在最后执行的。 对于代码块中的代码也是从上到下的顺序进行解析和执行的。下面分步讲述一下具体机制： step 1. 读入第一个代码块。 step 2. 做语法分析，有错则报语法错误（比如括号不匹配等），并跳转到step5。 step 3. 对var变量和function定义做“预编译处理”（永远不会报错的，因为只解析正确的声明）。 step 4. 执行代码段，有错则报错（比如变量未定义）。 step 5. 如果还有下一个代码段，则读入下一个代码段，重复step2。 step 6. 结束 总之，我们在书写javascript中的方法时，应当注意几点：不要书写同名函数；对于许多方法都会使用的变量写在最外面，其他内部变量应该根据调用的层次分层来声明；减少声明式函数和赋值式函数的混用，尽量统一写法。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"},{"name":"个人作品","slug":"个人作品","permalink":"http://helianthuswhite.cn/tags/个人作品/"}]},{"title":"JS中函数执行顺序","slug":"article-5","date":"2016-09-18T05:42:32.000Z","updated":"2019-07-02T11:57:08.475Z","comments":true,"path":"2016/09/18/article-5/","link":"","permalink":"http://helianthuswhite.cn/2016/09/18/article-5/","excerpt":"浏览器对HTML文件的解析是从上至下的，先解析文档中的DOM节点，然后依次加载css和图片等。 所以，一般我们都把引入的js文件放置在body的最后面，目的是能够在文档完全解析之后再去解析并执行js中的函数。虽然在顶部引入js可以同样通过onload方法执行，但是这样的方法是不提倡的，因为当存在两个js文件中的函数都需要进行DOM操作时，就无法设定两个onload方法。","text":"浏览器对HTML文件的解析是从上至下的，先解析文档中的DOM节点，然后依次加载css和图片等。 所以，一般我们都把引入的js文件放置在body的最后面，目的是能够在文档完全解析之后再去解析并执行js中的函数。虽然在顶部引入js可以同样通过onload方法执行，但是这样的方法是不提倡的，因为当存在两个js文件中的函数都需要进行DOM操作时，就无法设定两个onload方法。 通常来说，js中我们需要注意的函数执行顺序主要是onload函数，自执行的函数，以及DOMContentLoaded事件，这里我们不说JavaScript整个的解析和执行过程，如不了解，请传送—— JavaScript程序的解析与执行顺序。 自执行的函数是在解析javascript的时候执行的。onload方法是在整个html页面的全部元素都加载完成之后执行。而DOMContentLoaded事件，顾名思义是发生在文档的DOM结构加载完成，此时页面的CSS样式以及图片都未加载。这三个函数的执行顺序是：自执行函数 &gt; DOMContentLoaded &gt; onload。 自执行函数的优先级最高，通常可以用来动态的产生页面中的DOM元素，而DOMContentLoaded用法不多，因为在实际的项目中，我们需要的往往都是在不同的加载时间段内执行不同的函数。所以可以直接在相应的DOM结构中定义需要执行的方法从而来控制加载进度执行的方法。onload函数最常用，为了确保整个页面加载完成，从而防止js中DOM操作在节点未加载完时运行导致出错。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"}]},{"title":"Web前端规范开发手册","slug":"article-4","date":"2016-09-14T07:08:51.000Z","updated":"2019-07-02T11:57:06.366Z","comments":true,"path":"2016/09/14/article-4/","link":"","permalink":"http://helianthuswhite.cn/2016/09/14/article-4/","excerpt":"个人收集总结的Web前端规范开发手册，实际工作和面试的时候都很有用。","text":"个人收集总结的Web前端规范开发手册，实际工作和面试的时候都很有用。 一、文件命名规则 文件名称统一用小写的英文字母、数字和下划线组合，其中不得包含汉字、空格和特殊字符；命名原则的指导思想是使得你自己和工作组的每个成员能够方便的理解每一个文件的意义，二是当我们在文件夹中使用“按名称排列”的命令时，同一大类的文件能够排列在一起，以便我们查找、修改、替换等操作。 1.1 HTML命名规则 主文件一般使用index来进行命名。 各个页面的命名应该以该页面的内容英文为主，如果英文过长可以考虑首字母代替，通常都为“性质_描述”来表示，并且是使用小写字母。 每个目录之下应该有一个默认的html文件，用来标识无法访问的地址，以defaut来命名。 1.2 图片命名规则 图片的名称分为首尾两个部分，中间用下划线隔开，头部分通常表示的是大类的性质，尾部分是该图片的名称。 例如：广告、标识、菜单、按钮等。 放置在页面顶部的广告、装饰图案等取名为：banner。 标志性的图片的命名为：logo。 在页面位置不固定并且带有链接的小图片我们取名为：button。 在页面的某一个位置连续出现，性质相同的链接栏目的图片我们取名为：menu。 不带链接的表示标题的图片取名为：title。 其他装饰用的图片我们命名为：pic。 范例： banner_baidu.gif logo_hit.gif menu_shine.gif等等。 1.3 JavaScript和CSS命名规则 javascript和css文件的命名需要分开来进行，css文件一般与对应的html文件命名相同，若为特效的样式，则直接以特效效果命名。 javascript的命名与css特效一样，用来描述该文件的作用，如滑动：slide.js，异步请求：ajax.js等。 二、文件存放位置规范_Root - 文件夹 备注 + cn 存放中文HTML文件 + en 存放英文HTML文件 + flash 存放flash文件 + images 存放图片文件 + imagestudio 存放PSD源文件 + flashstudio 存放flash源文件 + inc 存放include的文件 + library 存放库文件 + media 存放多媒体文件 + project 存放工程文件资料 + temp 存放客户原始资料 + js 存放javascript文件 + css 存放css文件 三、CSS书写规范3.1 基本原则 CSS样式主要可以分为2类：自定义样式和重新定义全局样式。 1、自定义样式为设计师自定义的新CSS样式，影响被使用本样式的区域，用于完成网页中布局样式的设定。 2、全局样式通常为网页的基本样式，用base.css表示，用于统一网页中的字体，行距等等样式。 页面内的样式加载必须用链接方式 &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style/style.css&quot;&gt; 一般不推荐在HTML内直接使用CSS定义样式。 3.2 注意细则 1、class与id的使用：id是唯一的通常是父级的，class常表示多标签用相同的样式。所以id常使用在大的模块上，class可以重复使用在子级模块上。 2、class与id的命名：避免class与id重名。可以按照从属关系命名，如: &lt;div id=&quot;father&quot;&gt;&lt;div class=&quot;son&quot;&gt;&lt;/div&gt;&lt;/div&gt; 也可以使用加父级前缀进行命名，如: &lt;div id=&quot;nav&quot;&gt;&lt;div class=&quot;nav_search&quot;&gt;&lt;/div&gt;&lt;/div&gt; 3、CSS属性的书写顺序，建议遵循：布局定位属性——》自身属性——》文本属性——》其他属性。尽量保持相同类型的属性书写在一起。 布局定位属性主要包括：margin、padding、float、position、top、left、right、bottom、display、visibility、overflow等；自身属性主要包括：width、height、background、border等； 文本属性主要包括：font、color、text-align、text-decoration、text-indent等； 其他属性有：list-style、vertical-align、cursor、z-index、zoom等。 4、书写代码前，考虑并提高样式的重复使用率，利用自身继承来减少代码量。 5、样式表中的中文字体名，转码成unicode码，以避免编码错误时的乱码。 6、背景图片尽可能使用sprite技术，减少http请求。 7、在用png图片作为透明背景时，对ie6应单独定义背景： background:none;_filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=crop, src=’img/bg.png’) 8、减少或者避免兼容性属性的使用。 9、必须为大块的样式添加注释，代码建议单行书写。 HTML书写规范4.1 网页制作细节 ——head区代码规范 head区是指html中之间的内容。 必须加入的标签: a. 公司版权注释 b. 网页显示字符集 简体中文： &lt;META HTTP-EQUIV=&quot;Content-Type&quot; CONTENT=&quot;text/html; charset=gb2312&quot;&gt; 繁体中文： &lt;META HTTP-EQUIV=&quot;Content-Type&quot; CONTENT=&quot;text/html; charset=utf-8&quot;&gt; 英 语： &lt;META HTTP-EQUIV=&quot;Content-Type&quot; CONTENT=&quot;text/html; charset=utf-8&quot;&gt; a. 网页制作者信息 &lt;META name=&quot;author&quot; content=&quot;webmaster@maketown.com&quot;&gt; b. 网站简介 &lt;META NAME=&quot;DESCRIPTION&quot; CONTENT=&quot;xxxxxxxxxxxxxxxxxxxxxxxxxx&quot;&gt; c. 搜索关键字 &lt;META NAME=&quot;keywords&quot; CONTENT=&quot;xxxx,xxxx,xxx,xxxxx,xxxx,&quot;&gt; d. 网页的css规范 &lt;LINK href=&quot;../css/style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt; e. 网页标题 &lt;title&gt;xxxxxxxxxxxxxxxxxx&lt;/title&gt; 可以选择加入的标签: a. 设定网页的到期时间。一旦网页过期，必须到服务器上重新调阅。 &lt;META HTTP-EQUIV=&quot;expires&quot; CONTENT=&quot;Wed, 26 Feb 1997 08：21：57 GMT&quot;&gt; b. 禁止浏览器从本地机的缓存中调阅页面内容。 &lt;META HTTP-EQUIV=&quot;Pragma&quot; CONTENT=&quot;no-cache&quot;&gt; c. 用来防止别人在框架里调用你的页面。 &lt;META HTTP-EQUIV=&quot;Window-target&quot; CONTENT=&quot;_top&quot;&gt; d. 自动跳转。 &lt;META HTTP-EQUIV=&quot;Refresh&quot; CONTENT=&quot;5;URL=http：//www.yahoo.com&quot;&gt; //5指时间停留5秒 e. 网页搜索机器人向导。用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引。 &lt;META NAME=&quot;robots&quot; CONTENT=&quot;none&quot;&gt; //CONTENT的参数有all,none,index,noindex,follow,nofollow。默认是all。 4.2 网页制作细节 ——字体运用规范 1、在设定字体样式时对于文字字号样式和行间距应必须使用CSS样式表。禁止在页面中出现 标记。 2、在网页中中文应首选使用宋体。英文和数字首选使用verdana 和arial 两种字体。一般使用中文宋体的9pt 和11pt 或12px 和14.7px 这是经过优化的字号，黑体字或者宋体字加粗时，一般选用11pt 和14.7px 的字号比较合适。 3、为了最大程度的发挥浏览器自动排版的功能，在一段完整的文字中请尽量不要使用 来人工干预分段。 4、不同语种的文字之间应该有一个半角空格，但避头的符号之前和避尾的符号之后除外，汉字之间的标点要用全角标点，英文字母和数字周围的括号应该使用半角括号。 5、请不要在网页中连续出现多于一个的 也尽量少使用全角空格（英文字符集下，全角空格会变成乱码），空白应该尽量使用 text-indent, padding, margin, hspace, vspace 以及透明的gif 图片来实现。 6、行距建议用百分比来定义，常用的两个行距的值是line-height:120%/150%。 7、排版中我们经常会遇到需要进行首行缩进的处理，不要使用 或者全角空格来达到效果，规范的做法是在样式表中定义 p { text-indent: 2em; } 然后给每一段加上p标记，注意，一般情况下，请不要省略/p结束标记 。 4.3 网页制作细节 ——链接 1、 网站中的链接路径全部采用相对路径，一般链接到某一目录下的缺省文件的链接路径不必写全名，如我们不必这样： &lt;a href=”aboutus/index.htm”&gt; 而应该这样： &lt;a href=”aboutus/”&gt; 所有内页指向首页的链接写成: &lt;a href=”/”&gt;。 2、在浏览器里，当我们点击空链接时，它会自动将当前页面重置到首端，从而影响用户正常的阅读内容，我们用代码“javascript:void(null)”代替原来的“#”标记。 4.4 网页制作细节 ——表格 1、在写 table 互相嵌套时，严格按照的规范，对于单独的一个 table 来说，table tr 对齐，td 缩进两个半角空格，td 中如果还有嵌套的表格， table 也缩进两个半角空格，如果 td 中没有任何嵌套的表格，/td 结束标记应该与 td 处于同一行，不要换行。 2、一个网页要尽量避免用整个一张大表格，所有的内容都嵌套在这个大表格之内，因为浏览器在解释页面的元素时，是以表格为单位逐一显示，如果一张网页是嵌套在一个大表格之内，那么很可能造成的后果就是，当浏览者敲入网址，他要先面对一片空白很长时间，然后所有的网页内容同时出现。如果必须这样做，请使用 tbody 标记，以便能够使这个大表格分块显示。 4.5 网页制作细节 ——ALT和Title 在我们浏览网页时，当鼠标停留在图片对象或文字链接上时，在鼠标的右下角有时会出现一个提示信息框。对目标进行一定的注释说明。在一些场合，它的作用是很重要的。 alt 用来给图片来提示的。Title用来给链接文字或普通文字提示的。 用法如下： &lt;p Title=&quot;给链接文字提示&quot;&gt;文字&lt;/p&gt; &lt;a href=&quot;#&quot; Title=&quot;给链接文字提示&quot;&gt;文字&lt;/a&gt; &lt;img src=&quot;图片.gif&quot; alt=&quot;给图片提示&quot;&gt; 4.6 网页制作细节 ——LOGO的国际标准 为了便于INTERNET上信息的传播，一个统一的国际标准是需要的。实际上已经有了这样的一整套标准。其中关于网站的LOGO，目前有三种规格： 88*31 这是互联网上最普遍的LOGO规格。 120*60 这种规格用于一般大小的LOGO。 120*90 这种规格用于大型LOGO。 4.7 网页制作细节 ——其他规范细节 1、语义化html, 如 标题根据重要性用h(同一页面只能有一个h1), 段落标记用p, 列表用ul, 内联元素中不可嵌套块级元素。 2、尽可能减少div嵌套。 3、书写链接地址时, 必须避免重定向，例如：href=”HTTP://www.example.com/”, 即须在URL地址后面加上“/”。 五、JavaScript书写规范 5.1、 书写过程中, 每行代码结束必须有分号; 原则上所有功能均根据XXX项目需求原生开发, 以避免网上down下来的代码造成的代码污染(沉冗代码 || 与现有代码冲突 || …)。 5.2、库引入: 原则上仅引入jQuery库, 若需引入第三方库, 须与团队其他人员讨论决定。 5.3、 变量命名: 驼峰式命名. 原生JavaScript变量要求是纯英文字母, 首字母须小写, 如iTaoLun; jQuery变量要求首字符为’_’, 其他与原生JavaScript 规则相同, 如: _iTaoLun; 另, 要求变量集中声明, 避免全局变量。 5.4、类命名: 首字母大写, 驼峰式命名. 如 ITaoLun。 5.5、函数命名: 首字母小写驼峰式命名. 如iTaoLun()。 5.6、命名语义化, 尽可能利用英文单词或其缩写。 5.7、尽量避免使用存在兼容性及消耗资源的方法或属性, 比如eval() &amp; innerText。 5.8、后期优化中, JavaScript非注释类中文字符须转换成unicode编码使用, 以避免编码错误时乱码显示。 5.9、代码结构明了, 加适量注释. 提高函数重用率。 5.10、注重与html分离, 减小reflow, 注重性能。 六、图片规范 6.1、所有页面元素类图片均放入img文件夹, 测试用图片放于img/demoimg文件夹。 6.2、图片格式仅限于gif || png || jpg。 6.3、命名全部用小写英文字母 || 数字 || _ 的组合，其中不得包含汉字 || 空格 || 特殊字符；尽量用易懂的词汇, 便于团队其他成员理解; 另, 命名分头尾两部分, 用下划线隔开, 比如ad_left01.gif || btn_submit.gif。 6.4、在保证视觉效果的情况下选择最小的图片格式与图片质量, 以减少加载时间。 6.5、尽量避免使用半透明的png图片(若使用, 请参考css规范相关说明)。 6.6、运用css sprite技术集中小的背景图或图标, 减小页面http请求, 但注意, 请务必在对应的sprite psd源图中划参考线, 并保存至img目录下。 七、总结 对一个编码人员来说，在编码时候注意自己的编码规范是十分有必要的。一方面，良好的编码习惯能够让自己有清晰的编码思路和代码结构，以后回顾代码时也能够更容易想起自己的思路。另一方面，在实际的项目开发中，通常都是与他人一同进行开发，所以良好的编码规范有利于编码人员之间的沟通和交流，统一的编码规范也有利于编码的展开和进行。","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"个人作品","slug":"个人作品","permalink":"http://helianthuswhite.cn/tags/个人作品/"}]},{"title":"清除canvas画布的内容","slug":"article-3","date":"2016-09-14T07:01:13.000Z","updated":"2019-07-02T11:57:02.759Z","comments":true,"path":"2016/09/14/article-3/","link":"","permalink":"http://helianthuswhite.cn/2016/09/14/article-3/","excerpt":"有时候，我们需要对canvas画布进行不断的刷新来改变绘制的内容，而刷新的办法目前我知道的有两种。","text":"有时候，我们需要对canvas画布进行不断的刷新来改变绘制的内容，而刷新的办法目前我知道的有两种。 第一种：对canvas重新绘制，把新绘制的颜色覆盖在原来内容上，设置绘制颜色与背景相同即可。 12context.fillStyle=\"#ffffff\";//白色为例子；context.fillRect(400,100,400,100); 第二种：利用clearRect() 方法清空给定矩形内的指定像素。 12context.clearRect(x,y,width,height);//x,y是要清除的矩形的左上角坐标，width和height是要清除的矩形的宽和高","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"canvas","slug":"canvas","permalink":"http://helianthuswhite.cn/tags/canvas/"},{"name":"HTML5","slug":"HTML5","permalink":"http://helianthuswhite.cn/tags/HTML5/"}]},{"title":"canvas绘图，出现图片放大模糊问题","slug":"article-2","date":"2016-09-14T05:51:00.000Z","updated":"2019-07-02T11:56:58.105Z","comments":true,"path":"2016/09/14/article-2/","link":"","permalink":"http://helianthuswhite.cn/2016/09/14/article-2/","excerpt":"html5中的canvas画布标签在利用drawImage()方法绘图时，不能够在css中定义canvas的宽和高，否则就会导致绘制的图片被放大的问题，应该直接在canvas标签内部定义。","text":"html5中的canvas画布标签在利用drawImage()方法绘图时，不能够在css中定义canvas的宽和高，否则就会导致绘制的图片被放大的问题，应该直接在canvas标签内部定义。 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;script type=\"text/javascript\" src=\"js/index.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"js/star.js\"&gt;&lt;/script&gt; &lt;style type=\"text/css\"&gt; * &#123; margin: 0px; padding: 0px; &#125; #main &#123; width: 1000px; height: 600px; background: #000; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"main\"&gt; &lt;canvas id=\"canvas\"&gt;&lt;/canvas&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 显示的结果如下所示： 修改后的代码如下：1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;script type=\"text/javascript\" src=\"js/index.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"js/star.js\"&gt;&lt;/script&gt; &lt;style type=\"text/css\"&gt; * &#123; margin: 0px; padding: 0px; &#125; #main &#123; width: 1000px; margin: 28px auto; &#125; #canvas &#123; background: #000; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"main\"&gt; &lt;canvas id=\"canvas\" width=\"1000px\" height=\"600px\"&gt;&lt;/canvas&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 显示的结果如下所示：","categories":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"canvas","slug":"canvas","permalink":"http://helianthuswhite.cn/tags/canvas/"},{"name":"HTML5","slug":"HTML5","permalink":"http://helianthuswhite.cn/tags/HTML5/"}]},{"title":"关于编写个人Resume所遇到的一些问题","slug":"article-1","date":"2016-09-13T15:05:19.000Z","updated":"2019-07-02T11:56:54.524Z","comments":true,"path":"2016/09/13/article-1/","link":"","permalink":"http://helianthuswhite.cn/2016/09/13/article-1/","excerpt":"这是之前写的一个个人简历网页版，有兴趣的朋友可以查看一下。 预览地址：http://htmlpreview.github.io/?https://github.com/helianthuswhite/Resume/blob/master/index.html 代码地址：https://github.com/helianthuswhite/Resume.git","text":"这是之前写的一个个人简历网页版，有兴趣的朋友可以查看一下。 预览地址：http://htmlpreview.github.io/?https://github.com/helianthuswhite/Resume/blob/master/index.html 代码地址：https://github.com/helianthuswhite/Resume.git 页面的构造比较简单，主要是由六个大的div组成，由上到下采用流式布局，每一个模块显示相应的内容。 在编写过程遇到挺多问题，相当于把学的都复习了一遍。 以下是遇到的一些问题以及解决方法： position定位中的relative和absolute两种定位分析不够清楚。 CSS3中的旋转属性，rotate()，旋转角度问题。 盒子阴影box-shadow的使用，参数作用。 CSS选择器相关。 关于浮动的使用和清除。 background背景属性在CSS3中的用法。 如何形成带三角的边框，即说明框。 文字超出的自动换行，超出省略等。 利用box-shadow和background产生3D按钮。 CSS3动画各属性结合使用，@Keyframe为主的。 利用透视加翻转制作3D旋转效果。 js获取一些区域的宽和高。 页面滚动显示动画插件——scrollReveal.js。","categories":[{"name":"个人作品","slug":"个人作品","permalink":"http://helianthuswhite.cn/categories/个人作品/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"},{"name":"CSS3","slug":"CSS3","permalink":"http://helianthuswhite.cn/tags/CSS3/"}]},{"title":"Hello World","slug":"hello-world","date":"2015-12-31T16:00:00.000Z","updated":"2019-07-02T11:57:12.190Z","comments":true,"path":"2016/01/01/hello-world/","link":"","permalink":"http://helianthuswhite.cn/2016/01/01/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"http://helianthuswhite.cn/tags/MongoDB/"},{"name":"数据库","slug":"数据库","permalink":"http://helianthuswhite.cn/tags/数据库/"},{"name":"前端","slug":"前端","permalink":"http://helianthuswhite.cn/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://helianthuswhite.cn/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://helianthuswhite.cn/tags/JavaScript/"},{"name":"CSS3","slug":"CSS3","permalink":"http://helianthuswhite.cn/tags/CSS3/"},{"name":"mac","slug":"mac","permalink":"http://helianthuswhite.cn/tags/mac/"},{"name":"OpenCV","slug":"OpenCV","permalink":"http://helianthuswhite.cn/tags/OpenCV/"},{"name":"Xcode","slug":"Xcode","permalink":"http://helianthuswhite.cn/tags/Xcode/"},{"name":"图像处理","slug":"图像处理","permalink":"http://helianthuswhite.cn/tags/图像处理/"},{"name":"响应式设计","slug":"响应式设计","permalink":"http://helianthuswhite.cn/tags/响应式设计/"},{"name":"NodeJS","slug":"NodeJS","permalink":"http://helianthuswhite.cn/tags/NodeJS/"},{"name":"个人作品","slug":"个人作品","permalink":"http://helianthuswhite.cn/tags/个人作品/"},{"name":"canvas","slug":"canvas","permalink":"http://helianthuswhite.cn/tags/canvas/"},{"name":"HTML5","slug":"HTML5","permalink":"http://helianthuswhite.cn/tags/HTML5/"},{"name":"面试","slug":"面试","permalink":"http://helianthuswhite.cn/tags/面试/"},{"name":"HTML","slug":"HTML","permalink":"http://helianthuswhite.cn/tags/HTML/"},{"name":"BootStrap","slug":"BootStrap","permalink":"http://helianthuswhite.cn/tags/BootStrap/"},{"name":"React","slug":"React","permalink":"http://helianthuswhite.cn/tags/React/"},{"name":"R语言","slug":"R语言","permalink":"http://helianthuswhite.cn/tags/R语言/"},{"name":"数据可视化","slug":"数据可视化","permalink":"http://helianthuswhite.cn/tags/数据可视化/"},{"name":"D3","slug":"D3","permalink":"http://helianthuswhite.cn/tags/D3/"},{"name":"Hexo","slug":"Hexo","permalink":"http://helianthuswhite.cn/tags/Hexo/"}]}]}